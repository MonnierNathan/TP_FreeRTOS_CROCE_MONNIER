/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "FreeRTOS.h"
#include "stdio.h"
#include "shell.h"
#include "drv_uart1.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define STACK_SIZE 1000
#define DELAY_1 2000
#define DELAY_2 1500

#define Q_TEST_LENGTH 8
#define Q_TEST_SIZE 4 // sizeof(uint8_t)

QueueHandle_t q_SHELL = NULL;
QueueHandle_t q_SPAM = NULL;

h_shell_t var_shell;



void TaskShell(void* p);
void TaskLED(void* p);
void TaskSPAM(void* p);

// minicom -D /dev/ttyACM-1
// ctrl+a puis q

int __io_putchar(int ch) {
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
return ch;
}

int fct_led(h_shell_t *h, int argc, char ** argv)
{
	//printf("fonction led\r\n");
	if (uxQueueSpacesAvailable (q_SHELL) <= 0){
		printf("pb taille queue\r\n");
	}
	else{
		//printf("send : %s \r\n",argv[1]);
		xQueueSend(q_SHELL,(void *)&argv[1],portMAX_DELAY);
	}

	return 0;
}

int fct_SPAM(h_shell_t *h, int argc, char ** argv)
{
	if (uxQueueSpacesAvailable (q_SPAM) <= 0){
		printf("pb taille queue\r\n");
	}
	else{
		printf("send : %s \r\n",argv[1]);
		xQueueSend(q_SPAM,(void *)&argv[1],portMAX_DELAY);
	}

	return 0;
}

void CodeShell(void* p){
	while(1){
		//printf("Task Shell");
		shell_run(&var_shell);
	}
}

void CodeLED(void* p){
	int val_to_process = 500;
	while(1){
		//printf("Task LED");
		//printf("%d \r\n", val_to_process);
		if(xQueuePeek(q_SHELL,(void *)  500, 0)==pdTRUE){
			xQueueReceive(q_SHELL, (void *)&val_to_process,0);
			//printf("val to process :%d \r\n",atoi(val_to_process));
		}
		if(atoi(val_to_process)==0){
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
		}
		else{
			printf("val to process :%d \r\n",atoi(val_to_process));
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			vTaskDelay(atoi(val_to_process));
		}
	}
}

void CodeSPAM(void* p){
	int val_to_process = 500;
	static int cpt = 0;
	while(1){
		//printf("Task SPAM\r\n");
		//vTaskDelay(1000);

		if(xQueuePeek(q_SPAM, (void *) 500, 0)==pdTRUE){
			xQueueReceive(q_SPAM, (void *)&val_to_process,0);
			printf("val received :%d \r\n",atoi(val_to_process));
			cpt = atoi(val_to_process);
			if(cpt<=0){
				printf("wrong argument \r\n");
			}
		}
		/*if(cpt>0){
			printf("val to process :%d \r\n",atoi(val_to_process));
						//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
						cpt--;
						vTaskDelay(200);
		}
		else{
			printf("End Function Serial SPAM\r\n");
		}*/


	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	//xTaskCreate(TaskCode1);

	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
	TaskHandle_t xHandle2 = NULL;
	TaskHandle_t xHandle3 = NULL;

	q_SHELL = xQueueCreate(Q_TEST_LENGTH, Q_TEST_SIZE);
	q_SPAM = xQueueCreate(Q_TEST_LENGTH, Q_TEST_SIZE);

	xReturned = xTaskCreate(
	CodeShell, // Function that implements the task.
	"TaskShell", // Text name for the task.
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_1, // Parameter passed into the task.
	1,//Priority at which the task is created.
	&xHandle1 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
	CodeLED, // Function that implements the task.
	"TaskLED", // Text name for the task.
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_2, // Parameter passed into the task.
	1,// Priority at which the task is created.
	&xHandle2 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
	CodeSPAM, // Function that implements the task.
	"TaskSPAM", // Text name for the task.
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_2, // Parameter passed into the task.
	1,// Priority at which the task is created.
	&xHandle3 ); // Used to pass out the created task's handle.


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

	var_shell.drv.receive = drv_uart1_receive;
	var_shell.drv.transmit = drv_uart1_transmit;

  shell_init(&var_shell);
  shell_add(&var_shell,'l', fct_led, "Fonction de clignotement de la LED");
  shell_add(&var_shell,'s', fct_SPAM, "Fonction de SPAM");

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {


  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
