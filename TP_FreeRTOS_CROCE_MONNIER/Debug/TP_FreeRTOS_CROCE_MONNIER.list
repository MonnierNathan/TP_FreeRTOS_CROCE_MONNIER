
TP_FreeRTOS_CROCE_MONNIER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006908  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a4  2000006c  08006974  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  08006974  00008210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106d3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2a  00000000  00000000  0001876f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  0001c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867e  00000000  00000000  0001cd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dee  00000000  00000000  00045394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27d1  00000000  00000000  00056182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  00148998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0014c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006828 	.word	0x08006828

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006828 	.word	0x08006828

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c
 800060c:	200000e0 	.word	0x200000e0

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f89e 	bl	800376e <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	0800684c 	.word	0x0800684c
 8000644:	20000088 	.word	0x20000088

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 f8d8 	bl	8003806 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bae      	ldr	r3, [pc, #696]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aad      	ldr	r2, [pc, #692]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4bab      	ldr	r3, [pc, #684]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba8      	ldr	r3, [pc, #672]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa7      	ldr	r2, [pc, #668]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba5      	ldr	r3, [pc, #660]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba2      	ldr	r3, [pc, #648]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa1      	ldr	r2, [pc, #644]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9f      	ldr	r3, [pc, #636]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9c      	ldr	r3, [pc, #624]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9b      	ldr	r2, [pc, #620]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b99      	ldr	r3, [pc, #612]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b96      	ldr	r3, [pc, #600]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a95      	ldr	r2, [pc, #596]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b93      	ldr	r3, [pc, #588]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b90      	ldr	r3, [pc, #576]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8f      	ldr	r2, [pc, #572]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8d      	ldr	r3, [pc, #564]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b8a      	ldr	r3, [pc, #552]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a89      	ldr	r2, [pc, #548]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b87      	ldr	r3, [pc, #540]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b84      	ldr	r3, [pc, #528]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a83      	ldr	r2, [pc, #524]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b81      	ldr	r3, [pc, #516]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7e      	ldr	r3, [pc, #504]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7d      	ldr	r2, [pc, #500]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7b      	ldr	r3, [pc, #492]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b78      	ldr	r3, [pc, #480]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a77      	ldr	r2, [pc, #476]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b75      	ldr	r3, [pc, #468]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b72      	ldr	r3, [pc, #456]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a71      	ldr	r2, [pc, #452]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6f      	ldr	r3, [pc, #444]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486c      	ldr	r0, [pc, #432]	@ (800092c <MX_GPIO_Init+0x2d4>)
 800077c:	f001 f9d4 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000786:	486a      	ldr	r0, [pc, #424]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000788:	f001 f9ce 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4868      	ldr	r0, [pc, #416]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 8000792:	f001 f9c9 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2102      	movs	r1, #2
 800079a:	4865      	ldr	r0, [pc, #404]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 800079c:	f001 f9c4 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 f9be 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	21c8      	movs	r1, #200	@ 0xc8
 80007b0:	4862      	ldr	r0, [pc, #392]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007b2:	f001 f9b9 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007b6:	2310      	movs	r3, #16
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007c6:	230e      	movs	r3, #14
 80007c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ce:	4619      	mov	r1, r3
 80007d0:	485b      	ldr	r0, [pc, #364]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80007d2:	f000 fffd 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007d6:	2308      	movs	r3, #8
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e6:	4619      	mov	r1, r3
 80007e8:	4855      	ldr	r0, [pc, #340]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80007ea:	f000 fff1 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007ee:	2304      	movs	r3, #4
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007fe:	2309      	movs	r3, #9
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	4619      	mov	r1, r3
 8000808:	484d      	ldr	r0, [pc, #308]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 800080a:	f000 ffe1 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800080e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000828:	4619      	mov	r1, r3
 800082a:	4844      	ldr	r0, [pc, #272]	@ (800093c <MX_GPIO_Init+0x2e4>)
 800082c:	f000 ffd0 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000830:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000842:	230c      	movs	r3, #12
 8000844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 800084e:	f000 ffbf 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000852:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000858:	2312      	movs	r3, #18
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000864:	2304      	movs	r3, #4
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086c:	4619      	mov	r1, r3
 800086e:	4835      	ldr	r0, [pc, #212]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 8000870:	f000 ffae 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000874:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000886:	230a      	movs	r3, #10
 8000888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088e:	4619      	mov	r1, r3
 8000890:	482c      	ldr	r0, [pc, #176]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 8000892:	f000 ff9d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000896:	2310      	movs	r3, #16
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ae:	4619      	mov	r1, r3
 80008b0:	4824      	ldr	r0, [pc, #144]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008b2:	f000 ff8d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008c6:	2308      	movs	r3, #8
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	@ (800092c <MX_GPIO_Init+0x2d4>)
 80008d2:	f000 ff7d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008d6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008e8:	230c      	movs	r3, #12
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4815      	ldr	r0, [pc, #84]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 80008f4:	f000 ff6c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800090a:	2301      	movs	r3, #1
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	4619      	mov	r1, r3
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_GPIO_Init+0x2f4>)
 8000916:	f000 ff5b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800091a:	2360      	movs	r3, #96	@ 0x60
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	e014      	b.n	8000950 <MX_GPIO_Init+0x2f8>
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40022000 	.word	0x40022000
 8000934:	40022800 	.word	0x40022800
 8000938:	40021c00 	.word	0x40021c00
 800093c:	40021800 	.word	0x40021800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800
 800094c:	40020000 	.word	0x40020000
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000956:	230d      	movs	r3, #13
 8000958:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095e:	4619      	mov	r1, r3
 8000960:	48bc      	ldr	r0, [pc, #752]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 8000962:	f000 ff35 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000976:	230a      	movs	r3, #10
 8000978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	48b5      	ldr	r0, [pc, #724]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000982:	f000 ff25 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000986:	f248 1333 	movw	r3, #33075	@ 0x8133
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000998:	230c      	movs	r3, #12
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	48ae      	ldr	r0, [pc, #696]	@ (8000c5c <MX_GPIO_Init+0x604>)
 80009a4:	f000 ff14 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009a8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ba:	230e      	movs	r3, #14
 80009bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c2:	4619      	mov	r1, r3
 80009c4:	48a6      	ldr	r0, [pc, #664]	@ (8000c60 <MX_GPIO_Init+0x608>)
 80009c6:	f000 ff03 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	48a0      	ldr	r0, [pc, #640]	@ (8000c60 <MX_GPIO_Init+0x608>)
 80009e0:	f000 fef6 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009e4:	2340      	movs	r3, #64	@ 0x40
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	489a      	ldr	r0, [pc, #616]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 80009fa:	f000 fee9 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a10:	230c      	movs	r3, #12
 8000a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4892      	ldr	r0, [pc, #584]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a1c:	f000 fed8 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a20:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a32:	230a      	movs	r3, #10
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	488a      	ldr	r0, [pc, #552]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000a3e:	f000 fec7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a42:	23f0      	movs	r3, #240	@ 0xf0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a52:	230a      	movs	r3, #10
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4883      	ldr	r0, [pc, #524]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000a5e:	f000 feb7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a62:	23f7      	movs	r3, #247	@ 0xf7
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a72:	230e      	movs	r3, #14
 8000a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	487c      	ldr	r0, [pc, #496]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000a7e:	f000 fea7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a94:	2309      	movs	r3, #9
 8000a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	486f      	ldr	r0, [pc, #444]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000aa0:	f000 fe96 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4866      	ldr	r0, [pc, #408]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000ac2:	f000 fe85 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	4861      	ldr	r0, [pc, #388]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000ade:	f000 fe77 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000af2:	230d      	movs	r3, #13
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4859      	ldr	r0, [pc, #356]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000afe:	f000 fe67 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD2_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD2_Pin|LCD_DISP_Pin;
 8000b02:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4854      	ldr	r0, [pc, #336]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b1c:	f000 fe58 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	484f      	ldr	r0, [pc, #316]	@ (8000c74 <MX_GPIO_Init+0x61c>)
 8000b36:	f000 fe4b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b3a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	4848      	ldr	r0, [pc, #288]	@ (8000c78 <MX_GPIO_Init+0x620>)
 8000b58:	f000 fe3a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b5c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b6e:	230e      	movs	r3, #14
 8000b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	483c      	ldr	r0, [pc, #240]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b7a:	f000 fe29 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4836      	ldr	r0, [pc, #216]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000b96:	f000 fe1b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bac:	230d      	movs	r3, #13
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4829      	ldr	r0, [pc, #164]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000bb8:	f000 fe0a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4825      	ldr	r0, [pc, #148]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000bd0:	f000 fdfe 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be4:	230c      	movs	r3, #12
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000bf0:	f000 fdee 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bf4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	481c      	ldr	r0, [pc, #112]	@ (8000c7c <MX_GPIO_Init+0x624>)
 8000c0a:	f000 fde1 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <MX_GPIO_Init+0x624>)
 8000c28:	f000 fdd2 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c2c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c3e:	230d      	movs	r3, #13
 8000c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_GPIO_Init+0x624>)
 8000c4a:	f000 fdc1 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e016      	b.n	8000c80 <MX_GPIO_Init+0x628>
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	40022400 	.word	0x40022400
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	40022800 	.word	0x40022800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40021400 	.word	0x40021400
 8000c7c:	40021c00 	.word	0x40021c00
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	48a4      	ldr	r0, [pc, #656]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000c9a:	f000 fd99 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	489e      	ldr	r0, [pc, #632]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000cb4:	f000 fd8c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4896      	ldr	r0, [pc, #600]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000cd6:	f000 fd7b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	488e      	ldr	r0, [pc, #568]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000cf2:	f000 fd6d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cf6:	23c0      	movs	r3, #192	@ 0xc0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d06:	2308      	movs	r3, #8
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4888      	ldr	r0, [pc, #544]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d12:	f000 fd5d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d16:	2310      	movs	r3, #16
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d26:	230a      	movs	r3, #10
 8000d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4881      	ldr	r0, [pc, #516]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000d32:	f000 fd4d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d36:	2328      	movs	r3, #40	@ 0x28
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d46:	230c      	movs	r3, #12
 8000d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4879      	ldr	r0, [pc, #484]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000d52:	f000 fd3d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d56:	23c8      	movs	r3, #200	@ 0xc8
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4873      	ldr	r0, [pc, #460]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000d6e:	f000 fd2f 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d72:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	486e      	ldr	r0, [pc, #440]	@ (8000f40 <MX_GPIO_Init+0x8e8>)
 8000d88:	f000 fd22 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4863      	ldr	r0, [pc, #396]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000da8:	f000 fd12 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	485b      	ldr	r0, [pc, #364]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000dc8:	f000 fd02 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dcc:	2332      	movs	r3, #50	@ 0x32
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4853      	ldr	r0, [pc, #332]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000de8:	f000 fcf2 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dec:	2304      	movs	r3, #4
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dfc:	2309      	movs	r3, #9
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	484f      	ldr	r0, [pc, #316]	@ (8000f44 <MX_GPIO_Init+0x8ec>)
 8000e08:	f000 fce2 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e0c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e1e:	2309      	movs	r3, #9
 8000e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e26:	4619      	mov	r1, r3
 8000e28:	4847      	ldr	r0, [pc, #284]	@ (8000f48 <MX_GPIO_Init+0x8f0>)
 8000e2a:	f000 fcd1 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	483e      	ldr	r0, [pc, #248]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e42:	f000 fcc5 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e46:	2386      	movs	r3, #134	@ 0x86
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4833      	ldr	r0, [pc, #204]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e62:	f000 fcb5 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e76:	4619      	mov	r1, r3
 8000e78:	482d      	ldr	r0, [pc, #180]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e7a:	f000 fca9 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e7e:	2350      	movs	r3, #80	@ 0x50
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e8e:	230d      	movs	r3, #13
 8000e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4825      	ldr	r0, [pc, #148]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e9a:	f000 fc99 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e9e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481f      	ldr	r0, [pc, #124]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000ebc:	f000 fc88 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ec0:	2328      	movs	r3, #40	@ 0x28
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000edc:	f000 fc78 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ee0:	2340      	movs	r3, #64	@ 0x40
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ef0:	2309      	movs	r3, #9
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480f      	ldr	r0, [pc, #60]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000efc:	f000 fc68 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f12:	2305      	movs	r3, #5
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <MX_GPIO_Init+0x8ec>)
 8000f1e:	f000 fc57 	bl	80017d0 <HAL_GPIO_Init>

}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	@ 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40021c00 	.word	0x40021c00
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40021400 	.word	0x40021400
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40020c00 	.word	0x40020c00

08000f4c <__io_putchar>:
void TaskCode2(void* p);

// minicom -D /dev/ttyACM-1
// ctrl+a puis q

int __io_putchar(int ch) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <__io_putchar+0x20>)
 8000f5e:	f001 ff2f 	bl	8002dc0 <HAL_UART_Transmit>
return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200002ec 	.word	0x200002ec

08000f70 <CodeLedON>:

SemaphoreHandle_t sem_led_on;
SemaphoreHandle_t sem_led_off;

void CodeLedON(void* p){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	int duree = (int) p;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
	while(1){
		vTaskDelay(duree);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 fa9c 	bl	80044bc <vTaskDelay>
		xSemaphoreGive(sem_led_off);
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <CodeLedON+0x38>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f002 fdd1 	bl	8003b34 <xQueueGenericSend>
		printf("Give_OFF \n\r"); printf("\n\r");vTaskDelay(100);
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <CodeLedON+0x3c>)
 8000f94:	f004 fdce 	bl	8005b34 <iprintf>
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <CodeLedON+0x40>)
 8000f9a:	f004 fdcb 	bl	8005b34 <iprintf>
 8000f9e:	2064      	movs	r0, #100	@ 0x64
 8000fa0:	f003 fa8c 	bl	80044bc <vTaskDelay>
		vTaskDelay(duree);
 8000fa4:	bf00      	nop
 8000fa6:	e7e9      	b.n	8000f7c <CodeLedON+0xc>
 8000fa8:	200002e4 	.word	0x200002e4
 8000fac:	08006868 	.word	0x08006868
 8000fb0:	08006874 	.word	0x08006874

08000fb4 <CodeLedOFF>:
		//xSemaphoreTake(sem_led_off, portMAX_DELAY); //pour tester le pdFALSE

	}
}

void CodeLedOFF(void* p){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	while(1){

		if(xSemaphoreTake(sem_led_off, 3000)==pdFALSE){
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <CodeLedOFF+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 febf 	bl	8003d48 <xQueueSemaphoreTake>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <CodeLedOFF+0x24>
			printf("reset\n\r");
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <CodeLedOFF+0x40>)
 8000fd2:	f004 fdaf 	bl	8005b34 <iprintf>
 8000fd6:	e7f1      	b.n	8000fbc <CodeLedOFF+0x8>
			NVIC_SystemReset;
		}
		else{
		printf("Take_OFF \n\r"); printf("\n\r");
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <CodeLedOFF+0x44>)
 8000fda:	f004 fdab 	bl	8005b34 <iprintf>
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <CodeLedOFF+0x48>)
 8000fe0:	f004 fda8 	bl	8005b34 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <CodeLedOFF+0x4c>)
 8000fe8:	f000 fdb7 	bl	8001b5a <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(sem_led_off, 3000)==pdFALSE){
 8000fec:	e7e6      	b.n	8000fbc <CodeLedOFF+0x8>
 8000fee:	bf00      	nop
 8000ff0:	200002e4 	.word	0x200002e4
 8000ff4:	08006878 	.word	0x08006878
 8000ff8:	08006880 	.word	0x08006880
 8000ffc:	08006874 	.word	0x08006874
 8001000:	40022000 	.word	0x40022000

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle2 = NULL;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
		(void *) DELAY_0, // Parameter passed into the task.
		1,//Priority at which the task is created.
		&xHandle1 ); // Used to pass out the created task's handle.
	*/

	sem_led_on = xSemaphoreCreateBinary(); /* New! */
 8001012:	2203      	movs	r2, #3
 8001014:	2100      	movs	r1, #0
 8001016:	2001      	movs	r0, #1
 8001018:	f002 fd2a 	bl	8003a70 <xQueueGenericCreate>
 800101c:	4603      	mov	r3, r0
 800101e:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <main+0x84>)
 8001020:	6013      	str	r3, [r2, #0]
	sem_led_off = xSemaphoreCreateBinary(); /* New! */
 8001022:	2203      	movs	r2, #3
 8001024:	2100      	movs	r1, #0
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fd22 	bl	8003a70 <xQueueGenericCreate>
 800102c:	4603      	mov	r3, r0
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <main+0x88>)
 8001030:	6013      	str	r3, [r2, #0]

	xReturned = xTaskCreate(
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	2301      	movs	r3, #1
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001040:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001044:	4912      	ldr	r1, [pc, #72]	@ (8001090 <main+0x8c>)
 8001046:	4813      	ldr	r0, [pc, #76]	@ (8001094 <main+0x90>)
 8001048:	f003 f8fe 	bl	8004248 <xTaskCreate>
 800104c:	60f8      	str	r0, [r7, #12]
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_1, // Parameter passed into the task.
	1,//Priority at which the task is created.
	&xHandle1 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2302      	movs	r3, #2
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800105e:	490e      	ldr	r1, [pc, #56]	@ (8001098 <main+0x94>)
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <main+0x98>)
 8001062:	f003 f8f1 	bl	8004248 <xTaskCreate>
 8001066:	60f8      	str	r0, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fa6f 	bl	800154a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f818 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f7ff faf2 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001074:	f000 f98e 	bl	8001394 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */

  MX_FREERTOS_Init();
 8001078:	f7ff faca 	bl	8000610 <MX_FREERTOS_Init>
  vTaskStartScheduler();
 800107c:	f003 fa56 	bl	800452c <vTaskStartScheduler>

  /* Start scheduler */
  osKernelStart();
 8001080:	f002 fb6e 	bl	8003760 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <main+0x80>
 8001088:	200002e0 	.word	0x200002e0
 800108c:	200002e4 	.word	0x200002e4
 8001090:	0800688c 	.word	0x0800688c
 8001094:	08000f71 	.word	0x08000f71
 8001098:	08006898 	.word	0x08006898
 800109c:	08000fb5 	.word	0x08000fb5

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	@ 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	@ 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fd95 	bl	8005bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <SystemClock_Config+0xd4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001174 <SystemClock_Config+0xd4>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <SystemClock_Config+0xd4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <SystemClock_Config+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <SystemClock_Config+0xd8>)
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <SystemClock_Config+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001108:	2319      	movs	r3, #25
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800110c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fd86 	bl	8001c30 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800112a:	f000 f827 	bl	800117c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800112e:	f000 fd2f 	bl	8001b90 <HAL_PWREx_EnableOverDrive>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001138:	f000 f820 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001148:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2107      	movs	r1, #7
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f80c 	bl	8002178 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001166:	f000 f809 	bl	800117c <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3750      	adds	r7, #80	@ 0x50
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	210f      	movs	r1, #15
 80011c2:	f06f 0001 	mvn.w	r0, #1
 80011c6:	f000 fada 	bl	800177e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f9d7 	bl	80015c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001216:	f003 fda7 	bl	8004d68 <xTaskGetSchedulerState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d001      	beq.n	8001224 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001220:	f004 f98a 	bl	8005538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00a      	b.n	8001250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123a:	f3af 8000 	nop.w
 800123e:	4601      	mov	r1, r0
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf0      	blt.n	800123a <_read+0x12>
  }

  return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e009      	b.n	8001288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe65 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf1      	blt.n	8001274 <_write+0x12>
  }
  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f004 fca2 	bl	8005c7c <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20050000 	.word	0x20050000
 8001364:	00000400 	.word	0x00000400
 8001368:	200002e8 	.word	0x200002e8
 800136c:	20004210 	.word	0x20004210

08001370 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <MX_USART1_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART1_UART_Init+0x58>)
 80013d8:	f001 fca4 	bl	8002d24 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f7ff fecb 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002ec 	.word	0x200002ec
 80013f0:	40011000 	.word	0x40011000

080013f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ac      	sub	sp, #176	@ 0xb0
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	2284      	movs	r2, #132	@ 0x84
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fbe2 	bl	8005bde <memset>
  if(uartHandle->Instance==USART1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a32      	ldr	r2, [pc, #200]	@ (80014e8 <HAL_UART_MspInit+0xf4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d15c      	bne.n	80014de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001424:	2340      	movs	r3, #64	@ 0x40
 8001426:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001428:	2300      	movs	r3, #0
 800142a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f887 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800143c:	f7ff fe9e 	bl	800117c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001444:	4a29      	ldr	r2, [pc, #164]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6453      	str	r3, [r2, #68]	@ 0x44
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	4a23      	ldr	r2, [pc, #140]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6313      	str	r3, [r2, #48]	@ 0x30
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6313      	str	r3, [r2, #48]	@ 0x30
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_UART_MspInit+0xf8>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4810      	ldr	r0, [pc, #64]	@ (80014f0 <HAL_UART_MspInit+0xfc>)
 80014ae:	f000 f98f 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014cc:	2307      	movs	r3, #7
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <HAL_UART_MspInit+0x100>)
 80014da:	f000 f979 	bl	80017d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	37b0      	adds	r7, #176	@ 0xb0
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020000 	.word	0x40020000

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001530 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fc:	f7ff ff38 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	@ (8001538 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	@ (8001544 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001526:	f004 fbaf 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fd6b 	bl	8001004 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800153c:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 8001540:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001544:	20004210 	.word	0x20004210

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>

0800154a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f90a 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001554:	200f      	movs	r0, #15
 8001556:	f000 f805 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155a:	f7ff fe15 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f917 	bl	80017b6 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a0:	f000 f8ed 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000374 	.word	0x20000374

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000374 	.word	0x20000374

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff47 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff5c 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb0 	bl	8001724 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e175      	b.n	8001adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8164 	bne.w	8001ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x56>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80be 	beq.w	8001ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001972:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_GPIO_Init+0x32c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d037      	beq.n	8001a0e <HAL_GPIO_Init+0x23e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a57      	ldr	r2, [pc, #348]	@ (8001b00 <HAL_GPIO_Init+0x330>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0x23a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_GPIO_Init+0x334>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x236>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_GPIO_Init+0x338>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x232>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a54      	ldr	r2, [pc, #336]	@ (8001b0c <HAL_GPIO_Init+0x33c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a53      	ldr	r2, [pc, #332]	@ (8001b10 <HAL_GPIO_Init+0x340>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x22a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	@ (8001b14 <HAL_GPIO_Init+0x344>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	@ (8001b18 <HAL_GPIO_Init+0x348>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	@ (8001b1c <HAL_GPIO_Init+0x34c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_GPIO_Init+0x350>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x21a>
 80019e6:	2309      	movs	r3, #9
 80019e8:	e012      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ea:	230a      	movs	r3, #10
 80019ec:	e010      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ee:	2308      	movs	r3, #8
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a34      	ldr	r2, [pc, #208]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae86 	bls.w	80017f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022400 	.word	0x40022400
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bbe:	f7ff fd15 	bl	80015ec <HAL_GetTick>
 8001bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bc4:	e009      	b.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc6:	f7ff fd11 	bl	80015ec <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bd4:	d901      	bls.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e022      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fcfa 	bl	80015ec <HAL_GetTick>
 8001bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bfa:	e009      	b.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfc:	f7ff fcf6 	bl	80015ec <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c0a:	d901      	bls.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e007      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e291      	b.n	800216a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b96      	ldr	r3, [pc, #600]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c60:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
 8001c6c:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x130>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e26b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x7a>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x9c>
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6b      	ldr	r2, [pc, #428]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc6c 	bl	80015ec <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc68 	bl	80015ec <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	@ 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e21f      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b61      	ldr	r3, [pc, #388]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc58 	bl	80015ec <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc54 	bl	80015ec <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	@ 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e20b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x110>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d069      	beq.n	8001e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
 8001d86:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1df      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	493d      	ldr	r1, [pc, #244]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e040      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc0a 	bl	80015ec <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc06 	bl	80015ec <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1bd      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4929      	ldr	r1, [pc, #164]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fbe6 	bl	80015ec <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbe2 	bl	80015ec <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e199      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d038      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff fbc3 	bl	80015ec <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fbbf 	bl	80015ec <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e176      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x23a>
 8001e88:	e01a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fba9 	bl	80015ec <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fba5 	bl	80015ec <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d903      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e15c      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
 8001eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b91      	ldr	r3, [pc, #580]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a4 	beq.w	8002016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8b      	ldr	r3, [pc, #556]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a87      	ldr	r2, [pc, #540]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b85      	ldr	r3, [pc, #532]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb6d 	bl	80015ec <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff fb69 	bl	80015ec <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	@ 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e120      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x31a>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f40:	4a6e      	ldr	r2, [pc, #440]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x33c>
 8001f52:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	4a69      	ldr	r2, [pc, #420]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5e:	4b67      	ldr	r3, [pc, #412]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f62:	4a66      	ldr	r2, [pc, #408]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x35e>
 8001f74:	4b61      	ldr	r3, [pc, #388]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f78:	4a60      	ldr	r2, [pc, #384]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f80:	4b5e      	ldr	r3, [pc, #376]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a5d      	ldr	r2, [pc, #372]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5a      	ldr	r2, [pc, #360]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a57      	ldr	r2, [pc, #348]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff fb1d 	bl	80015ec <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff fb19 	bl	80015ec <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0ce      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x386>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff fb07 	bl	80015ec <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fb03 	bl	80015ec <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3c      	ldr	r3, [pc, #240]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	4a3b      	ldr	r2, [pc, #236]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a4 	beq.w	8002168 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d06b      	beq.n	8002104 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d149      	bne.n	80020c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fad4 	bl	80015ec <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff fad0 	bl	80015ec <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e087      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4313      	orrs	r3, r2
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800208e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002092:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff faa4 	bl	80015ec <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff faa0 	bl	80015ec <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e057      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x478>
 80020c6:	e04f      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa8a 	bl	80015ec <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fa86 	bl	80015ec <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03d      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x4ac>
 80020fa:	e035      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x544>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d028      	beq.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d121      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800213a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	4965      	ldr	r1, [pc, #404]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a58      	ldr	r2, [pc, #352]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7ff f9be 	bl	80015ec <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff f9ba 	bl	80015ec <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 020f 	bic.w	r2, r3, #15
 80022b2:	4922      	ldr	r1, [pc, #136]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	@ (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_ClockConfig+0x1d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f91a 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00
 8002340:	40023800 	.word	0x40023800
 8002344:	080068ac 	.word	0x080068ac
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b090      	sub	sp, #64	@ 0x40
 8002356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d00d      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x40>
 8002374:	2b08      	cmp	r3, #8
 8002376:	f200 80a1 	bhi.w	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x3a>
 8002382:	e09b      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002388:	e09b      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238a:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800238e:	e098      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239a:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023b8:	2100      	movs	r1, #0
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023bc:	fb03 f201 	mul.w	r2, r3, r1
 80023c0:	2300      	movs	r3, #0
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	4a43      	ldr	r2, [pc, #268]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ca:	fba0 1202 	umull	r1, r2, r0, r2
 80023ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d0:	460a      	mov	r2, r1
 80023d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023dc:	2200      	movs	r2, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	61fa      	str	r2, [r7, #28]
 80023e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023ea:	f7fd ff61 	bl	80002b0 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f6:	e053      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f8:	4b35      	ldr	r3, [pc, #212]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	2200      	movs	r2, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240a:	f04f 0b00 	mov.w	fp, #0
 800240e:	4652      	mov	r2, sl
 8002410:	465b      	mov	r3, fp
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	0159      	lsls	r1, r3, #5
 800241c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002420:	0150      	lsls	r0, r2, #5
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ebb2 080a 	subs.w	r8, r2, sl
 800242a:	eb63 090b 	sbc.w	r9, r3, fp
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800243e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002442:	ebb2 0408 	subs.w	r4, r2, r8
 8002446:	eb63 0509 	sbc.w	r5, r3, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	00eb      	lsls	r3, r5, #3
 8002454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002458:	00e2      	lsls	r2, r4, #3
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	eb14 030a 	adds.w	r3, r4, sl
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	eb45 030b 	adc.w	r3, r5, fp
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002476:	4629      	mov	r1, r5
 8002478:	028b      	lsls	r3, r1, #10
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002480:	4621      	mov	r1, r4
 8002482:	028a      	lsls	r2, r1, #10
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	2200      	movs	r2, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002494:	f7fd ff0c 	bl	80002b0 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3740      	adds	r7, #64	@ 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	017d7840 	.word	0x017d7840

080024dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f8:	f7ff fff0 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a9b      	lsrs	r3, r3, #10
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	080068bc 	.word	0x080068bc

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002520:	f7ff ffdc 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0b5b      	lsrs	r3, r3, #13
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	080068bc 	.word	0x080068bc

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002580:	4964      	ldr	r1, [pc, #400]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d017      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800259e:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ac:	4959      	ldr	r1, [pc, #356]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025bc:	d101      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d017      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025da:	4b4e      	ldr	r3, [pc, #312]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	494a      	ldr	r1, [pc, #296]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f8:	d101      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 808b 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a39      	ldr	r2, [pc, #228]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002640:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe ffce 	bl	80015ec <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe ffca 	bl	80015ec <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	@ 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e357      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d035      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d02e      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002690:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002698:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d114      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe ff92 	bl	80015ec <HAL_GetTick>
 80026c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe ff8e 	bl	80015ec <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e319      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ee      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026fa:	d111      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800270a:	400b      	ands	r3, r1
 800270c:	4901      	ldr	r1, [pc, #4]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
 8002712:	e00b      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	0ffffcff 	.word	0x0ffffcff
 8002720:	4baa      	ldr	r3, [pc, #680]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4aa9      	ldr	r2, [pc, #676]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800272a:	6093      	str	r3, [r2, #8]
 800272c:	4ba7      	ldr	r3, [pc, #668]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	49a4      	ldr	r1, [pc, #656]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	4313      	orrs	r3, r2
 800273c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800274a:	4ba0      	ldr	r3, [pc, #640]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002750:	4a9e      	ldr	r2, [pc, #632]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800275a:	4b9c      	ldr	r3, [pc, #624]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	4999      	ldr	r1, [pc, #612]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002778:	4b94      	ldr	r3, [pc, #592]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002786:	4991      	ldr	r1, [pc, #580]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279a:	4b8c      	ldr	r3, [pc, #560]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027a8:	4988      	ldr	r1, [pc, #544]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027bc:	4b83      	ldr	r3, [pc, #524]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	4980      	ldr	r1, [pc, #512]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027de:	4b7b      	ldr	r3, [pc, #492]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4977      	ldr	r1, [pc, #476]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002800:	4b72      	ldr	r3, [pc, #456]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	496f      	ldr	r1, [pc, #444]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002822:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f023 020c 	bic.w	r2, r3, #12
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	4966      	ldr	r1, [pc, #408]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002844:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	495e      	ldr	r1, [pc, #376]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002866:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002874:	4955      	ldr	r1, [pc, #340]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	494d      	ldr	r1, [pc, #308]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028aa:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4944      	ldr	r1, [pc, #272]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028cc:	4b3f      	ldr	r3, [pc, #252]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	493c      	ldr	r1, [pc, #240]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fc:	4933      	ldr	r1, [pc, #204]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002910:	4b2e      	ldr	r3, [pc, #184]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800291e:	492b      	ldr	r1, [pc, #172]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d011      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002932:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002940:	4922      	ldr	r1, [pc, #136]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002972:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	4912      	ldr	r1, [pc, #72]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a4:	4909      	ldr	r1, [pc, #36]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d006      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80d9 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a01      	ldr	r2, [pc, #4]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ca:	e001      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d2:	f7fe fe0b 	bl	80015ec <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029da:	f7fe fe07 	bl	80015ec <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e194      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	0e1b      	lsrs	r3, r3, #24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	019a      	lsls	r2, r3, #6
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	071b      	lsls	r3, r3, #28
 8002a40:	4957      	ldr	r1, [pc, #348]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a72:	d129      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a88:	0f1b      	lsrs	r3, r3, #28
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	019a      	lsls	r2, r3, #6
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	071b      	lsls	r3, r3, #28
 8002aa8:	493d      	ldr	r1, [pc, #244]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab6:	f023 021f 	bic.w	r2, r3, #31
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01d      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ada:	0e1b      	lsrs	r3, r3, #24
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	0f1b      	lsrs	r3, r3, #28
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	019a      	lsls	r2, r3, #6
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	071b      	lsls	r3, r3, #28
 8002b08:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	019a      	lsls	r2, r3, #6
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	4919      	ldr	r1, [pc, #100]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fd4e 	bl	80015ec <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b54:	f7fe fd4a 	bl	80015ec <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0d7      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f040 80cd 	bne.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe fd31 	bl	80015ec <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b8e:	f7fe fd2d 	bl	80015ec <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d903      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0ba      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb0:	d0ed      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02e      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12a      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bda:	4b51      	ldr	r3, [pc, #324]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002be8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	0f1b      	lsrs	r3, r3, #28
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	019a      	lsls	r2, r3, #6
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4944      	ldr	r1, [pc, #272]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c16:	4b42      	ldr	r3, [pc, #264]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	493d      	ldr	r1, [pc, #244]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d022      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c44:	d11d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c46:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	0e1b      	lsrs	r3, r3, #24
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c54:	4b32      	ldr	r3, [pc, #200]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	019a      	lsls	r2, r3, #6
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	4929      	ldr	r1, [pc, #164]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	0e1b      	lsrs	r3, r3, #24
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c9c:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	019a      	lsls	r2, r3, #6
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	071b      	lsls	r3, r3, #28
 8002cc2:	4917      	ldr	r1, [pc, #92]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4911      	ldr	r1, [pc, #68]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fc7e 	bl	80015ec <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf4:	f7fe fc7a 	bl	80015ec <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e007      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d12:	d1ef      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800

08002d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e040      	b.n	8002db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe fb54 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb16 	bl	800339c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8af 	bl	8002ed4 <UART_SetConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01b      	b.n	8002db8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fb95 	bl	80034e0 <UART_CheckIdleState>
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d177      	bne.n	8002ec8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_UART_Transmit+0x24>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e070      	b.n	8002eca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	@ 0x21
 8002df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7fe fbf9 	bl	80015ec <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e14:	d108      	bne.n	8002e28 <HAL_UART_Transmit+0x68>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e003      	b.n	8002e30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e30:	e02f      	b.n	8002e92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	@ 0x80
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fba6 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e03b      	b.n	8002eca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e007      	b.n	8002e80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1c9      	bne.n	8002e32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	@ 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fb70 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e005      	b.n	8002eca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4ba6      	ldr	r3, [pc, #664]	@ (8003198 <UART_SetConfig+0x2c4>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6979      	ldr	r1, [r7, #20]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a94      	ldr	r2, [pc, #592]	@ (800319c <UART_SetConfig+0x2c8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d120      	bne.n	8002f92 <UART_SetConfig+0xbe>
 8002f50:	4b93      	ldr	r3, [pc, #588]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d816      	bhi.n	8002f8c <UART_SetConfig+0xb8>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <UART_SetConfig+0x90>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f81 	.word	0x08002f81
 8002f6c:	08002f7b 	.word	0x08002f7b
 8002f70:	08002f87 	.word	0x08002f87
 8002f74:	2301      	movs	r3, #1
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e150      	b.n	800321c <UART_SetConfig+0x348>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e14d      	b.n	800321c <UART_SetConfig+0x348>
 8002f80:	2304      	movs	r3, #4
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e14a      	b.n	800321c <UART_SetConfig+0x348>
 8002f86:	2308      	movs	r3, #8
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e147      	b.n	800321c <UART_SetConfig+0x348>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e144      	b.n	800321c <UART_SetConfig+0x348>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a83      	ldr	r2, [pc, #524]	@ (80031a4 <UART_SetConfig+0x2d0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d132      	bne.n	8003002 <UART_SetConfig+0x12e>
 8002f9c:	4b80      	ldr	r3, [pc, #512]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d828      	bhi.n	8002ffc <UART_SetConfig+0x128>
 8002faa:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0xdc>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002ffd 	.word	0x08002ffd
 8002fb8:	08002ffd 	.word	0x08002ffd
 8002fbc:	08002ffd 	.word	0x08002ffd
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002ffd 	.word	0x08002ffd
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	08002ffd 	.word	0x08002ffd
 8002fd0:	08002feb 	.word	0x08002feb
 8002fd4:	08002ffd 	.word	0x08002ffd
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08002ffd 	.word	0x08002ffd
 8002fe0:	08002ff7 	.word	0x08002ff7
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e118      	b.n	800321c <UART_SetConfig+0x348>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e115      	b.n	800321c <UART_SetConfig+0x348>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e112      	b.n	800321c <UART_SetConfig+0x348>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e10f      	b.n	800321c <UART_SetConfig+0x348>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e10c      	b.n	800321c <UART_SetConfig+0x348>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a68      	ldr	r2, [pc, #416]	@ (80031a8 <UART_SetConfig+0x2d4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d120      	bne.n	800304e <UART_SetConfig+0x17a>
 800300c:	4b64      	ldr	r3, [pc, #400]	@ (80031a0 <UART_SetConfig+0x2cc>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003012:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003016:	2b30      	cmp	r3, #48	@ 0x30
 8003018:	d013      	beq.n	8003042 <UART_SetConfig+0x16e>
 800301a:	2b30      	cmp	r3, #48	@ 0x30
 800301c:	d814      	bhi.n	8003048 <UART_SetConfig+0x174>
 800301e:	2b20      	cmp	r3, #32
 8003020:	d009      	beq.n	8003036 <UART_SetConfig+0x162>
 8003022:	2b20      	cmp	r3, #32
 8003024:	d810      	bhi.n	8003048 <UART_SetConfig+0x174>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <UART_SetConfig+0x15c>
 800302a:	2b10      	cmp	r3, #16
 800302c:	d006      	beq.n	800303c <UART_SetConfig+0x168>
 800302e:	e00b      	b.n	8003048 <UART_SetConfig+0x174>
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e0f2      	b.n	800321c <UART_SetConfig+0x348>
 8003036:	2302      	movs	r3, #2
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e0ef      	b.n	800321c <UART_SetConfig+0x348>
 800303c:	2304      	movs	r3, #4
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e0ec      	b.n	800321c <UART_SetConfig+0x348>
 8003042:	2308      	movs	r3, #8
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e0e9      	b.n	800321c <UART_SetConfig+0x348>
 8003048:	2310      	movs	r3, #16
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e0e6      	b.n	800321c <UART_SetConfig+0x348>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <UART_SetConfig+0x2d8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d120      	bne.n	800309a <UART_SetConfig+0x1c6>
 8003058:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <UART_SetConfig+0x2cc>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003062:	2bc0      	cmp	r3, #192	@ 0xc0
 8003064:	d013      	beq.n	800308e <UART_SetConfig+0x1ba>
 8003066:	2bc0      	cmp	r3, #192	@ 0xc0
 8003068:	d814      	bhi.n	8003094 <UART_SetConfig+0x1c0>
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d009      	beq.n	8003082 <UART_SetConfig+0x1ae>
 800306e:	2b80      	cmp	r3, #128	@ 0x80
 8003070:	d810      	bhi.n	8003094 <UART_SetConfig+0x1c0>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x1a8>
 8003076:	2b40      	cmp	r3, #64	@ 0x40
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x1b4>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x1c0>
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e0cc      	b.n	800321c <UART_SetConfig+0x348>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0c9      	b.n	800321c <UART_SetConfig+0x348>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0c6      	b.n	800321c <UART_SetConfig+0x348>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0c3      	b.n	800321c <UART_SetConfig+0x348>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e0c0      	b.n	800321c <UART_SetConfig+0x348>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a44      	ldr	r2, [pc, #272]	@ (80031b0 <UART_SetConfig+0x2dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d125      	bne.n	80030f0 <UART_SetConfig+0x21c>
 80030a4:	4b3e      	ldr	r3, [pc, #248]	@ (80031a0 <UART_SetConfig+0x2cc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b2:	d017      	beq.n	80030e4 <UART_SetConfig+0x210>
 80030b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b8:	d817      	bhi.n	80030ea <UART_SetConfig+0x216>
 80030ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030be:	d00b      	beq.n	80030d8 <UART_SetConfig+0x204>
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c4:	d811      	bhi.n	80030ea <UART_SetConfig+0x216>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <UART_SetConfig+0x1fe>
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ce:	d006      	beq.n	80030de <UART_SetConfig+0x20a>
 80030d0:	e00b      	b.n	80030ea <UART_SetConfig+0x216>
 80030d2:	2300      	movs	r3, #0
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e0a1      	b.n	800321c <UART_SetConfig+0x348>
 80030d8:	2302      	movs	r3, #2
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e09e      	b.n	800321c <UART_SetConfig+0x348>
 80030de:	2304      	movs	r3, #4
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e09b      	b.n	800321c <UART_SetConfig+0x348>
 80030e4:	2308      	movs	r3, #8
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e098      	b.n	800321c <UART_SetConfig+0x348>
 80030ea:	2310      	movs	r3, #16
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e095      	b.n	800321c <UART_SetConfig+0x348>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	@ (80031b4 <UART_SetConfig+0x2e0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d125      	bne.n	8003146 <UART_SetConfig+0x272>
 80030fa:	4b29      	ldr	r3, [pc, #164]	@ (80031a0 <UART_SetConfig+0x2cc>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003108:	d017      	beq.n	800313a <UART_SetConfig+0x266>
 800310a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800310e:	d817      	bhi.n	8003140 <UART_SetConfig+0x26c>
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003114:	d00b      	beq.n	800312e <UART_SetConfig+0x25a>
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311a:	d811      	bhi.n	8003140 <UART_SetConfig+0x26c>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <UART_SetConfig+0x254>
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003124:	d006      	beq.n	8003134 <UART_SetConfig+0x260>
 8003126:	e00b      	b.n	8003140 <UART_SetConfig+0x26c>
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e076      	b.n	800321c <UART_SetConfig+0x348>
 800312e:	2302      	movs	r3, #2
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e073      	b.n	800321c <UART_SetConfig+0x348>
 8003134:	2304      	movs	r3, #4
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e070      	b.n	800321c <UART_SetConfig+0x348>
 800313a:	2308      	movs	r3, #8
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e06d      	b.n	800321c <UART_SetConfig+0x348>
 8003140:	2310      	movs	r3, #16
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e06a      	b.n	800321c <UART_SetConfig+0x348>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <UART_SetConfig+0x2e4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d138      	bne.n	80031c2 <UART_SetConfig+0x2ee>
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800315a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800315e:	d017      	beq.n	8003190 <UART_SetConfig+0x2bc>
 8003160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003164:	d82a      	bhi.n	80031bc <UART_SetConfig+0x2e8>
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316a:	d00b      	beq.n	8003184 <UART_SetConfig+0x2b0>
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003170:	d824      	bhi.n	80031bc <UART_SetConfig+0x2e8>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <UART_SetConfig+0x2aa>
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317a:	d006      	beq.n	800318a <UART_SetConfig+0x2b6>
 800317c:	e01e      	b.n	80031bc <UART_SetConfig+0x2e8>
 800317e:	2300      	movs	r3, #0
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e04b      	b.n	800321c <UART_SetConfig+0x348>
 8003184:	2302      	movs	r3, #2
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e048      	b.n	800321c <UART_SetConfig+0x348>
 800318a:	2304      	movs	r3, #4
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e045      	b.n	800321c <UART_SetConfig+0x348>
 8003190:	2308      	movs	r3, #8
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e042      	b.n	800321c <UART_SetConfig+0x348>
 8003196:	bf00      	nop
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	40011000 	.word	0x40011000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40004800 	.word	0x40004800
 80031ac:	40004c00 	.word	0x40004c00
 80031b0:	40005000 	.word	0x40005000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	40007800 	.word	0x40007800
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e02c      	b.n	800321c <UART_SetConfig+0x348>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a72      	ldr	r2, [pc, #456]	@ (8003390 <UART_SetConfig+0x4bc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d125      	bne.n	8003218 <UART_SetConfig+0x344>
 80031cc:	4b71      	ldr	r3, [pc, #452]	@ (8003394 <UART_SetConfig+0x4c0>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031da:	d017      	beq.n	800320c <UART_SetConfig+0x338>
 80031dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031e0:	d817      	bhi.n	8003212 <UART_SetConfig+0x33e>
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e6:	d00b      	beq.n	8003200 <UART_SetConfig+0x32c>
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ec:	d811      	bhi.n	8003212 <UART_SetConfig+0x33e>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <UART_SetConfig+0x326>
 80031f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031f6:	d006      	beq.n	8003206 <UART_SetConfig+0x332>
 80031f8:	e00b      	b.n	8003212 <UART_SetConfig+0x33e>
 80031fa:	2300      	movs	r3, #0
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e00d      	b.n	800321c <UART_SetConfig+0x348>
 8003200:	2302      	movs	r3, #2
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e00a      	b.n	800321c <UART_SetConfig+0x348>
 8003206:	2304      	movs	r3, #4
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e007      	b.n	800321c <UART_SetConfig+0x348>
 800320c:	2308      	movs	r3, #8
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e004      	b.n	800321c <UART_SetConfig+0x348>
 8003212:	2310      	movs	r3, #16
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e001      	b.n	800321c <UART_SetConfig+0x348>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003224:	d15b      	bne.n	80032de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d828      	bhi.n	800327e <UART_SetConfig+0x3aa>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x360>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff f94c 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e013      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7ff f95c 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b4b      	ldr	r3, [pc, #300]	@ (8003398 <UART_SetConfig+0x4c4>)
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e00c      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7ff f86f 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8003272:	61b8      	str	r0, [r7, #24]
        break;
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e004      	b.n	8003288 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77bb      	strb	r3, [r7, #30]
        break;
 8003286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d074      	beq.n	8003378 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	005a      	lsls	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d916      	bls.n	80032d8 <UART_SetConfig+0x404>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d212      	bcs.n	80032d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f023 030f 	bic.w	r3, r3, #15
 80032ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	89fa      	ldrh	r2, [r7, #14]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e04f      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77bb      	strb	r3, [r7, #30]
 80032dc:	e04c      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d828      	bhi.n	8003336 <UART_SetConfig+0x462>
 80032e4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <UART_SetConfig+0x418>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003319 	.word	0x08003319
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003337 	.word	0x08003337
 8003304:	08003337 	.word	0x08003337
 8003308:	08003337 	.word	0x08003337
 800330c:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff f8f0 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 8003314:	61b8      	str	r0, [r7, #24]
        break;
 8003316:	e013      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7ff f900 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 800331c:	61b8      	str	r0, [r7, #24]
        break;
 800331e:	e00f      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <UART_SetConfig+0x4c4>)
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e00c      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7ff f813 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800332a:	61b8      	str	r0, [r7, #24]
        break;
 800332c:	e008      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	61bb      	str	r3, [r7, #24]
        break;
 8003334:	e004      	b.n	8003340 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	77bb      	strb	r3, [r7, #30]
        break;
 800333e:	bf00      	nop
    }

    if (pclk != 0U)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d018      	beq.n	8003378 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	085a      	lsrs	r2, r3, #1
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d909      	bls.n	8003374 <UART_SetConfig+0x4a0>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d205      	bcs.n	8003374 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	e001      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003384:	7fbb      	ldrb	r3, [r7, #30]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40007c00 	.word	0x40007c00
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400

0800339c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800349a:	d10a      	bne.n	80034b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	@ 0x30
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f0:	f7fe f87c 	bl	80015ec <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d12e      	bne.n	8003562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f83b 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	60fb      	str	r3, [r7, #12]
   return(result);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e6      	bne.n	800351e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e011      	b.n	8003586 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	e04f      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a6:	d04b      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fe f820 	bl	80015ec <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <UART_WaitOnFlagUntilTimeout+0x30>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04e      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d037      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d034      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d031      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d110      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f838 	bl	8003668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2208      	movs	r2, #8
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e029      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800361a:	d111      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f81e 	bl	8003668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e00f      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d0a0      	beq.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b095      	sub	sp, #84	@ 0x54
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e6      	bne.n	8003670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3308      	adds	r3, #8
 80036a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3308      	adds	r3, #8
 80036c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e5      	bne.n	80036a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d118      	bne.n	8003710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	613b      	str	r3, [r7, #16]
   return(result);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003724:	bf00      	nop
 8003726:	3754      	adds	r7, #84	@ 0x54
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800373e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003742:	2b84      	cmp	r3, #132	@ 0x84
 8003744:	d005      	beq.n	8003752 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	3303      	adds	r3, #3
 8003750:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003764:	f000 fee2 	bl	800452c <vTaskStartScheduler>
  
  return osOK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	bd80      	pop	{r7, pc}

0800376e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800376e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003770:	b089      	sub	sp, #36	@ 0x24
 8003772:	af04      	add	r7, sp, #16
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <osThreadCreate+0x54>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685c      	ldr	r4, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691e      	ldr	r6, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffc8 	bl	8003730 <makeFreeRtosPriority>
 80037a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	9100      	str	r1, [sp, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4632      	mov	r2, r6
 80037b4:	4629      	mov	r1, r5
 80037b6:	4620      	mov	r0, r4
 80037b8:	f000 fce0 	bl	800417c <xTaskCreateStatic>
 80037bc:	4603      	mov	r3, r0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e01c      	b.n	80037fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685c      	ldr	r4, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ffaa 	bl	8003730 <makeFreeRtosPriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9200      	str	r2, [sp, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	4632      	mov	r2, r6
 80037ea:	4629      	mov	r1, r5
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 fd2b 	bl	8004248 <xTaskCreate>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003806 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <osDelay+0x16>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	e000      	b.n	800381e <osDelay+0x18>
 800381c:	2301      	movs	r3, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe4c 	bl	80044bc <vTaskDelay>
  
  return osOK;
 8003824:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f103 0208 	add.w	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003846:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0208 	add.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f103 0208 	add.w	r2, r3, #8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e6:	d103      	bne.n	80038f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e00c      	b.n	800390a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3308      	adds	r3, #8
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e002      	b.n	80038fe <vListInsert+0x2e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d2f6      	bcs.n	80038f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6852      	ldr	r2, [r2, #4]
 8003962:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d103      	bne.n	8003976 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	b672      	cpsid	i
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	b662      	cpsie	i
 80039c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80039c8:	f001 fd20 	bl	800540c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	441a      	add	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	3b01      	subs	r3, #1
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	22ff      	movs	r2, #255	@ 0xff
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d114      	bne.n	8003a48 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01a      	beq.n	8003a5c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3310      	adds	r3, #16
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 ffd4 	bl	80049d8 <xTaskRemoveFromEventList>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <xQueueGenericReset+0xd4>)
 8003a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	e009      	b.n	8003a5c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff feee 	bl	800382e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3324      	adds	r3, #36	@ 0x24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fee9 	bl	800382e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a5c:	f001 fd0c 	bl	8005478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a60:	2301      	movs	r3, #1
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	@ 0x28
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <xQueueGenericCreate+0x30>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	b672      	cpsid	i
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	b662      	cpsie	i
 8003a98:	613b      	str	r3, [r7, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e004      	b.n	8003ab6 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3348      	adds	r3, #72	@ 0x48
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fd8e 	bl	80055dc <pvPortMalloc>
 8003ac0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d011      	beq.n	8003aec <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3348      	adds	r3, #72	@ 0x48
 8003ad0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ada:	79fa      	ldrb	r2, [r7, #7]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f805 	bl	8003af6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aec:	69bb      	ldr	r3, [r7, #24]
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e002      	b.n	8003b18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b24:	2101      	movs	r1, #1
 8003b26:	69b8      	ldr	r0, [r7, #24]
 8003b28:	f7ff ff36 	bl	8003998 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08e      	sub	sp, #56	@ 0x38
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b42:	2300      	movs	r3, #0
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <xQueueGenericSend+0x38>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	b672      	cpsid	i
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	b662      	cpsie	i
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x46>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <xQueueGenericSend+0x4a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xQueueGenericSend+0x4c>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <xQueueGenericSend+0x6c>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	b672      	cpsid	i
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	b662      	cpsie	i
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d103      	bne.n	8003bae <xQueueGenericSend+0x7a>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <xQueueGenericSend+0x7e>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <xQueueGenericSend+0x80>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <xQueueGenericSend+0xa0>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	b672      	cpsid	i
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	b662      	cpsie	i
 8003bcc:	623b      	str	r3, [r7, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bd4:	f001 f8c8 	bl	8004d68 <xTaskGetSchedulerState>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <xQueueGenericSend+0xb0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <xQueueGenericSend+0xb4>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <xQueueGenericSend+0xb6>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <xQueueGenericSend+0xd6>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf2:	b672      	cpsid	i
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	b662      	cpsie	i
 8003c02:	61fb      	str	r3, [r7, #28]
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c0a:	f001 fbff 	bl	800540c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <xQueueGenericSend+0xec>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d129      	bne.n	8003c74 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c26:	f000 f9bf 	bl	8003fa8 <prvCopyDataToQueue>
 8003c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	3324      	adds	r3, #36	@ 0x24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fecd 	bl	80049d8 <xTaskRemoveFromEventList>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c44:	4b3f      	ldr	r3, [pc, #252]	@ (8003d44 <xQueueGenericSend+0x210>)
 8003c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	e00a      	b.n	8003c6c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c5c:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <xQueueGenericSend+0x210>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c6c:	f001 fc04 	bl	8005478 <vPortExitCritical>
				return pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e063      	b.n	8003d3c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c7a:	f001 fbfd 	bl	8005478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e05c      	b.n	8003d3c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 ff09 	bl	8004aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c96:	f001 fbef 	bl	8005478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c9a:	f000 fcad 	bl	80045f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c9e:	f001 fbb5 	bl	800540c <vPortEnterCritical>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cae:	d103      	bne.n	8003cb8 <xQueueGenericSend+0x184>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSend+0x19a>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cce:	f001 fbd3 	bl	8005478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cd2:	1d3a      	adds	r2, r7, #4
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fef8 	bl	8004ad0 <xTaskCheckForTimeOut>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d124      	bne.n	8003d30 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ce8:	f000 fa30 	bl	800414c <prvIsQueueFull>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d018      	beq.n	8003d24 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe44 	bl	8004988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d02:	f000 f9bb 	bl	800407c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d06:	f000 fc85 	bl	8004614 <xTaskResumeAll>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af7c 	bne.w	8003c0a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <xQueueGenericSend+0x210>)
 8003d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	e772      	b.n	8003c0a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d26:	f000 f9a9 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d2a:	f000 fc73 	bl	8004614 <xTaskResumeAll>
 8003d2e:	e76c      	b.n	8003c0a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d32:	f000 f9a3 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d36:	f000 fc6d 	bl	8004614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3738      	adds	r7, #56	@ 0x38
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	@ 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	b672      	cpsid	i
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	b662      	cpsie	i
 8003d78:	623b      	str	r3, [r7, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8c:	b672      	cpsid	i
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	b662      	cpsie	i
 8003d9c:	61fb      	str	r3, [r7, #28]
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da4:	f000 ffe0 	bl	8004d68 <xTaskGetSchedulerState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <xQueueSemaphoreTake+0x6c>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <xQueueSemaphoreTake+0x70>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <xQueueSemaphoreTake+0x72>
 8003db8:	2300      	movs	r3, #0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <xQueueSemaphoreTake+0x92>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	b672      	cpsid	i
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	b662      	cpsie	i
 8003dd2:	61bb      	str	r3, [r7, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dda:	f001 fb17 	bl	800540c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d024      	beq.n	8003e34 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dfa:	f001 f97f 	bl	80050fc <pvTaskIncrementMutexHeldCount>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fde1 	bl	80049d8 <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <xQueueSemaphoreTake+0x22c>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e2c:	f001 fb24 	bl	8005478 <vPortExitCritical>
				return pdPASS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09a      	b.n	8003f6a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d114      	bne.n	8003e64 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	b672      	cpsid	i
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	b662      	cpsie	i
 8003e54:	617b      	str	r3, [r7, #20]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e5c:	f001 fb0c 	bl	8005478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e082      	b.n	8003f6a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fe18 	bl	8004aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e78:	f001 fafe 	bl	8005478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e7c:	f000 fbbc 	bl	80045f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e80:	f001 fac4 	bl	800540c <vPortEnterCritical>
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e90:	d103      	bne.n	8003e9a <xQueueSemaphoreTake+0x152>
 8003e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ea6:	d103      	bne.n	8003eb0 <xQueueSemaphoreTake+0x168>
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eb0:	f001 fae2 	bl	8005478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eb4:	463a      	mov	r2, r7
 8003eb6:	f107 030c 	add.w	r3, r7, #12
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fe07 	bl	8004ad0 <xTaskCheckForTimeOut>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d132      	bne.n	8003f2e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eca:	f000 f929 	bl	8004120 <prvIsQueueEmpty>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d026      	beq.n	8003f22 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8003edc:	f001 fa96 	bl	800540c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ff5d 	bl	8004da4 <xTaskPriorityInherit>
 8003eea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003eec:	f001 fac4 	bl	8005478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	3324      	adds	r3, #36	@ 0x24
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fd45 	bl	8004988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003efe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f00:	f000 f8bc 	bl	800407c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f04:	f000 fb86 	bl	8004614 <xTaskResumeAll>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f47f af65 	bne.w	8003dda <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8003f10:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <xQueueSemaphoreTake+0x22c>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	e75b      	b.n	8003dda <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f24:	f000 f8aa 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f28:	f000 fb74 	bl	8004614 <xTaskResumeAll>
 8003f2c:	e755      	b.n	8003dda <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f30:	f000 f8a4 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f34:	f000 fb6e 	bl	8004614 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f3a:	f000 f8f1 	bl	8004120 <prvIsQueueEmpty>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f43f af4a 	beq.w	8003dda <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8003f4c:	f001 fa5e 	bl	800540c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f52:	f000 f811 	bl	8003f78 <prvGetDisinheritPriorityAfterTimeout>
 8003f56:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f82c 	bl	8004fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f64:	f001 fa88 	bl	8005478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3738      	adds	r7, #56	@ 0x38
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e001      	b.n	8003f9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d14d      	bne.n	800406a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 ff66 	bl	8004ea4 <xTaskPriorityDisinherit>
 8003fd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e043      	b.n	800406a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d119      	bne.n	800401c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6858      	ldr	r0, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	f001 fe6f 	bl	8005cd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	441a      	add	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d32b      	bcc.n	800406a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e026      	b.n	800406a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	f001 fe55 	bl	8005cd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	425b      	negs	r3, r3
 8004036:	441a      	add	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d207      	bcs.n	8004058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	425b      	negs	r3, r3
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d105      	bne.n	800406a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3b01      	subs	r3, #1
 8004068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004084:	f001 f9c2 	bl	800540c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004090:	e011      	b.n	80040b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	@ 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fc9a 	bl	80049d8 <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040aa:	f000 fd79 	bl	8004ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dce9      	bgt.n	8004092 <prvUnlockQueue+0x16>
 80040be:	e000      	b.n	80040c2 <prvUnlockQueue+0x46>
					break;
 80040c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	22ff      	movs	r2, #255	@ 0xff
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040ca:	f001 f9d5 	bl	8005478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ce:	f001 f99d 	bl	800540c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040da:	e011      	b.n	8004100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3310      	adds	r3, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fc75 	bl	80049d8 <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f4:	f000 fd54 	bl	8004ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dce9      	bgt.n	80040dc <prvUnlockQueue+0x60>
 8004108:	e000      	b.n	800410c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800410a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004114:	f001 f9b0 	bl	8005478 <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004128:	f001 f970 	bl	800540c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 f99b 	bl	8005478 <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004154:	f001 f95a 	bl	800540c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	429a      	cmp	r2, r3
 8004162:	d102      	bne.n	800416a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f001 f983 	bl	8005478 <vPortExitCritical>

	return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	@ 0x38
 8004180:	af04      	add	r7, sp, #16
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10d      	bne.n	80041ac <xTaskCreateStatic+0x30>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	b672      	cpsid	i
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	b662      	cpsie	i
 80041a4:	623b      	str	r3, [r7, #32]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <xTaskCreateStatic+0x52>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	b672      	cpsid	i
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	b662      	cpsie	i
 80041c6:	61fb      	str	r3, [r7, #28]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ce:	2354      	movs	r3, #84	@ 0x54
 80041d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b54      	cmp	r3, #84	@ 0x54
 80041d6:	d00d      	beq.n	80041f4 <xTaskCreateStatic+0x78>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	b672      	cpsid	i
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	b662      	cpsie	i
 80041ec:	61bb      	str	r3, [r7, #24]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01e      	beq.n	800423a <xTaskCreateStatic+0xbe>
 80041fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01b      	beq.n	800423a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004214:	2300      	movs	r3, #0
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	9302      	str	r3, [sp, #8]
 800421c:	f107 0314 	add.w	r3, r7, #20
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f850 	bl	80042d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004234:	f000 f8d8 	bl	80043e8 <prvAddNewTaskToReadyList>
 8004238:	e001      	b.n	800423e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800423e:	697b      	ldr	r3, [r7, #20]
	}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	@ 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	@ 0x30
 800424c:	af04      	add	r7, sp, #16
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f9bd 	bl	80055dc <pvPortMalloc>
 8004262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800426a:	2054      	movs	r0, #84	@ 0x54
 800426c:	f001 f9b6 	bl	80055dc <pvPortMalloc>
 8004270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
 800427e:	e005      	b.n	800428c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	f001 fa79 	bl	8005778 <vPortFree>
 8004286:	e001      	b.n	800428c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d017      	beq.n	80042c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	2300      	movs	r3, #0
 800429e:	9303      	str	r3, [sp, #12]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	9302      	str	r3, [sp, #8]
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f80e 	bl	80042d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b6:	69f8      	ldr	r0, [r7, #28]
 80042b8:	f000 f896 	bl	80043e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	e002      	b.n	80042c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042c8:	69bb      	ldr	r3, [r7, #24]
	}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80042ea:	440b      	add	r3, r1
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f023 0307 	bic.w	r3, r3, #7
 80042f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	b672      	cpsid	i
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	b662      	cpsie	i
 8004318:	617b      	str	r3, [r7, #20]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01f      	beq.n	8004366 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e012      	b.n	8004352 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	7819      	ldrb	r1, [r3, #0]
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	3334      	adds	r3, #52	@ 0x34
 800433c:	460a      	mov	r2, r1
 800433e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	3301      	adds	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d9e9      	bls.n	800432c <prvInitialiseNewTask+0x5a>
 8004358:	e000      	b.n	800435c <prvInitialiseNewTask+0x8a>
			{
				break;
 800435a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004364:	e003      	b.n	800436e <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	2b06      	cmp	r3, #6
 8004372:	d901      	bls.n	8004378 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004374:	2306      	movs	r3, #6
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800437c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004382:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	2200      	movs	r2, #0
 8004388:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fa6d 	bl	800386e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	3318      	adds	r3, #24
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fa68 	bl	800386e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	f1c3 0207 	rsb	r2, r3, #7
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	2200      	movs	r2, #0
 80043b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	69b8      	ldr	r0, [r7, #24]
 80043c8:	f000 ff12 	bl	80051f0 <pxPortInitialiseStack>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043de:	bf00      	nop
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043f0:	f001 f80c 	bl	800540c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043f4:	4b2a      	ldr	r3, [pc, #168]	@ (80044a0 <prvAddNewTaskToReadyList+0xb8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a29      	ldr	r2, [pc, #164]	@ (80044a0 <prvAddNewTaskToReadyList+0xb8>)
 80043fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043fe:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <prvAddNewTaskToReadyList+0xbc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004406:	4a27      	ldr	r2, [pc, #156]	@ (80044a4 <prvAddNewTaskToReadyList+0xbc>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800440c:	4b24      	ldr	r3, [pc, #144]	@ (80044a0 <prvAddNewTaskToReadyList+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d110      	bne.n	8004436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004414:	f000 fbe8 	bl	8004be8 <prvInitialiseTaskLists>
 8004418:	e00d      	b.n	8004436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800441a:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <prvAddNewTaskToReadyList+0xc0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004422:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <prvAddNewTaskToReadyList+0xbc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004430:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <prvAddNewTaskToReadyList+0xbc>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <prvAddNewTaskToReadyList+0xc4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	4a1b      	ldr	r2, [pc, #108]	@ (80044ac <prvAddNewTaskToReadyList+0xc4>)
 800443e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <prvAddNewTaskToReadyList+0xc8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <prvAddNewTaskToReadyList+0xc8>)
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <prvAddNewTaskToReadyList+0xcc>)
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7ff fa0d 	bl	8003888 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800446e:	f001 f803 	bl	8005478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <prvAddNewTaskToReadyList+0xc0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00e      	beq.n	8004498 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <prvAddNewTaskToReadyList+0xbc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d207      	bcs.n	8004498 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <prvAddNewTaskToReadyList+0xd0>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000478 	.word	0x20000478
 80044a4:	20000378 	.word	0x20000378
 80044a8:	20000484 	.word	0x20000484
 80044ac:	20000494 	.word	0x20000494
 80044b0:	20000480 	.word	0x20000480
 80044b4:	2000037c 	.word	0x2000037c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01a      	beq.n	8004504 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ce:	4b15      	ldr	r3, [pc, #84]	@ (8004524 <vTaskDelay+0x68>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <vTaskDelay+0x36>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	b672      	cpsid	i
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	b662      	cpsie	i
 80044ea:	60bb      	str	r3, [r7, #8]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80044f2:	f000 f881 	bl	80045f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fe13 	bl	8005124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044fe:	f000 f889 	bl	8004614 <xTaskResumeAll>
 8004502:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800450a:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <vTaskDelay+0x6c>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200004a0 	.word	0x200004a0
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800453a:	463a      	mov	r2, r7
 800453c:	1d39      	adds	r1, r7, #4
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f84a 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	9202      	str	r2, [sp, #8]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	2300      	movs	r3, #0
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2300      	movs	r3, #0
 8004558:	460a      	mov	r2, r1
 800455a:	4921      	ldr	r1, [pc, #132]	@ (80045e0 <vTaskStartScheduler+0xb4>)
 800455c:	4821      	ldr	r0, [pc, #132]	@ (80045e4 <vTaskStartScheduler+0xb8>)
 800455e:	f7ff fe0d 	bl	800417c <xTaskCreateStatic>
 8004562:	4603      	mov	r3, r0
 8004564:	4a20      	ldr	r2, [pc, #128]	@ (80045e8 <vTaskStartScheduler+0xbc>)
 8004566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004568:	4b1f      	ldr	r3, [pc, #124]	@ (80045e8 <vTaskStartScheduler+0xbc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e001      	b.n	800457a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <vTaskStartScheduler+0x86>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	b672      	cpsid	i
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	b662      	cpsie	i
 8004594:	613b      	str	r3, [r7, #16]
}
 8004596:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004598:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <vTaskStartScheduler+0xc0>)
 800459a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800459e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045a0:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <vTaskStartScheduler+0xc4>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <vTaskStartScheduler+0xc8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045ac:	f000 feb0 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045b0:	e011      	b.n	80045d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045b8:	d10d      	bne.n	80045d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	b672      	cpsid	i
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	b662      	cpsie	i
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vTaskStartScheduler+0xa6>
}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	080068a4 	.word	0x080068a4
 80045e4:	08004bb9 	.word	0x08004bb9
 80045e8:	2000049c 	.word	0x2000049c
 80045ec:	20000498 	.word	0x20000498
 80045f0:	20000484 	.word	0x20000484
 80045f4:	2000047c 	.word	0x2000047c

080045f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045fc:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <vTaskSuspendAll+0x18>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	4a03      	ldr	r2, [pc, #12]	@ (8004610 <vTaskSuspendAll+0x18>)
 8004604:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	200004a0 	.word	0x200004a0

08004614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004622:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <xTaskResumeAll+0x11c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <xTaskResumeAll+0x32>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462e:	b672      	cpsid	i
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	b662      	cpsie	i
 800463e:	603b      	str	r3, [r7, #0]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004646:	f000 fee1 	bl	800540c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800464a:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <xTaskResumeAll+0x11c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	4a37      	ldr	r2, [pc, #220]	@ (8004730 <xTaskResumeAll+0x11c>)
 8004652:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004654:	4b36      	ldr	r3, [pc, #216]	@ (8004730 <xTaskResumeAll+0x11c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d161      	bne.n	8004720 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800465c:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <xTaskResumeAll+0x120>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05d      	beq.n	8004720 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004664:	e02e      	b.n	80046c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <xTaskResumeAll+0x124>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f965 	bl	8003942 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff f960 	bl	8003942 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	2201      	movs	r2, #1
 8004688:	409a      	lsls	r2, r3
 800468a:	4b2c      	ldr	r3, [pc, #176]	@ (800473c <xTaskResumeAll+0x128>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	4a2a      	ldr	r2, [pc, #168]	@ (800473c <xTaskResumeAll+0x128>)
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4a27      	ldr	r2, [pc, #156]	@ (8004740 <xTaskResumeAll+0x12c>)
 80046a2:	441a      	add	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7ff f8ec 	bl	8003888 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <xTaskResumeAll+0x130>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80046be:	4b22      	ldr	r3, [pc, #136]	@ (8004748 <xTaskResumeAll+0x134>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004738 <xTaskResumeAll+0x124>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1cc      	bne.n	8004666 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046d2:	f000 fb29 	bl	8004d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046d6:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <xTaskResumeAll+0x138>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046e2:	f000 f837 	bl	8004754 <xTaskIncrementTick>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80046ec:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <xTaskResumeAll+0x134>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f1      	bne.n	80046e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80046fe:	4b13      	ldr	r3, [pc, #76]	@ (800474c <xTaskResumeAll+0x138>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004704:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <xTaskResumeAll+0x134>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004710:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <xTaskResumeAll+0x13c>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004720:	f000 feaa 	bl	8005478 <vPortExitCritical>

	return xAlreadyYielded;
 8004724:	68bb      	ldr	r3, [r7, #8]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	200004a0 	.word	0x200004a0
 8004734:	20000478 	.word	0x20000478
 8004738:	20000438 	.word	0x20000438
 800473c:	20000480 	.word	0x20000480
 8004740:	2000037c 	.word	0x2000037c
 8004744:	20000378 	.word	0x20000378
 8004748:	2000048c 	.word	0x2000048c
 800474c:	20000488 	.word	0x20000488
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475e:	4b50      	ldr	r3, [pc, #320]	@ (80048a0 <xTaskIncrementTick+0x14c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 808b 	bne.w	800487e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004768:	4b4e      	ldr	r3, [pc, #312]	@ (80048a4 <xTaskIncrementTick+0x150>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004770:	4a4c      	ldr	r2, [pc, #304]	@ (80048a4 <xTaskIncrementTick+0x150>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d123      	bne.n	80047c4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800477c:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <xTaskIncrementTick+0x154>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	b672      	cpsid	i
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	b662      	cpsie	i
 800479a:	603b      	str	r3, [r7, #0]
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	e7fd      	b.n	800479e <xTaskIncrementTick+0x4a>
 80047a2:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <xTaskIncrementTick+0x154>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <xTaskIncrementTick+0x158>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	@ (80048a8 <xTaskIncrementTick+0x154>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4a3e      	ldr	r2, [pc, #248]	@ (80048ac <xTaskIncrementTick+0x158>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b3e      	ldr	r3, [pc, #248]	@ (80048b0 <xTaskIncrementTick+0x15c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	4a3c      	ldr	r2, [pc, #240]	@ (80048b0 <xTaskIncrementTick+0x15c>)
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	f000 fab2 	bl	8004d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c4:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <xTaskIncrementTick+0x160>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d348      	bcc.n	8004860 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ce:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <xTaskIncrementTick+0x154>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d8:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <xTaskIncrementTick+0x160>)
 80047da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047de:	601a      	str	r2, [r3, #0]
					break;
 80047e0:	e03e      	b.n	8004860 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e2:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <xTaskIncrementTick+0x154>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d203      	bcs.n	8004802 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047fa:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <xTaskIncrementTick+0x160>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004800:	e02e      	b.n	8004860 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff f89b 	bl	8003942 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	3318      	adds	r3, #24
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff f892 	bl	8003942 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	2201      	movs	r2, #1
 8004824:	409a      	lsls	r2, r3
 8004826:	4b24      	ldr	r3, [pc, #144]	@ (80048b8 <xTaskIncrementTick+0x164>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	4a22      	ldr	r2, [pc, #136]	@ (80048b8 <xTaskIncrementTick+0x164>)
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <xTaskIncrementTick+0x168>)
 800483e:	441a      	add	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7ff f81e 	bl	8003888 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004850:	4b1b      	ldr	r3, [pc, #108]	@ (80048c0 <xTaskIncrementTick+0x16c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	429a      	cmp	r2, r3
 8004858:	d3b9      	bcc.n	80047ce <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485e:	e7b6      	b.n	80047ce <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004860:	4b17      	ldr	r3, [pc, #92]	@ (80048c0 <xTaskIncrementTick+0x16c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004866:	4915      	ldr	r1, [pc, #84]	@ (80048bc <xTaskIncrementTick+0x168>)
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d907      	bls.n	8004888 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e004      	b.n	8004888 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800487e:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <xTaskIncrementTick+0x170>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a0f      	ldr	r2, [pc, #60]	@ (80048c4 <xTaskIncrementTick+0x170>)
 8004886:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004888:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <xTaskIncrementTick+0x174>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004894:	697b      	ldr	r3, [r7, #20]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200004a0 	.word	0x200004a0
 80048a4:	2000047c 	.word	0x2000047c
 80048a8:	20000430 	.word	0x20000430
 80048ac:	20000434 	.word	0x20000434
 80048b0:	20000490 	.word	0x20000490
 80048b4:	20000498 	.word	0x20000498
 80048b8:	20000480 	.word	0x20000480
 80048bc:	2000037c 	.word	0x2000037c
 80048c0:	20000378 	.word	0x20000378
 80048c4:	20000488 	.word	0x20000488
 80048c8:	2000048c 	.word	0x2000048c

080048cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048d2:	4b28      	ldr	r3, [pc, #160]	@ (8004974 <vTaskSwitchContext+0xa8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048da:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <vTaskSwitchContext+0xac>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048e0:	e042      	b.n	8004968 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80048e2:	4b25      	ldr	r3, [pc, #148]	@ (8004978 <vTaskSwitchContext+0xac>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e8:	4b24      	ldr	r3, [pc, #144]	@ (800497c <vTaskSwitchContext+0xb0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	f1c3 031f 	rsb	r3, r3, #31
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	4920      	ldr	r1, [pc, #128]	@ (8004980 <vTaskSwitchContext+0xb4>)
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <vTaskSwitchContext+0x62>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	b672      	cpsid	i
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	b662      	cpsie	i
 8004926:	607b      	str	r3, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <vTaskSwitchContext+0x5e>
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a11      	ldr	r2, [pc, #68]	@ (8004980 <vTaskSwitchContext+0xb4>)
 800493a:	4413      	add	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	605a      	str	r2, [r3, #4]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3308      	adds	r3, #8
 8004950:	429a      	cmp	r2, r3
 8004952:	d104      	bne.n	800495e <vTaskSwitchContext+0x92>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <vTaskSwitchContext+0xb8>)
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	200004a0 	.word	0x200004a0
 8004978:	2000048c 	.word	0x2000048c
 800497c:	20000480 	.word	0x20000480
 8004980:	2000037c 	.word	0x2000037c
 8004984:	20000378 	.word	0x20000378

08004988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10d      	bne.n	80049b4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	b672      	cpsid	i
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	b662      	cpsie	i
 80049ac:	60fb      	str	r3, [r7, #12]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b4:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <vTaskPlaceOnEventList+0x4c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3318      	adds	r3, #24
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fe ff87 	bl	80038d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049c2:	2101      	movs	r1, #1
 80049c4:	6838      	ldr	r0, [r7, #0]
 80049c6:	f000 fbad 	bl	8005124 <prvAddCurrentTaskToDelayedList>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000378 	.word	0x20000378

080049d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	b672      	cpsid	i
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	b662      	cpsie	i
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3318      	adds	r3, #24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe ff97 	bl	8003942 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a14:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <xTaskRemoveFromEventList+0xb4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11c      	bne.n	8004a56 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ff8e 	bl	8003942 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <xTaskRemoveFromEventList+0xb8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <xTaskRemoveFromEventList+0xb8>)
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a13      	ldr	r2, [pc, #76]	@ (8004a94 <xTaskRemoveFromEventList+0xbc>)
 8004a46:	441a      	add	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f7fe ff1a 	bl	8003888 <vListInsertEnd>
 8004a54:	e005      	b.n	8004a62 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	480e      	ldr	r0, [pc, #56]	@ (8004a98 <xTaskRemoveFromEventList+0xc0>)
 8004a5e:	f7fe ff13 	bl	8003888 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <xTaskRemoveFromEventList+0xc4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d905      	bls.n	8004a7c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <xTaskRemoveFromEventList+0xc8>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e001      	b.n	8004a80 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200004a0 	.word	0x200004a0
 8004a90:	20000480 	.word	0x20000480
 8004a94:	2000037c 	.word	0x2000037c
 8004a98:	20000438 	.word	0x20000438
 8004a9c:	20000378 	.word	0x20000378
 8004aa0:	2000048c 	.word	0x2000048c

08004aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <vTaskInternalSetTimeOutState+0x24>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <vTaskInternalSetTimeOutState+0x28>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	605a      	str	r2, [r3, #4]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000490 	.word	0x20000490
 8004acc:	2000047c 	.word	0x2000047c

08004ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10d      	bne.n	8004afc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	b672      	cpsid	i
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	b662      	cpsie	i
 8004af4:	613b      	str	r3, [r7, #16]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	b672      	cpsid	i
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	b662      	cpsie	i
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004b1e:	f000 fc75 	bl	800540c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b22:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <xTaskCheckForTimeOut+0xc8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b3a:	d102      	bne.n	8004b42 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e023      	b.n	8004b8a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <xTaskCheckForTimeOut+0xcc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d007      	beq.n	8004b5e <xTaskCheckForTimeOut+0x8e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d302      	bcc.n	8004b5e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e015      	b.n	8004b8a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d20b      	bcs.n	8004b80 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff95 	bl	8004aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	e004      	b.n	8004b8a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b8a:	f000 fc75 	bl	8005478 <vPortExitCritical>

	return xReturn;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	2000047c 	.word	0x2000047c
 8004b9c:	20000490 	.word	0x20000490

08004ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <vTaskMissedYield+0x14>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2000048c 	.word	0x2000048c

08004bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bc0:	f000 f852 	bl	8004c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <prvIdleTask+0x28>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d9f9      	bls.n	8004bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <prvIdleTask+0x2c>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bdc:	e7f0      	b.n	8004bc0 <prvIdleTask+0x8>
 8004bde:	bf00      	nop
 8004be0:	2000037c 	.word	0x2000037c
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	e00c      	b.n	8004c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4a12      	ldr	r2, [pc, #72]	@ (8004c48 <prvInitialiseTaskLists+0x60>)
 8004c00:	4413      	add	r3, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fe13 	bl	800382e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b06      	cmp	r3, #6
 8004c12:	d9ef      	bls.n	8004bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c14:	480d      	ldr	r0, [pc, #52]	@ (8004c4c <prvInitialiseTaskLists+0x64>)
 8004c16:	f7fe fe0a 	bl	800382e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c1a:	480d      	ldr	r0, [pc, #52]	@ (8004c50 <prvInitialiseTaskLists+0x68>)
 8004c1c:	f7fe fe07 	bl	800382e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c20:	480c      	ldr	r0, [pc, #48]	@ (8004c54 <prvInitialiseTaskLists+0x6c>)
 8004c22:	f7fe fe04 	bl	800382e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c26:	480c      	ldr	r0, [pc, #48]	@ (8004c58 <prvInitialiseTaskLists+0x70>)
 8004c28:	f7fe fe01 	bl	800382e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c2c:	480b      	ldr	r0, [pc, #44]	@ (8004c5c <prvInitialiseTaskLists+0x74>)
 8004c2e:	f7fe fdfe 	bl	800382e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <prvInitialiseTaskLists+0x78>)
 8004c34:	4a05      	ldr	r2, [pc, #20]	@ (8004c4c <prvInitialiseTaskLists+0x64>)
 8004c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <prvInitialiseTaskLists+0x7c>)
 8004c3a:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <prvInitialiseTaskLists+0x68>)
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	2000037c 	.word	0x2000037c
 8004c4c:	20000408 	.word	0x20000408
 8004c50:	2000041c 	.word	0x2000041c
 8004c54:	20000438 	.word	0x20000438
 8004c58:	2000044c 	.word	0x2000044c
 8004c5c:	20000464 	.word	0x20000464
 8004c60:	20000430 	.word	0x20000430
 8004c64:	20000434 	.word	0x20000434

08004c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c6e:	e019      	b.n	8004ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c70:	f000 fbcc 	bl	800540c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c74:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <prvCheckTasksWaitingTermination+0x50>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe fe5e 	bl	8003942 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <prvCheckTasksWaitingTermination+0x54>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004cbc <prvCheckTasksWaitingTermination+0x54>)
 8004c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c9a:	f000 fbed 	bl	8005478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f810 	bl	8004cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e1      	bne.n	8004c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000044c 	.word	0x2000044c
 8004cbc:	20000478 	.word	0x20000478
 8004cc0:	20000460 	.word	0x20000460

08004cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d108      	bne.n	8004ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fd4c 	bl	8005778 <vPortFree>
				vPortFree( pxTCB );
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fd49 	bl	8005778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ce6:	e01b      	b.n	8004d20 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d103      	bne.n	8004cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fd40 	bl	8005778 <vPortFree>
	}
 8004cf8:	e012      	b.n	8004d20 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d00d      	beq.n	8004d20 <prvDeleteTCB+0x5c>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	b672      	cpsid	i
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	b662      	cpsie	i
 8004d18:	60fb      	str	r3, [r7, #12]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <prvDeleteTCB+0x58>
	}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <prvResetNextTaskUnblockTime+0x3c>)
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d40:	e008      	b.n	8004d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <prvResetNextTaskUnblockTime+0x3c>)
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000430 	.word	0x20000430
 8004d64:	20000498 	.word	0x20000498

08004d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <xTaskGetSchedulerState+0x34>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d76:	2301      	movs	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	e008      	b.n	8004d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d7c:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <xTaskGetSchedulerState+0x38>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d84:	2302      	movs	r3, #2
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e001      	b.n	8004d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d8e:	687b      	ldr	r3, [r7, #4]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20000484 	.word	0x20000484
 8004da0:	200004a0 	.word	0x200004a0

08004da4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d069      	beq.n	8004e8e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dbe:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <xTaskPriorityInherit+0xf4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d259      	bcs.n	8004e7c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db06      	blt.n	8004dde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd0:	4b31      	ldr	r3, [pc, #196]	@ (8004e98 <xTaskPriorityInherit+0xf4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	f1c3 0207 	rsb	r2, r3, #7
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6959      	ldr	r1, [r3, #20]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <xTaskPriorityInherit+0xf8>)
 8004df0:	4413      	add	r3, r2
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d13a      	bne.n	8004e6c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fda1 	bl	8003942 <uxListRemove>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d115      	bne.n	8004e32 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0a:	4924      	ldr	r1, [pc, #144]	@ (8004e9c <xTaskPriorityInherit+0xf8>)
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xTaskPriorityInherit+0x8e>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43da      	mvns	r2, r3
 8004e28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea0 <xTaskPriorityInherit+0xfc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea0 <xTaskPriorityInherit+0xfc>)
 8004e30:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e32:	4b19      	ldr	r3, [pc, #100]	@ (8004e98 <xTaskPriorityInherit+0xf4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	2201      	movs	r2, #1
 8004e42:	409a      	lsls	r2, r3
 8004e44:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <xTaskPriorityInherit+0xfc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <xTaskPriorityInherit+0xfc>)
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <xTaskPriorityInherit+0xf8>)
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7fe fd0f 	bl	8003888 <vListInsertEnd>
 8004e6a:	e004      	b.n	8004e76 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <xTaskPriorityInherit+0xf4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e008      	b.n	8004e8e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <xTaskPriorityInherit+0xf4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d201      	bcs.n	8004e8e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000378 	.word	0x20000378
 8004e9c:	2000037c 	.word	0x2000037c
 8004ea0:	20000480 	.word	0x20000480

08004ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d074      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eba:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb0 <xTaskPriorityDisinherit+0x10c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d00d      	beq.n	8004ee0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	b672      	cpsid	i
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	b662      	cpsie	i
 8004efc:	60bb      	str	r3, [r7, #8]
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d044      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d140      	bne.n	8004fa4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fd0b 	bl	8003942 <uxListRemove>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f36:	491f      	ldr	r1, [pc, #124]	@ (8004fb4 <xTaskPriorityDisinherit+0x110>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xTaskPriorityDisinherit+0xba>
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	4b18      	ldr	r3, [pc, #96]	@ (8004fb8 <xTaskPriorityDisinherit+0x114>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <xTaskPriorityDisinherit+0x114>)
 8004f5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	f1c3 0207 	rsb	r2, r3, #7
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	2201      	movs	r2, #1
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <xTaskPriorityDisinherit+0x114>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb8 <xTaskPriorityDisinherit+0x114>)
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4a08      	ldr	r2, [pc, #32]	@ (8004fb4 <xTaskPriorityDisinherit+0x110>)
 8004f92:	441a      	add	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fe fc74 	bl	8003888 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fa4:	697b      	ldr	r3, [r7, #20]
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000378 	.word	0x20000378
 8004fb4:	2000037c 	.word	0x2000037c
 8004fb8:	20000480 	.word	0x20000480

08004fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8089 	beq.w	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	b672      	cpsid	i
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	b662      	cpsie	i
 8004ff2:	60fb      	str	r3, [r7, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d902      	bls.n	800500a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e002      	b.n	8005010 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	429a      	cmp	r2, r3
 8005018:	d066      	beq.n	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	429a      	cmp	r2, r3
 8005022:	d161      	bne.n	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005024:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10d      	bne.n	800504a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	b672      	cpsid	i
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	b662      	cpsie	i
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db04      	blt.n	8005068 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f1c3 0207 	rsb	r2, r3, #7
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6959      	ldr	r1, [r3, #20]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005078:	4413      	add	r3, r2
 800507a:	4299      	cmp	r1, r3
 800507c:	d134      	bne.n	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3304      	adds	r3, #4
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fc5d 	bl	8003942 <uxListRemove>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d115      	bne.n	80050ba <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005092:	4918      	ldr	r1, [pc, #96]	@ (80050f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	4a10      	ldr	r2, [pc, #64]	@ (80050f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80050b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	2201      	movs	r2, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	4a0b      	ldr	r2, [pc, #44]	@ (80050f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a06      	ldr	r2, [pc, #24]	@ (80050f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050da:	441a      	add	r2, r3
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7fe fbd0 	bl	8003888 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e8:	bf00      	nop
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000378 	.word	0x20000378
 80050f4:	2000037c 	.word	0x2000037c
 80050f8:	20000480 	.word	0x20000480

080050fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005100:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <pvTaskIncrementMutexHeldCount+0x24>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <pvTaskIncrementMutexHeldCount+0x24>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800510e:	3201      	adds	r2, #1
 8005110:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005112:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <pvTaskIncrementMutexHeldCount+0x24>)
 8005114:	681b      	ldr	r3, [r3, #0]
	}
 8005116:	4618      	mov	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000378 	.word	0x20000378

08005124 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800512e:	4b29      	ldr	r3, [pc, #164]	@ (80051d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005134:	4b28      	ldr	r3, [pc, #160]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fc01 	bl	8003942 <uxListRemove>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4013      	ands	r3, r2
 800515a:	4a20      	ldr	r2, [pc, #128]	@ (80051dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800515c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005164:	d10a      	bne.n	800517c <prvAddCurrentTaskToDelayedList+0x58>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516c:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	481a      	ldr	r0, [pc, #104]	@ (80051e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005176:	f7fe fb87 	bl	8003888 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800517a:	e026      	b.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005184:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	429a      	cmp	r2, r3
 8005192:	d209      	bcs.n	80051a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005194:	4b13      	ldr	r3, [pc, #76]	@ (80051e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b0f      	ldr	r3, [pc, #60]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe fb95 	bl	80038d0 <vListInsert>
}
 80051a6:	e010      	b.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a8:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe fb8b 	bl	80038d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d202      	bcs.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051c4:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000047c 	.word	0x2000047c
 80051d8:	20000378 	.word	0x20000378
 80051dc:	20000480 	.word	0x20000480
 80051e0:	20000464 	.word	0x20000464
 80051e4:	20000434 	.word	0x20000434
 80051e8:	20000430 	.word	0x20000430
 80051ec:	20000498 	.word	0x20000498

080051f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b04      	subs	r3, #4
 8005200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b04      	subs	r3, #4
 800521e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005220:	4a0c      	ldr	r2, [pc, #48]	@ (8005254 <pxPortInitialiseStack+0x64>)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3b14      	subs	r3, #20
 800522a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b04      	subs	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f06f 0202 	mvn.w	r2, #2
 800523e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b20      	subs	r3, #32
 8005244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	08005259 	.word	0x08005259

08005258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005262:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <prvTaskExitError+0x60>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800526a:	d00d      	beq.n	8005288 <prvTaskExitError+0x30>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	b672      	cpsid	i
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	b662      	cpsie	i
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <prvTaskExitError+0x2c>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	b672      	cpsid	i
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	b662      	cpsie	i
 800529c:	60bb      	str	r3, [r7, #8]
}
 800529e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052a0:	bf00      	nop
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0fc      	beq.n	80052a2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c
 80052bc:	00000000 	.word	0x00000000

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	@ (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005316:	4b37      	ldr	r3, [pc, #220]	@ (80053f4 <xPortStartScheduler+0xe4>)
 8005318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	22ff      	movs	r2, #255	@ 0xff
 8005326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <xPortStartScheduler+0xe8>)
 800533c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800533e:	4b2f      	ldr	r3, [pc, #188]	@ (80053fc <xPortStartScheduler+0xec>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005344:	e009      	b.n	800535a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005346:	4b2d      	ldr	r3, [pc, #180]	@ (80053fc <xPortStartScheduler+0xec>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	4a2b      	ldr	r2, [pc, #172]	@ (80053fc <xPortStartScheduler+0xec>)
 800534e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005362:	2b80      	cmp	r3, #128	@ 0x80
 8005364:	d0ef      	beq.n	8005346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005366:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <xPortStartScheduler+0xec>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1c3 0307 	rsb	r3, r3, #7
 800536e:	2b04      	cmp	r3, #4
 8005370:	d00d      	beq.n	800538e <xPortStartScheduler+0x7e>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	b672      	cpsid	i
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	b662      	cpsie	i
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800538e:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <xPortStartScheduler+0xec>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <xPortStartScheduler+0xec>)
 8005396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005398:	4b18      	ldr	r3, [pc, #96]	@ (80053fc <xPortStartScheduler+0xec>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053a0:	4a16      	ldr	r2, [pc, #88]	@ (80053fc <xPortStartScheduler+0xec>)
 80053a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ac:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <xPortStartScheduler+0xf0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <xPortStartScheduler+0xf0>)
 80053b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <xPortStartScheduler+0xf0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <xPortStartScheduler+0xf0>)
 80053be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053c4:	f000 f8dc 	bl	8005580 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <xPortStartScheduler+0xf4>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053ce:	f000 f8fb 	bl	80055c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <xPortStartScheduler+0xf8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005408 <xPortStartScheduler+0xf8>)
 80053d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053de:	f7ff ff83 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053e2:	f7ff fa73 	bl	80048cc <vTaskSwitchContext>
	prvTaskExitError();
 80053e6:	f7ff ff37 	bl	8005258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000e400 	.word	0xe000e400
 80053f8:	200004a4 	.word	0x200004a4
 80053fc:	200004a8 	.word	0x200004a8
 8005400:	e000ed20 	.word	0xe000ed20
 8005404:	2000000c 	.word	0x2000000c
 8005408:	e000ef34 	.word	0xe000ef34

0800540c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	b672      	cpsid	i
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	b662      	cpsie	i
 8005426:	607b      	str	r3, [r7, #4]
}
 8005428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800542a:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <vPortEnterCritical+0x64>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3301      	adds	r3, #1
 8005430:	4a0f      	ldr	r2, [pc, #60]	@ (8005470 <vPortEnterCritical+0x64>)
 8005432:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005434:	4b0e      	ldr	r3, [pc, #56]	@ (8005470 <vPortEnterCritical+0x64>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d112      	bne.n	8005462 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800543c:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <vPortEnterCritical+0x68>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <vPortEnterCritical+0x56>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	b672      	cpsid	i
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	b662      	cpsie	i
 800545a:	603b      	str	r3, [r7, #0]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vPortEnterCritical+0x52>
	}
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	2000000c 	.word	0x2000000c
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800547e:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <vPortExitCritical+0x54>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <vPortExitCritical+0x2a>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	b672      	cpsid	i
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	b662      	cpsie	i
 800549a:	607b      	str	r3, [r7, #4]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <vPortExitCritical+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <vPortExitCritical+0x54>)
 80054aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <vPortExitCritical+0x54>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <vPortExitCritical+0x48>
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054d0:	f3ef 8009 	mrs	r0, PSP
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <pxCurrentTCBConst>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	f01e 0f10 	tst.w	lr, #16
 80054e0:	bf08      	it	eq
 80054e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054f4:	b672      	cpsid	i
 80054f6:	f380 8811 	msr	BASEPRI, r0
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	b662      	cpsie	i
 8005504:	f7ff f9e2 	bl	80048cc <vTaskSwitchContext>
 8005508:	f04f 0000 	mov.w	r0, #0
 800550c:	f380 8811 	msr	BASEPRI, r0
 8005510:	bc09      	pop	{r0, r3}
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	6808      	ldr	r0, [r1, #0]
 8005516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	f01e 0f10 	tst.w	lr, #16
 800551e:	bf08      	it	eq
 8005520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005524:	f380 8809 	msr	PSP, r0
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <pxCurrentTCBConst>:
 8005530:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005556:	f7ff f8fd 	bl	8004754 <xTaskIncrementTick>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005560:	4b06      	ldr	r3, [pc, #24]	@ (800557c <xPortSysTickHandler+0x44>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f383 8811 	msr	BASEPRI, r3
}
 8005572:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005584:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <vPortSetupTimerInterrupt+0x34>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <vPortSetupTimerInterrupt+0x38>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <vPortSetupTimerInterrupt+0x3c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <vPortSetupTimerInterrupt+0x40>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	4a09      	ldr	r2, [pc, #36]	@ (80055c4 <vPortSetupTimerInterrupt+0x44>)
 800559e:	3b01      	subs	r3, #1
 80055a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055a2:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <vPortSetupTimerInterrupt+0x34>)
 80055a4:	2207      	movs	r2, #7
 80055a6:	601a      	str	r2, [r3, #0]
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000e010 	.word	0xe000e010
 80055b8:	e000e018 	.word	0xe000e018
 80055bc:	20000000 	.word	0x20000000
 80055c0:	10624dd3 	.word	0x10624dd3
 80055c4:	e000e014 	.word	0xe000e014

080055c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055d8 <vPortEnableVFP+0x10>
 80055cc:	6801      	ldr	r1, [r0, #0]
 80055ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055d2:	6001      	str	r1, [r0, #0]
 80055d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055d6:	bf00      	nop
 80055d8:	e000ed88 	.word	0xe000ed88

080055dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	@ 0x28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055e8:	f7ff f806 	bl	80045f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055ec:	4b5d      	ldr	r3, [pc, #372]	@ (8005764 <pvPortMalloc+0x188>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055f4:	f000 f920 	bl	8005838 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055f8:	4b5b      	ldr	r3, [pc, #364]	@ (8005768 <pvPortMalloc+0x18c>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 8094 	bne.w	800572e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800560c:	2208      	movs	r2, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d017      	beq.n	800564e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <pvPortMalloc+0x72>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	b672      	cpsid	i
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	b662      	cpsie	i
 8005646:	617b      	str	r3, [r7, #20]
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d06c      	beq.n	800572e <pvPortMalloc+0x152>
 8005654:	4b45      	ldr	r3, [pc, #276]	@ (800576c <pvPortMalloc+0x190>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d867      	bhi.n	800572e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800565e:	4b44      	ldr	r3, [pc, #272]	@ (8005770 <pvPortMalloc+0x194>)
 8005660:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005662:	4b43      	ldr	r3, [pc, #268]	@ (8005770 <pvPortMalloc+0x194>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005668:	e004      	b.n	8005674 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d903      	bls.n	8005686 <pvPortMalloc+0xaa>
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f1      	bne.n	800566a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005686:	4b37      	ldr	r3, [pc, #220]	@ (8005764 <pvPortMalloc+0x188>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568c:	429a      	cmp	r2, r3
 800568e:	d04e      	beq.n	800572e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2208      	movs	r2, #8
 8005696:	4413      	add	r3, r2
 8005698:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	2308      	movs	r3, #8
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d922      	bls.n	80056f8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <pvPortMalloc+0x104>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	b672      	cpsid	i
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	b662      	cpsie	i
 80056d8:	613b      	str	r3, [r7, #16]
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	e7fd      	b.n	80056dc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056f2:	69b8      	ldr	r0, [r7, #24]
 80056f4:	f000 f902 	bl	80058fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056f8:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <pvPortMalloc+0x190>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <pvPortMalloc+0x190>)
 8005704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005706:	4b19      	ldr	r3, [pc, #100]	@ (800576c <pvPortMalloc+0x190>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <pvPortMalloc+0x198>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005712:	4b16      	ldr	r3, [pc, #88]	@ (800576c <pvPortMalloc+0x190>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a17      	ldr	r2, [pc, #92]	@ (8005774 <pvPortMalloc+0x198>)
 8005718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <pvPortMalloc+0x18c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	431a      	orrs	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800572e:	f7fe ff71 	bl	8004614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <pvPortMalloc+0x17c>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005740:	b672      	cpsid	i
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	b662      	cpsie	i
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <pvPortMalloc+0x178>
	return pvReturn;
 8005758:	69fb      	ldr	r3, [r7, #28]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3728      	adds	r7, #40	@ 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200040b4 	.word	0x200040b4
 8005768:	200040c0 	.word	0x200040c0
 800576c:	200040b8 	.word	0x200040b8
 8005770:	200040ac 	.word	0x200040ac
 8005774:	200040bc 	.word	0x200040bc

08005778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04e      	beq.n	8005828 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800578a:	2308      	movs	r3, #8
 800578c:	425b      	negs	r3, r3
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <vPortFree+0xb8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <vPortFree+0x4a>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	b672      	cpsid	i
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	b662      	cpsie	i
 80057ba:	60fb      	str	r3, [r7, #12]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <vPortFree+0x6e>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	b672      	cpsid	i
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	b662      	cpsie	i
 80057de:	60bb      	str	r3, [r7, #8]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <vPortFree+0xb8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d115      	bne.n	8005828 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <vPortFree+0xb8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800580c:	f7fe fef4 	bl	80045f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <vPortFree+0xbc>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4413      	add	r3, r2
 800581a:	4a06      	ldr	r2, [pc, #24]	@ (8005834 <vPortFree+0xbc>)
 800581c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800581e:	6938      	ldr	r0, [r7, #16]
 8005820:	f000 f86c 	bl	80058fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005824:	f7fe fef6 	bl	8004614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005828:	bf00      	nop
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200040c0 	.word	0x200040c0
 8005834:	200040b8 	.word	0x200040b8

08005838 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800583e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005842:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005844:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <prvHeapInit+0xac>)
 8005846:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3307      	adds	r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <prvHeapInit+0xac>)
 8005868:	4413      	add	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005870:	4a1d      	ldr	r2, [pc, #116]	@ (80058e8 <prvHeapInit+0xb0>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005876:	4b1c      	ldr	r3, [pc, #112]	@ (80058e8 <prvHeapInit+0xb0>)
 8005878:	2200      	movs	r2, #0
 800587a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4413      	add	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005884:	2208      	movs	r2, #8
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <prvHeapInit+0xb4>)
 8005898:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800589a:	4b14      	ldr	r3, [pc, #80]	@ (80058ec <prvHeapInit+0xb4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058a2:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <prvHeapInit+0xb4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <prvHeapInit+0xb4>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a0a      	ldr	r2, [pc, #40]	@ (80058f0 <prvHeapInit+0xb8>)
 80058c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4a09      	ldr	r2, [pc, #36]	@ (80058f4 <prvHeapInit+0xbc>)
 80058ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058d0:	4b09      	ldr	r3, [pc, #36]	@ (80058f8 <prvHeapInit+0xc0>)
 80058d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058d6:	601a      	str	r2, [r3, #0]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	200004ac 	.word	0x200004ac
 80058e8:	200040ac 	.word	0x200040ac
 80058ec:	200040b4 	.word	0x200040b4
 80058f0:	200040bc 	.word	0x200040bc
 80058f4:	200040b8 	.word	0x200040b8
 80058f8:	200040c0 	.word	0x200040c0

080058fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005904:	4b28      	ldr	r3, [pc, #160]	@ (80059a8 <prvInsertBlockIntoFreeList+0xac>)
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e002      	b.n	8005910 <prvInsertBlockIntoFreeList+0x14>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d8f7      	bhi.n	800590a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	4413      	add	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d108      	bne.n	800593e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d118      	bne.n	8005984 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <prvInsertBlockIntoFreeList+0xb0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d00d      	beq.n	800597a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	441a      	add	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e008      	b.n	800598c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800597a:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <prvInsertBlockIntoFreeList+0xb0>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e003      	b.n	800598c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d002      	beq.n	800599a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	200040ac 	.word	0x200040ac
 80059ac:	200040b4 	.word	0x200040b4

080059b0 <std>:
 80059b0:	2300      	movs	r3, #0
 80059b2:	b510      	push	{r4, lr}
 80059b4:	4604      	mov	r4, r0
 80059b6:	e9c0 3300 	strd	r3, r3, [r0]
 80059ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059be:	6083      	str	r3, [r0, #8]
 80059c0:	8181      	strh	r1, [r0, #12]
 80059c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80059c4:	81c2      	strh	r2, [r0, #14]
 80059c6:	6183      	str	r3, [r0, #24]
 80059c8:	4619      	mov	r1, r3
 80059ca:	2208      	movs	r2, #8
 80059cc:	305c      	adds	r0, #92	@ 0x5c
 80059ce:	f000 f906 	bl	8005bde <memset>
 80059d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a08 <std+0x58>)
 80059d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80059d6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a0c <std+0x5c>)
 80059d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <std+0x60>)
 80059dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059de:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <std+0x64>)
 80059e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80059e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a18 <std+0x68>)
 80059e4:	6224      	str	r4, [r4, #32]
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d006      	beq.n	80059f8 <std+0x48>
 80059ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059ee:	4294      	cmp	r4, r2
 80059f0:	d002      	beq.n	80059f8 <std+0x48>
 80059f2:	33d0      	adds	r3, #208	@ 0xd0
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d105      	bne.n	8005a04 <std+0x54>
 80059f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f000 b966 	b.w	8005cd0 <__retarget_lock_init_recursive>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	08005b59 	.word	0x08005b59
 8005a0c:	08005b7b 	.word	0x08005b7b
 8005a10:	08005bb3 	.word	0x08005bb3
 8005a14:	08005bd7 	.word	0x08005bd7
 8005a18:	200040c4 	.word	0x200040c4

08005a1c <stdio_exit_handler>:
 8005a1c:	4a02      	ldr	r2, [pc, #8]	@ (8005a28 <stdio_exit_handler+0xc>)
 8005a1e:	4903      	ldr	r1, [pc, #12]	@ (8005a2c <stdio_exit_handler+0x10>)
 8005a20:	4803      	ldr	r0, [pc, #12]	@ (8005a30 <stdio_exit_handler+0x14>)
 8005a22:	f000 b869 	b.w	8005af8 <_fwalk_sglue>
 8005a26:	bf00      	nop
 8005a28:	20000010 	.word	0x20000010
 8005a2c:	08006589 	.word	0x08006589
 8005a30:	20000020 	.word	0x20000020

08005a34 <cleanup_stdio>:
 8005a34:	6841      	ldr	r1, [r0, #4]
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <cleanup_stdio+0x34>)
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	d001      	beq.n	8005a44 <cleanup_stdio+0x10>
 8005a40:	f000 fda2 	bl	8006588 <_fflush_r>
 8005a44:	68a1      	ldr	r1, [r4, #8]
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <cleanup_stdio+0x38>)
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	d002      	beq.n	8005a52 <cleanup_stdio+0x1e>
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fd9b 	bl	8006588 <_fflush_r>
 8005a52:	68e1      	ldr	r1, [r4, #12]
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <cleanup_stdio+0x3c>)
 8005a56:	4299      	cmp	r1, r3
 8005a58:	d004      	beq.n	8005a64 <cleanup_stdio+0x30>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a60:	f000 bd92 	b.w	8006588 <_fflush_r>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop
 8005a68:	200040c4 	.word	0x200040c4
 8005a6c:	2000412c 	.word	0x2000412c
 8005a70:	20004194 	.word	0x20004194

08005a74 <global_stdio_init.part.0>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <global_stdio_init.part.0+0x30>)
 8005a78:	4c0b      	ldr	r4, [pc, #44]	@ (8005aa8 <global_stdio_init.part.0+0x34>)
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005aac <global_stdio_init.part.0+0x38>)
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	2200      	movs	r2, #0
 8005a82:	2104      	movs	r1, #4
 8005a84:	f7ff ff94 	bl	80059b0 <std>
 8005a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	2109      	movs	r1, #9
 8005a90:	f7ff ff8e 	bl	80059b0 <std>
 8005a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a98:	2202      	movs	r2, #2
 8005a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9e:	2112      	movs	r1, #18
 8005aa0:	f7ff bf86 	b.w	80059b0 <std>
 8005aa4:	200041fc 	.word	0x200041fc
 8005aa8:	200040c4 	.word	0x200040c4
 8005aac:	08005a1d 	.word	0x08005a1d

08005ab0 <__sfp_lock_acquire>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	@ (8005ab8 <__sfp_lock_acquire+0x8>)
 8005ab2:	f000 b90e 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	20004205 	.word	0x20004205

08005abc <__sfp_lock_release>:
 8005abc:	4801      	ldr	r0, [pc, #4]	@ (8005ac4 <__sfp_lock_release+0x8>)
 8005abe:	f000 b909 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	20004205 	.word	0x20004205

08005ac8 <__sinit>:
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	4604      	mov	r4, r0
 8005acc:	f7ff fff0 	bl	8005ab0 <__sfp_lock_acquire>
 8005ad0:	6a23      	ldr	r3, [r4, #32]
 8005ad2:	b11b      	cbz	r3, 8005adc <__sinit+0x14>
 8005ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad8:	f7ff bff0 	b.w	8005abc <__sfp_lock_release>
 8005adc:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <__sinit+0x28>)
 8005ade:	6223      	str	r3, [r4, #32]
 8005ae0:	4b04      	ldr	r3, [pc, #16]	@ (8005af4 <__sinit+0x2c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f5      	bne.n	8005ad4 <__sinit+0xc>
 8005ae8:	f7ff ffc4 	bl	8005a74 <global_stdio_init.part.0>
 8005aec:	e7f2      	b.n	8005ad4 <__sinit+0xc>
 8005aee:	bf00      	nop
 8005af0:	08005a35 	.word	0x08005a35
 8005af4:	200041fc 	.word	0x200041fc

08005af8 <_fwalk_sglue>:
 8005af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afc:	4607      	mov	r7, r0
 8005afe:	4688      	mov	r8, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	2600      	movs	r6, #0
 8005b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b08:	f1b9 0901 	subs.w	r9, r9, #1
 8005b0c:	d505      	bpl.n	8005b1a <_fwalk_sglue+0x22>
 8005b0e:	6824      	ldr	r4, [r4, #0]
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	d1f7      	bne.n	8005b04 <_fwalk_sglue+0xc>
 8005b14:	4630      	mov	r0, r6
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	89ab      	ldrh	r3, [r5, #12]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d907      	bls.n	8005b30 <_fwalk_sglue+0x38>
 8005b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b24:	3301      	adds	r3, #1
 8005b26:	d003      	beq.n	8005b30 <_fwalk_sglue+0x38>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c0      	blx	r8
 8005b2e:	4306      	orrs	r6, r0
 8005b30:	3568      	adds	r5, #104	@ 0x68
 8005b32:	e7e9      	b.n	8005b08 <_fwalk_sglue+0x10>

08005b34 <iprintf>:
 8005b34:	b40f      	push	{r0, r1, r2, r3}
 8005b36:	b507      	push	{r0, r1, r2, lr}
 8005b38:	4906      	ldr	r1, [pc, #24]	@ (8005b54 <iprintf+0x20>)
 8005b3a:	ab04      	add	r3, sp, #16
 8005b3c:	6808      	ldr	r0, [r1, #0]
 8005b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b42:	6881      	ldr	r1, [r0, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	f000 f9f7 	bl	8005f38 <_vfiprintf_r>
 8005b4a:	b003      	add	sp, #12
 8005b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b50:	b004      	add	sp, #16
 8005b52:	4770      	bx	lr
 8005b54:	2000001c 	.word	0x2000001c

08005b58 <__sread>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b60:	f000 f868 	bl	8005c34 <_read_r>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	bfab      	itete	ge
 8005b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b6c:	181b      	addge	r3, r3, r0
 8005b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b72:	bfac      	ite	ge
 8005b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b76:	81a3      	strhlt	r3, [r4, #12]
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <__swrite>:
 8005b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7e:	461f      	mov	r7, r3
 8005b80:	898b      	ldrh	r3, [r1, #12]
 8005b82:	05db      	lsls	r3, r3, #23
 8005b84:	4605      	mov	r5, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4616      	mov	r6, r2
 8005b8a:	d505      	bpl.n	8005b98 <__swrite+0x1e>
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	2302      	movs	r3, #2
 8005b92:	2200      	movs	r2, #0
 8005b94:	f000 f83c 	bl	8005c10 <_lseek_r>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba2:	81a3      	strh	r3, [r4, #12]
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	4628      	mov	r0, r5
 8005baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	f000 b853 	b.w	8005c58 <_write_r>

08005bb2 <__sseek>:
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bba:	f000 f829 	bl	8005c10 <_lseek_r>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	bf15      	itete	ne
 8005bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bce:	81a3      	strheq	r3, [r4, #12]
 8005bd0:	bf18      	it	ne
 8005bd2:	81a3      	strhne	r3, [r4, #12]
 8005bd4:	bd10      	pop	{r4, pc}

08005bd6 <__sclose>:
 8005bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bda:	f000 b809 	b.w	8005bf0 <_close_r>

08005bde <memset>:
 8005bde:	4402      	add	r2, r0
 8005be0:	4603      	mov	r3, r0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d100      	bne.n	8005be8 <memset+0xa>
 8005be6:	4770      	bx	lr
 8005be8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bec:	e7f9      	b.n	8005be2 <memset+0x4>
	...

08005bf0 <_close_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	@ (8005c0c <_close_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fb4d 	bl	800129a <_close>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_close_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_close_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20004200 	.word	0x20004200

08005c10 <_lseek_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_lseek_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fb62 	bl	80012e8 <_lseek>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_lseek_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_lseek_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20004200 	.word	0x20004200

08005c34 <_read_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_read_r+0x20>)
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fb faf0 	bl	8001228 <_read>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_read_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_read_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20004200 	.word	0x20004200

08005c58 <_write_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_write_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fb fafb 	bl	8001262 <_write>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_write_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_write_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20004200 	.word	0x20004200

08005c7c <__errno>:
 8005c7c:	4b01      	ldr	r3, [pc, #4]	@ (8005c84 <__errno+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2000001c 	.word	0x2000001c

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc0 <__libc_init_array+0x38>)
 8005c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cc4 <__libc_init_array+0x3c>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	2600      	movs	r6, #0
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	4d0b      	ldr	r5, [pc, #44]	@ (8005cc8 <__libc_init_array+0x40>)
 8005c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005ccc <__libc_init_array+0x44>)
 8005c9c:	f000 fdc4 	bl	8006828 <_init>
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	08006900 	.word	0x08006900
 8005cc4:	08006900 	.word	0x08006900
 8005cc8:	08006900 	.word	0x08006900
 8005ccc:	08006904 	.word	0x08006904

08005cd0 <__retarget_lock_init_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_acquire_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <__retarget_lock_release_recursive>:
 8005cd4:	4770      	bx	lr

08005cd6 <memcpy>:
 8005cd6:	440a      	add	r2, r1
 8005cd8:	4291      	cmp	r1, r2
 8005cda:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005cde:	d100      	bne.n	8005ce2 <memcpy+0xc>
 8005ce0:	4770      	bx	lr
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cec:	4291      	cmp	r1, r2
 8005cee:	d1f9      	bne.n	8005ce4 <memcpy+0xe>
 8005cf0:	bd10      	pop	{r4, pc}
	...

08005cf4 <_free_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d041      	beq.n	8005d80 <_free_r+0x8c>
 8005cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d00:	1f0c      	subs	r4, r1, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfb8      	it	lt
 8005d06:	18e4      	addlt	r4, r4, r3
 8005d08:	f000 f8e0 	bl	8005ecc <__malloc_lock>
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d84 <_free_r+0x90>)
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	b933      	cbnz	r3, 8005d20 <_free_r+0x2c>
 8005d12:	6063      	str	r3, [r4, #4]
 8005d14:	6014      	str	r4, [r2, #0]
 8005d16:	4628      	mov	r0, r5
 8005d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d1c:	f000 b8dc 	b.w	8005ed8 <__malloc_unlock>
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d908      	bls.n	8005d36 <_free_r+0x42>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	1821      	adds	r1, r4, r0
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	bf01      	itttt	eq
 8005d2c:	6819      	ldreq	r1, [r3, #0]
 8005d2e:	685b      	ldreq	r3, [r3, #4]
 8005d30:	1809      	addeq	r1, r1, r0
 8005d32:	6021      	streq	r1, [r4, #0]
 8005d34:	e7ed      	b.n	8005d12 <_free_r+0x1e>
 8005d36:	461a      	mov	r2, r3
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b10b      	cbz	r3, 8005d40 <_free_r+0x4c>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d9fa      	bls.n	8005d36 <_free_r+0x42>
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	1850      	adds	r0, r2, r1
 8005d44:	42a0      	cmp	r0, r4
 8005d46:	d10b      	bne.n	8005d60 <_free_r+0x6c>
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	1850      	adds	r0, r2, r1
 8005d4e:	4283      	cmp	r3, r0
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	d1e0      	bne.n	8005d16 <_free_r+0x22>
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	4408      	add	r0, r1
 8005d5c:	6010      	str	r0, [r2, #0]
 8005d5e:	e7da      	b.n	8005d16 <_free_r+0x22>
 8005d60:	d902      	bls.n	8005d68 <_free_r+0x74>
 8005d62:	230c      	movs	r3, #12
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	e7d6      	b.n	8005d16 <_free_r+0x22>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	1821      	adds	r1, r4, r0
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf04      	itt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	bf04      	itt	eq
 8005d78:	1809      	addeq	r1, r1, r0
 8005d7a:	6021      	streq	r1, [r4, #0]
 8005d7c:	6054      	str	r4, [r2, #4]
 8005d7e:	e7ca      	b.n	8005d16 <_free_r+0x22>
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	bf00      	nop
 8005d84:	2000420c 	.word	0x2000420c

08005d88 <sbrk_aligned>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005dc8 <sbrk_aligned+0x40>)
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	6831      	ldr	r1, [r6, #0]
 8005d90:	4605      	mov	r5, r0
 8005d92:	b911      	cbnz	r1, 8005d9a <sbrk_aligned+0x12>
 8005d94:	f000 fcb4 	bl	8006700 <_sbrk_r>
 8005d98:	6030      	str	r0, [r6, #0]
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f000 fcaf 	bl	8006700 <_sbrk_r>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d103      	bne.n	8005dae <sbrk_aligned+0x26>
 8005da6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005daa:	4620      	mov	r0, r4
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
 8005dae:	1cc4      	adds	r4, r0, #3
 8005db0:	f024 0403 	bic.w	r4, r4, #3
 8005db4:	42a0      	cmp	r0, r4
 8005db6:	d0f8      	beq.n	8005daa <sbrk_aligned+0x22>
 8005db8:	1a21      	subs	r1, r4, r0
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 fca0 	bl	8006700 <_sbrk_r>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d1f2      	bne.n	8005daa <sbrk_aligned+0x22>
 8005dc4:	e7ef      	b.n	8005da6 <sbrk_aligned+0x1e>
 8005dc6:	bf00      	nop
 8005dc8:	20004208 	.word	0x20004208

08005dcc <_malloc_r>:
 8005dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd0:	1ccd      	adds	r5, r1, #3
 8005dd2:	f025 0503 	bic.w	r5, r5, #3
 8005dd6:	3508      	adds	r5, #8
 8005dd8:	2d0c      	cmp	r5, #12
 8005dda:	bf38      	it	cc
 8005ddc:	250c      	movcc	r5, #12
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	4606      	mov	r6, r0
 8005de2:	db01      	blt.n	8005de8 <_malloc_r+0x1c>
 8005de4:	42a9      	cmp	r1, r5
 8005de6:	d904      	bls.n	8005df2 <_malloc_r+0x26>
 8005de8:	230c      	movs	r3, #12
 8005dea:	6033      	str	r3, [r6, #0]
 8005dec:	2000      	movs	r0, #0
 8005dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ec8 <_malloc_r+0xfc>
 8005df6:	f000 f869 	bl	8005ecc <__malloc_lock>
 8005dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dfe:	461c      	mov	r4, r3
 8005e00:	bb44      	cbnz	r4, 8005e54 <_malloc_r+0x88>
 8005e02:	4629      	mov	r1, r5
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff ffbf 	bl	8005d88 <sbrk_aligned>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	d158      	bne.n	8005ec2 <_malloc_r+0xf6>
 8005e10:	f8d8 4000 	ldr.w	r4, [r8]
 8005e14:	4627      	mov	r7, r4
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d143      	bne.n	8005ea2 <_malloc_r+0xd6>
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	d04b      	beq.n	8005eb6 <_malloc_r+0xea>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	4639      	mov	r1, r7
 8005e22:	4630      	mov	r0, r6
 8005e24:	eb04 0903 	add.w	r9, r4, r3
 8005e28:	f000 fc6a 	bl	8006700 <_sbrk_r>
 8005e2c:	4581      	cmp	r9, r0
 8005e2e:	d142      	bne.n	8005eb6 <_malloc_r+0xea>
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	1a6d      	subs	r5, r5, r1
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff ffa6 	bl	8005d88 <sbrk_aligned>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d03a      	beq.n	8005eb6 <_malloc_r+0xea>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	442b      	add	r3, r5
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	bb62      	cbnz	r2, 8005ea8 <_malloc_r+0xdc>
 8005e4e:	f8c8 7000 	str.w	r7, [r8]
 8005e52:	e00f      	b.n	8005e74 <_malloc_r+0xa8>
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	1b52      	subs	r2, r2, r5
 8005e58:	d420      	bmi.n	8005e9c <_malloc_r+0xd0>
 8005e5a:	2a0b      	cmp	r2, #11
 8005e5c:	d917      	bls.n	8005e8e <_malloc_r+0xc2>
 8005e5e:	1961      	adds	r1, r4, r5
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	6025      	str	r5, [r4, #0]
 8005e64:	bf18      	it	ne
 8005e66:	6059      	strne	r1, [r3, #4]
 8005e68:	6863      	ldr	r3, [r4, #4]
 8005e6a:	bf08      	it	eq
 8005e6c:	f8c8 1000 	streq.w	r1, [r8]
 8005e70:	5162      	str	r2, [r4, r5]
 8005e72:	604b      	str	r3, [r1, #4]
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 f82f 	bl	8005ed8 <__malloc_unlock>
 8005e7a:	f104 000b 	add.w	r0, r4, #11
 8005e7e:	1d23      	adds	r3, r4, #4
 8005e80:	f020 0007 	bic.w	r0, r0, #7
 8005e84:	1ac2      	subs	r2, r0, r3
 8005e86:	bf1c      	itt	ne
 8005e88:	1a1b      	subne	r3, r3, r0
 8005e8a:	50a3      	strne	r3, [r4, r2]
 8005e8c:	e7af      	b.n	8005dee <_malloc_r+0x22>
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	bf0c      	ite	eq
 8005e94:	f8c8 2000 	streq.w	r2, [r8]
 8005e98:	605a      	strne	r2, [r3, #4]
 8005e9a:	e7eb      	b.n	8005e74 <_malloc_r+0xa8>
 8005e9c:	4623      	mov	r3, r4
 8005e9e:	6864      	ldr	r4, [r4, #4]
 8005ea0:	e7ae      	b.n	8005e00 <_malloc_r+0x34>
 8005ea2:	463c      	mov	r4, r7
 8005ea4:	687f      	ldr	r7, [r7, #4]
 8005ea6:	e7b6      	b.n	8005e16 <_malloc_r+0x4a>
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d1fb      	bne.n	8005ea8 <_malloc_r+0xdc>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6053      	str	r3, [r2, #4]
 8005eb4:	e7de      	b.n	8005e74 <_malloc_r+0xa8>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f000 f80c 	bl	8005ed8 <__malloc_unlock>
 8005ec0:	e794      	b.n	8005dec <_malloc_r+0x20>
 8005ec2:	6005      	str	r5, [r0, #0]
 8005ec4:	e7d6      	b.n	8005e74 <_malloc_r+0xa8>
 8005ec6:	bf00      	nop
 8005ec8:	2000420c 	.word	0x2000420c

08005ecc <__malloc_lock>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	@ (8005ed4 <__malloc_lock+0x8>)
 8005ece:	f7ff bf00 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	20004204 	.word	0x20004204

08005ed8 <__malloc_unlock>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	@ (8005ee0 <__malloc_unlock+0x8>)
 8005eda:	f7ff befb 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8005ede:	bf00      	nop
 8005ee0:	20004204 	.word	0x20004204

08005ee4 <__sfputc_r>:
 8005ee4:	6893      	ldr	r3, [r2, #8]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	b410      	push	{r4}
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	da08      	bge.n	8005f02 <__sfputc_r+0x1e>
 8005ef0:	6994      	ldr	r4, [r2, #24]
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	db01      	blt.n	8005efa <__sfputc_r+0x16>
 8005ef6:	290a      	cmp	r1, #10
 8005ef8:	d103      	bne.n	8005f02 <__sfputc_r+0x1e>
 8005efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efe:	f000 bb6b 	b.w	80065d8 <__swbuf_r>
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	1c58      	adds	r0, r3, #1
 8005f06:	6010      	str	r0, [r2, #0]
 8005f08:	7019      	strb	r1, [r3, #0]
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <__sfputs_r>:
 8005f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	18d5      	adds	r5, r2, r3
 8005f1c:	42ac      	cmp	r4, r5
 8005f1e:	d101      	bne.n	8005f24 <__sfputs_r+0x12>
 8005f20:	2000      	movs	r0, #0
 8005f22:	e007      	b.n	8005f34 <__sfputs_r+0x22>
 8005f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f28:	463a      	mov	r2, r7
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ffda 	bl	8005ee4 <__sfputc_r>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d1f3      	bne.n	8005f1c <__sfputs_r+0xa>
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f38 <_vfiprintf_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	b09d      	sub	sp, #116	@ 0x74
 8005f40:	4614      	mov	r4, r2
 8005f42:	4698      	mov	r8, r3
 8005f44:	4606      	mov	r6, r0
 8005f46:	b118      	cbz	r0, 8005f50 <_vfiprintf_r+0x18>
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	b90b      	cbnz	r3, 8005f50 <_vfiprintf_r+0x18>
 8005f4c:	f7ff fdbc 	bl	8005ac8 <__sinit>
 8005f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_vfiprintf_r+0x2a>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_vfiprintf_r+0x2a>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f5e:	f7ff feb8 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	d501      	bpl.n	8005f6c <_vfiprintf_r+0x34>
 8005f68:	692b      	ldr	r3, [r5, #16]
 8005f6a:	b99b      	cbnz	r3, 8005f94 <_vfiprintf_r+0x5c>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f000 fb70 	bl	8006654 <__swsetup_r>
 8005f74:	b170      	cbz	r0, 8005f94 <_vfiprintf_r+0x5c>
 8005f76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f78:	07dc      	lsls	r4, r3, #31
 8005f7a:	d504      	bpl.n	8005f86 <_vfiprintf_r+0x4e>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f80:	b01d      	add	sp, #116	@ 0x74
 8005f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	0598      	lsls	r0, r3, #22
 8005f8a:	d4f7      	bmi.n	8005f7c <_vfiprintf_r+0x44>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8e:	f7ff fea1 	bl	8005cd4 <__retarget_lock_release_recursive>
 8005f92:	e7f3      	b.n	8005f7c <_vfiprintf_r+0x44>
 8005f94:	2300      	movs	r3, #0
 8005f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa2:	2330      	movs	r3, #48	@ 0x30
 8005fa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006154 <_vfiprintf_r+0x21c>
 8005fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fac:	f04f 0901 	mov.w	r9, #1
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	469a      	mov	sl, r3
 8005fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_vfiprintf_r+0x86>
 8005fba:	2a25      	cmp	r2, #37	@ 0x25
 8005fbc:	d1f9      	bne.n	8005fb2 <_vfiprintf_r+0x7a>
 8005fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc2:	d00b      	beq.n	8005fdc <_vfiprintf_r+0xa4>
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ffa1 	bl	8005f12 <__sfputs_r>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f000 80a7 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fd8:	445a      	add	r2, fp
 8005fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 809f 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff0:	f10a 0a01 	add.w	sl, sl, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	9307      	str	r3, [sp, #28]
 8005ff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ffc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ffe:	4654      	mov	r4, sl
 8006000:	2205      	movs	r2, #5
 8006002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006006:	4853      	ldr	r0, [pc, #332]	@ (8006154 <_vfiprintf_r+0x21c>)
 8006008:	f7fa f902 	bl	8000210 <memchr>
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	b9d8      	cbnz	r0, 8006048 <_vfiprintf_r+0x110>
 8006010:	06d1      	lsls	r1, r2, #27
 8006012:	bf44      	itt	mi
 8006014:	2320      	movmi	r3, #32
 8006016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800601a:	0713      	lsls	r3, r2, #28
 800601c:	bf44      	itt	mi
 800601e:	232b      	movmi	r3, #43	@ 0x2b
 8006020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006024:	f89a 3000 	ldrb.w	r3, [sl]
 8006028:	2b2a      	cmp	r3, #42	@ 0x2a
 800602a:	d015      	beq.n	8006058 <_vfiprintf_r+0x120>
 800602c:	9a07      	ldr	r2, [sp, #28]
 800602e:	4654      	mov	r4, sl
 8006030:	2000      	movs	r0, #0
 8006032:	f04f 0c0a 	mov.w	ip, #10
 8006036:	4621      	mov	r1, r4
 8006038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603c:	3b30      	subs	r3, #48	@ 0x30
 800603e:	2b09      	cmp	r3, #9
 8006040:	d94b      	bls.n	80060da <_vfiprintf_r+0x1a2>
 8006042:	b1b0      	cbz	r0, 8006072 <_vfiprintf_r+0x13a>
 8006044:	9207      	str	r2, [sp, #28]
 8006046:	e014      	b.n	8006072 <_vfiprintf_r+0x13a>
 8006048:	eba0 0308 	sub.w	r3, r0, r8
 800604c:	fa09 f303 	lsl.w	r3, r9, r3
 8006050:	4313      	orrs	r3, r2
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	46a2      	mov	sl, r4
 8006056:	e7d2      	b.n	8005ffe <_vfiprintf_r+0xc6>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d19      	adds	r1, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9103      	str	r1, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfbb      	ittet	lt
 8006064:	425b      	neglt	r3, r3
 8006066:	f042 0202 	orrlt.w	r2, r2, #2
 800606a:	9307      	strge	r3, [sp, #28]
 800606c:	9307      	strlt	r3, [sp, #28]
 800606e:	bfb8      	it	lt
 8006070:	9204      	strlt	r2, [sp, #16]
 8006072:	7823      	ldrb	r3, [r4, #0]
 8006074:	2b2e      	cmp	r3, #46	@ 0x2e
 8006076:	d10a      	bne.n	800608e <_vfiprintf_r+0x156>
 8006078:	7863      	ldrb	r3, [r4, #1]
 800607a:	2b2a      	cmp	r3, #42	@ 0x2a
 800607c:	d132      	bne.n	80060e4 <_vfiprintf_r+0x1ac>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9203      	str	r2, [sp, #12]
 8006086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800608a:	3402      	adds	r4, #2
 800608c:	9305      	str	r3, [sp, #20]
 800608e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006164 <_vfiprintf_r+0x22c>
 8006092:	7821      	ldrb	r1, [r4, #0]
 8006094:	2203      	movs	r2, #3
 8006096:	4650      	mov	r0, sl
 8006098:	f7fa f8ba 	bl	8000210 <memchr>
 800609c:	b138      	cbz	r0, 80060ae <_vfiprintf_r+0x176>
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	eba0 000a 	sub.w	r0, r0, sl
 80060a4:	2240      	movs	r2, #64	@ 0x40
 80060a6:	4082      	lsls	r2, r0
 80060a8:	4313      	orrs	r3, r2
 80060aa:	3401      	adds	r4, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b2:	4829      	ldr	r0, [pc, #164]	@ (8006158 <_vfiprintf_r+0x220>)
 80060b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060b8:	2206      	movs	r2, #6
 80060ba:	f7fa f8a9 	bl	8000210 <memchr>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d03f      	beq.n	8006142 <_vfiprintf_r+0x20a>
 80060c2:	4b26      	ldr	r3, [pc, #152]	@ (800615c <_vfiprintf_r+0x224>)
 80060c4:	bb1b      	cbnz	r3, 800610e <_vfiprintf_r+0x1d6>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	3307      	adds	r3, #7
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	3308      	adds	r3, #8
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d4:	443b      	add	r3, r7
 80060d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060d8:	e76a      	b.n	8005fb0 <_vfiprintf_r+0x78>
 80060da:	fb0c 3202 	mla	r2, ip, r2, r3
 80060de:	460c      	mov	r4, r1
 80060e0:	2001      	movs	r0, #1
 80060e2:	e7a8      	b.n	8006036 <_vfiprintf_r+0xfe>
 80060e4:	2300      	movs	r3, #0
 80060e6:	3401      	adds	r4, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	4619      	mov	r1, r3
 80060ec:	f04f 0c0a 	mov.w	ip, #10
 80060f0:	4620      	mov	r0, r4
 80060f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f6:	3a30      	subs	r2, #48	@ 0x30
 80060f8:	2a09      	cmp	r2, #9
 80060fa:	d903      	bls.n	8006104 <_vfiprintf_r+0x1cc>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0c6      	beq.n	800608e <_vfiprintf_r+0x156>
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	e7c4      	b.n	800608e <_vfiprintf_r+0x156>
 8006104:	fb0c 2101 	mla	r1, ip, r1, r2
 8006108:	4604      	mov	r4, r0
 800610a:	2301      	movs	r3, #1
 800610c:	e7f0      	b.n	80060f0 <_vfiprintf_r+0x1b8>
 800610e:	ab03      	add	r3, sp, #12
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	462a      	mov	r2, r5
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <_vfiprintf_r+0x228>)
 8006116:	a904      	add	r1, sp, #16
 8006118:	4630      	mov	r0, r6
 800611a:	f3af 8000 	nop.w
 800611e:	4607      	mov	r7, r0
 8006120:	1c78      	adds	r0, r7, #1
 8006122:	d1d6      	bne.n	80060d2 <_vfiprintf_r+0x19a>
 8006124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	d405      	bmi.n	8006136 <_vfiprintf_r+0x1fe>
 800612a:	89ab      	ldrh	r3, [r5, #12]
 800612c:	059a      	lsls	r2, r3, #22
 800612e:	d402      	bmi.n	8006136 <_vfiprintf_r+0x1fe>
 8006130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006132:	f7ff fdcf 	bl	8005cd4 <__retarget_lock_release_recursive>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	065b      	lsls	r3, r3, #25
 800613a:	f53f af1f 	bmi.w	8005f7c <_vfiprintf_r+0x44>
 800613e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006140:	e71e      	b.n	8005f80 <_vfiprintf_r+0x48>
 8006142:	ab03      	add	r3, sp, #12
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	462a      	mov	r2, r5
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <_vfiprintf_r+0x228>)
 800614a:	a904      	add	r1, sp, #16
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f879 	bl	8006244 <_printf_i>
 8006152:	e7e4      	b.n	800611e <_vfiprintf_r+0x1e6>
 8006154:	080068c4 	.word	0x080068c4
 8006158:	080068ce 	.word	0x080068ce
 800615c:	00000000 	.word	0x00000000
 8006160:	08005f13 	.word	0x08005f13
 8006164:	080068ca 	.word	0x080068ca

08006168 <_printf_common>:
 8006168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	4616      	mov	r6, r2
 800616e:	4698      	mov	r8, r3
 8006170:	688a      	ldr	r2, [r1, #8]
 8006172:	690b      	ldr	r3, [r1, #16]
 8006174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006178:	4293      	cmp	r3, r2
 800617a:	bfb8      	it	lt
 800617c:	4613      	movlt	r3, r2
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006184:	4607      	mov	r7, r0
 8006186:	460c      	mov	r4, r1
 8006188:	b10a      	cbz	r2, 800618e <_printf_common+0x26>
 800618a:	3301      	adds	r3, #1
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	0699      	lsls	r1, r3, #26
 8006192:	bf42      	ittt	mi
 8006194:	6833      	ldrmi	r3, [r6, #0]
 8006196:	3302      	addmi	r3, #2
 8006198:	6033      	strmi	r3, [r6, #0]
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	f015 0506 	ands.w	r5, r5, #6
 80061a0:	d106      	bne.n	80061b0 <_printf_common+0x48>
 80061a2:	f104 0a19 	add.w	sl, r4, #25
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	6832      	ldr	r2, [r6, #0]
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dc26      	bgt.n	80061fe <_printf_common+0x96>
 80061b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	3b00      	subs	r3, #0
 80061b8:	bf18      	it	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	0692      	lsls	r2, r2, #26
 80061be:	d42b      	bmi.n	8006218 <_printf_common+0xb0>
 80061c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061c4:	4641      	mov	r1, r8
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c8      	blx	r9
 80061ca:	3001      	adds	r0, #1
 80061cc:	d01e      	beq.n	800620c <_printf_common+0xa4>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	6922      	ldr	r2, [r4, #16]
 80061d2:	f003 0306 	and.w	r3, r3, #6
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	bf02      	ittt	eq
 80061da:	68e5      	ldreq	r5, [r4, #12]
 80061dc:	6833      	ldreq	r3, [r6, #0]
 80061de:	1aed      	subeq	r5, r5, r3
 80061e0:	68a3      	ldr	r3, [r4, #8]
 80061e2:	bf0c      	ite	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	2500      	movne	r5, #0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bfc4      	itt	gt
 80061ee:	1a9b      	subgt	r3, r3, r2
 80061f0:	18ed      	addgt	r5, r5, r3
 80061f2:	2600      	movs	r6, #0
 80061f4:	341a      	adds	r4, #26
 80061f6:	42b5      	cmp	r5, r6
 80061f8:	d11a      	bne.n	8006230 <_printf_common+0xc8>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e008      	b.n	8006210 <_printf_common+0xa8>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4641      	mov	r1, r8
 8006204:	4638      	mov	r0, r7
 8006206:	47c8      	blx	r9
 8006208:	3001      	adds	r0, #1
 800620a:	d103      	bne.n	8006214 <_printf_common+0xac>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	3501      	adds	r5, #1
 8006216:	e7c6      	b.n	80061a6 <_printf_common+0x3e>
 8006218:	18e1      	adds	r1, r4, r3
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	2030      	movs	r0, #48	@ 0x30
 800621e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006222:	4422      	add	r2, r4
 8006224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800622c:	3302      	adds	r3, #2
 800622e:	e7c7      	b.n	80061c0 <_printf_common+0x58>
 8006230:	2301      	movs	r3, #1
 8006232:	4622      	mov	r2, r4
 8006234:	4641      	mov	r1, r8
 8006236:	4638      	mov	r0, r7
 8006238:	47c8      	blx	r9
 800623a:	3001      	adds	r0, #1
 800623c:	d0e6      	beq.n	800620c <_printf_common+0xa4>
 800623e:	3601      	adds	r6, #1
 8006240:	e7d9      	b.n	80061f6 <_printf_common+0x8e>
	...

08006244 <_printf_i>:
 8006244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	7e0f      	ldrb	r7, [r1, #24]
 800624a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800624c:	2f78      	cmp	r7, #120	@ 0x78
 800624e:	4691      	mov	r9, r2
 8006250:	4680      	mov	r8, r0
 8006252:	460c      	mov	r4, r1
 8006254:	469a      	mov	sl, r3
 8006256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800625a:	d807      	bhi.n	800626c <_printf_i+0x28>
 800625c:	2f62      	cmp	r7, #98	@ 0x62
 800625e:	d80a      	bhi.n	8006276 <_printf_i+0x32>
 8006260:	2f00      	cmp	r7, #0
 8006262:	f000 80d1 	beq.w	8006408 <_printf_i+0x1c4>
 8006266:	2f58      	cmp	r7, #88	@ 0x58
 8006268:	f000 80b8 	beq.w	80063dc <_printf_i+0x198>
 800626c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006274:	e03a      	b.n	80062ec <_printf_i+0xa8>
 8006276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800627a:	2b15      	cmp	r3, #21
 800627c:	d8f6      	bhi.n	800626c <_printf_i+0x28>
 800627e:	a101      	add	r1, pc, #4	@ (adr r1, 8006284 <_printf_i+0x40>)
 8006280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062f1 	.word	0x080062f1
 800628c:	0800626d 	.word	0x0800626d
 8006290:	0800626d 	.word	0x0800626d
 8006294:	0800626d 	.word	0x0800626d
 8006298:	0800626d 	.word	0x0800626d
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	0800626d 	.word	0x0800626d
 80062a4:	0800626d 	.word	0x0800626d
 80062a8:	0800626d 	.word	0x0800626d
 80062ac:	0800626d 	.word	0x0800626d
 80062b0:	080063ef 	.word	0x080063ef
 80062b4:	0800631b 	.word	0x0800631b
 80062b8:	080063a9 	.word	0x080063a9
 80062bc:	0800626d 	.word	0x0800626d
 80062c0:	0800626d 	.word	0x0800626d
 80062c4:	08006411 	.word	0x08006411
 80062c8:	0800626d 	.word	0x0800626d
 80062cc:	0800631b 	.word	0x0800631b
 80062d0:	0800626d 	.word	0x0800626d
 80062d4:	0800626d 	.word	0x0800626d
 80062d8:	080063b1 	.word	0x080063b1
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	1d1a      	adds	r2, r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6032      	str	r2, [r6, #0]
 80062e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062ec:	2301      	movs	r3, #1
 80062ee:	e09c      	b.n	800642a <_printf_i+0x1e6>
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	1d19      	adds	r1, r3, #4
 80062f6:	6031      	str	r1, [r6, #0]
 80062f8:	0606      	lsls	r6, r0, #24
 80062fa:	d501      	bpl.n	8006300 <_printf_i+0xbc>
 80062fc:	681d      	ldr	r5, [r3, #0]
 80062fe:	e003      	b.n	8006308 <_printf_i+0xc4>
 8006300:	0645      	lsls	r5, r0, #25
 8006302:	d5fb      	bpl.n	80062fc <_printf_i+0xb8>
 8006304:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006308:	2d00      	cmp	r5, #0
 800630a:	da03      	bge.n	8006314 <_printf_i+0xd0>
 800630c:	232d      	movs	r3, #45	@ 0x2d
 800630e:	426d      	negs	r5, r5
 8006310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006314:	4858      	ldr	r0, [pc, #352]	@ (8006478 <_printf_i+0x234>)
 8006316:	230a      	movs	r3, #10
 8006318:	e011      	b.n	800633e <_printf_i+0xfa>
 800631a:	6821      	ldr	r1, [r4, #0]
 800631c:	6833      	ldr	r3, [r6, #0]
 800631e:	0608      	lsls	r0, r1, #24
 8006320:	f853 5b04 	ldr.w	r5, [r3], #4
 8006324:	d402      	bmi.n	800632c <_printf_i+0xe8>
 8006326:	0649      	lsls	r1, r1, #25
 8006328:	bf48      	it	mi
 800632a:	b2ad      	uxthmi	r5, r5
 800632c:	2f6f      	cmp	r7, #111	@ 0x6f
 800632e:	4852      	ldr	r0, [pc, #328]	@ (8006478 <_printf_i+0x234>)
 8006330:	6033      	str	r3, [r6, #0]
 8006332:	bf14      	ite	ne
 8006334:	230a      	movne	r3, #10
 8006336:	2308      	moveq	r3, #8
 8006338:	2100      	movs	r1, #0
 800633a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800633e:	6866      	ldr	r6, [r4, #4]
 8006340:	60a6      	str	r6, [r4, #8]
 8006342:	2e00      	cmp	r6, #0
 8006344:	db05      	blt.n	8006352 <_printf_i+0x10e>
 8006346:	6821      	ldr	r1, [r4, #0]
 8006348:	432e      	orrs	r6, r5
 800634a:	f021 0104 	bic.w	r1, r1, #4
 800634e:	6021      	str	r1, [r4, #0]
 8006350:	d04b      	beq.n	80063ea <_printf_i+0x1a6>
 8006352:	4616      	mov	r6, r2
 8006354:	fbb5 f1f3 	udiv	r1, r5, r3
 8006358:	fb03 5711 	mls	r7, r3, r1, r5
 800635c:	5dc7      	ldrb	r7, [r0, r7]
 800635e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006362:	462f      	mov	r7, r5
 8006364:	42bb      	cmp	r3, r7
 8006366:	460d      	mov	r5, r1
 8006368:	d9f4      	bls.n	8006354 <_printf_i+0x110>
 800636a:	2b08      	cmp	r3, #8
 800636c:	d10b      	bne.n	8006386 <_printf_i+0x142>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	07df      	lsls	r7, r3, #31
 8006372:	d508      	bpl.n	8006386 <_printf_i+0x142>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	6861      	ldr	r1, [r4, #4]
 8006378:	4299      	cmp	r1, r3
 800637a:	bfde      	ittt	le
 800637c:	2330      	movle	r3, #48	@ 0x30
 800637e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006382:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006386:	1b92      	subs	r2, r2, r6
 8006388:	6122      	str	r2, [r4, #16]
 800638a:	f8cd a000 	str.w	sl, [sp]
 800638e:	464b      	mov	r3, r9
 8006390:	aa03      	add	r2, sp, #12
 8006392:	4621      	mov	r1, r4
 8006394:	4640      	mov	r0, r8
 8006396:	f7ff fee7 	bl	8006168 <_printf_common>
 800639a:	3001      	adds	r0, #1
 800639c:	d14a      	bne.n	8006434 <_printf_i+0x1f0>
 800639e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063a2:	b004      	add	sp, #16
 80063a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	f043 0320 	orr.w	r3, r3, #32
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	4832      	ldr	r0, [pc, #200]	@ (800647c <_printf_i+0x238>)
 80063b2:	2778      	movs	r7, #120	@ 0x78
 80063b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	6831      	ldr	r1, [r6, #0]
 80063bc:	061f      	lsls	r7, r3, #24
 80063be:	f851 5b04 	ldr.w	r5, [r1], #4
 80063c2:	d402      	bmi.n	80063ca <_printf_i+0x186>
 80063c4:	065f      	lsls	r7, r3, #25
 80063c6:	bf48      	it	mi
 80063c8:	b2ad      	uxthmi	r5, r5
 80063ca:	6031      	str	r1, [r6, #0]
 80063cc:	07d9      	lsls	r1, r3, #31
 80063ce:	bf44      	itt	mi
 80063d0:	f043 0320 	orrmi.w	r3, r3, #32
 80063d4:	6023      	strmi	r3, [r4, #0]
 80063d6:	b11d      	cbz	r5, 80063e0 <_printf_i+0x19c>
 80063d8:	2310      	movs	r3, #16
 80063da:	e7ad      	b.n	8006338 <_printf_i+0xf4>
 80063dc:	4826      	ldr	r0, [pc, #152]	@ (8006478 <_printf_i+0x234>)
 80063de:	e7e9      	b.n	80063b4 <_printf_i+0x170>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	f023 0320 	bic.w	r3, r3, #32
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	e7f6      	b.n	80063d8 <_printf_i+0x194>
 80063ea:	4616      	mov	r6, r2
 80063ec:	e7bd      	b.n	800636a <_printf_i+0x126>
 80063ee:	6833      	ldr	r3, [r6, #0]
 80063f0:	6825      	ldr	r5, [r4, #0]
 80063f2:	6961      	ldr	r1, [r4, #20]
 80063f4:	1d18      	adds	r0, r3, #4
 80063f6:	6030      	str	r0, [r6, #0]
 80063f8:	062e      	lsls	r6, r5, #24
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	d501      	bpl.n	8006402 <_printf_i+0x1be>
 80063fe:	6019      	str	r1, [r3, #0]
 8006400:	e002      	b.n	8006408 <_printf_i+0x1c4>
 8006402:	0668      	lsls	r0, r5, #25
 8006404:	d5fb      	bpl.n	80063fe <_printf_i+0x1ba>
 8006406:	8019      	strh	r1, [r3, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	4616      	mov	r6, r2
 800640e:	e7bc      	b.n	800638a <_printf_i+0x146>
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	1d1a      	adds	r2, r3, #4
 8006414:	6032      	str	r2, [r6, #0]
 8006416:	681e      	ldr	r6, [r3, #0]
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	2100      	movs	r1, #0
 800641c:	4630      	mov	r0, r6
 800641e:	f7f9 fef7 	bl	8000210 <memchr>
 8006422:	b108      	cbz	r0, 8006428 <_printf_i+0x1e4>
 8006424:	1b80      	subs	r0, r0, r6
 8006426:	6060      	str	r0, [r4, #4]
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	2300      	movs	r3, #0
 800642e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006432:	e7aa      	b.n	800638a <_printf_i+0x146>
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	4632      	mov	r2, r6
 8006438:	4649      	mov	r1, r9
 800643a:	4640      	mov	r0, r8
 800643c:	47d0      	blx	sl
 800643e:	3001      	adds	r0, #1
 8006440:	d0ad      	beq.n	800639e <_printf_i+0x15a>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	079b      	lsls	r3, r3, #30
 8006446:	d413      	bmi.n	8006470 <_printf_i+0x22c>
 8006448:	68e0      	ldr	r0, [r4, #12]
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	4298      	cmp	r0, r3
 800644e:	bfb8      	it	lt
 8006450:	4618      	movlt	r0, r3
 8006452:	e7a6      	b.n	80063a2 <_printf_i+0x15e>
 8006454:	2301      	movs	r3, #1
 8006456:	4632      	mov	r2, r6
 8006458:	4649      	mov	r1, r9
 800645a:	4640      	mov	r0, r8
 800645c:	47d0      	blx	sl
 800645e:	3001      	adds	r0, #1
 8006460:	d09d      	beq.n	800639e <_printf_i+0x15a>
 8006462:	3501      	adds	r5, #1
 8006464:	68e3      	ldr	r3, [r4, #12]
 8006466:	9903      	ldr	r1, [sp, #12]
 8006468:	1a5b      	subs	r3, r3, r1
 800646a:	42ab      	cmp	r3, r5
 800646c:	dcf2      	bgt.n	8006454 <_printf_i+0x210>
 800646e:	e7eb      	b.n	8006448 <_printf_i+0x204>
 8006470:	2500      	movs	r5, #0
 8006472:	f104 0619 	add.w	r6, r4, #25
 8006476:	e7f5      	b.n	8006464 <_printf_i+0x220>
 8006478:	080068d5 	.word	0x080068d5
 800647c:	080068e6 	.word	0x080068e6

08006480 <__sflush_r>:
 8006480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	0716      	lsls	r6, r2, #28
 800648a:	4605      	mov	r5, r0
 800648c:	460c      	mov	r4, r1
 800648e:	d454      	bmi.n	800653a <__sflush_r+0xba>
 8006490:	684b      	ldr	r3, [r1, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	dc02      	bgt.n	800649c <__sflush_r+0x1c>
 8006496:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	dd48      	ble.n	800652e <__sflush_r+0xae>
 800649c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d045      	beq.n	800652e <__sflush_r+0xae>
 80064a2:	2300      	movs	r3, #0
 80064a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064a8:	682f      	ldr	r7, [r5, #0]
 80064aa:	6a21      	ldr	r1, [r4, #32]
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	d030      	beq.n	8006512 <__sflush_r+0x92>
 80064b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	0759      	lsls	r1, r3, #29
 80064b6:	d505      	bpl.n	80064c4 <__sflush_r+0x44>
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064be:	b10b      	cbz	r3, 80064c4 <__sflush_r+0x44>
 80064c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	2300      	movs	r3, #0
 80064c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064c8:	6a21      	ldr	r1, [r4, #32]
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b0      	blx	r6
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	d106      	bne.n	80064e2 <__sflush_r+0x62>
 80064d4:	6829      	ldr	r1, [r5, #0]
 80064d6:	291d      	cmp	r1, #29
 80064d8:	d82b      	bhi.n	8006532 <__sflush_r+0xb2>
 80064da:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <__sflush_r+0x104>)
 80064dc:	40ca      	lsrs	r2, r1
 80064de:	07d6      	lsls	r6, r2, #31
 80064e0:	d527      	bpl.n	8006532 <__sflush_r+0xb2>
 80064e2:	2200      	movs	r2, #0
 80064e4:	6062      	str	r2, [r4, #4]
 80064e6:	04d9      	lsls	r1, r3, #19
 80064e8:	6922      	ldr	r2, [r4, #16]
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	d504      	bpl.n	80064f8 <__sflush_r+0x78>
 80064ee:	1c42      	adds	r2, r0, #1
 80064f0:	d101      	bne.n	80064f6 <__sflush_r+0x76>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	b903      	cbnz	r3, 80064f8 <__sflush_r+0x78>
 80064f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80064f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	b1b9      	cbz	r1, 800652e <__sflush_r+0xae>
 80064fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006502:	4299      	cmp	r1, r3
 8006504:	d002      	beq.n	800650c <__sflush_r+0x8c>
 8006506:	4628      	mov	r0, r5
 8006508:	f7ff fbf4 	bl	8005cf4 <_free_r>
 800650c:	2300      	movs	r3, #0
 800650e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006510:	e00d      	b.n	800652e <__sflush_r+0xae>
 8006512:	2301      	movs	r3, #1
 8006514:	4628      	mov	r0, r5
 8006516:	47b0      	blx	r6
 8006518:	4602      	mov	r2, r0
 800651a:	1c50      	adds	r0, r2, #1
 800651c:	d1c9      	bne.n	80064b2 <__sflush_r+0x32>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0c6      	beq.n	80064b2 <__sflush_r+0x32>
 8006524:	2b1d      	cmp	r3, #29
 8006526:	d001      	beq.n	800652c <__sflush_r+0xac>
 8006528:	2b16      	cmp	r3, #22
 800652a:	d11e      	bne.n	800656a <__sflush_r+0xea>
 800652c:	602f      	str	r7, [r5, #0]
 800652e:	2000      	movs	r0, #0
 8006530:	e022      	b.n	8006578 <__sflush_r+0xf8>
 8006532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006536:	b21b      	sxth	r3, r3
 8006538:	e01b      	b.n	8006572 <__sflush_r+0xf2>
 800653a:	690f      	ldr	r7, [r1, #16]
 800653c:	2f00      	cmp	r7, #0
 800653e:	d0f6      	beq.n	800652e <__sflush_r+0xae>
 8006540:	0793      	lsls	r3, r2, #30
 8006542:	680e      	ldr	r6, [r1, #0]
 8006544:	bf08      	it	eq
 8006546:	694b      	ldreq	r3, [r1, #20]
 8006548:	600f      	str	r7, [r1, #0]
 800654a:	bf18      	it	ne
 800654c:	2300      	movne	r3, #0
 800654e:	eba6 0807 	sub.w	r8, r6, r7
 8006552:	608b      	str	r3, [r1, #8]
 8006554:	f1b8 0f00 	cmp.w	r8, #0
 8006558:	dde9      	ble.n	800652e <__sflush_r+0xae>
 800655a:	6a21      	ldr	r1, [r4, #32]
 800655c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800655e:	4643      	mov	r3, r8
 8006560:	463a      	mov	r2, r7
 8006562:	4628      	mov	r0, r5
 8006564:	47b0      	blx	r6
 8006566:	2800      	cmp	r0, #0
 8006568:	dc08      	bgt.n	800657c <__sflush_r+0xfc>
 800656a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800657c:	4407      	add	r7, r0
 800657e:	eba8 0800 	sub.w	r8, r8, r0
 8006582:	e7e7      	b.n	8006554 <__sflush_r+0xd4>
 8006584:	20400001 	.word	0x20400001

08006588 <_fflush_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	690b      	ldr	r3, [r1, #16]
 800658c:	4605      	mov	r5, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b913      	cbnz	r3, 8006598 <_fflush_r+0x10>
 8006592:	2500      	movs	r5, #0
 8006594:	4628      	mov	r0, r5
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	b118      	cbz	r0, 80065a2 <_fflush_r+0x1a>
 800659a:	6a03      	ldr	r3, [r0, #32]
 800659c:	b90b      	cbnz	r3, 80065a2 <_fflush_r+0x1a>
 800659e:	f7ff fa93 	bl	8005ac8 <__sinit>
 80065a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f3      	beq.n	8006592 <_fflush_r+0xa>
 80065aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065ac:	07d0      	lsls	r0, r2, #31
 80065ae:	d404      	bmi.n	80065ba <_fflush_r+0x32>
 80065b0:	0599      	lsls	r1, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_fflush_r+0x32>
 80065b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065b6:	f7ff fb8c 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 80065ba:	4628      	mov	r0, r5
 80065bc:	4621      	mov	r1, r4
 80065be:	f7ff ff5f 	bl	8006480 <__sflush_r>
 80065c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065c4:	07da      	lsls	r2, r3, #31
 80065c6:	4605      	mov	r5, r0
 80065c8:	d4e4      	bmi.n	8006594 <_fflush_r+0xc>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	059b      	lsls	r3, r3, #22
 80065ce:	d4e1      	bmi.n	8006594 <_fflush_r+0xc>
 80065d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d2:	f7ff fb7f 	bl	8005cd4 <__retarget_lock_release_recursive>
 80065d6:	e7dd      	b.n	8006594 <_fflush_r+0xc>

080065d8 <__swbuf_r>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	460e      	mov	r6, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	4605      	mov	r5, r0
 80065e0:	b118      	cbz	r0, 80065ea <__swbuf_r+0x12>
 80065e2:	6a03      	ldr	r3, [r0, #32]
 80065e4:	b90b      	cbnz	r3, 80065ea <__swbuf_r+0x12>
 80065e6:	f7ff fa6f 	bl	8005ac8 <__sinit>
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	071a      	lsls	r2, r3, #28
 80065f2:	d501      	bpl.n	80065f8 <__swbuf_r+0x20>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	b943      	cbnz	r3, 800660a <__swbuf_r+0x32>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f82a 	bl	8006654 <__swsetup_r>
 8006600:	b118      	cbz	r0, 800660a <__swbuf_r+0x32>
 8006602:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006606:	4638      	mov	r0, r7
 8006608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	6922      	ldr	r2, [r4, #16]
 800660e:	1a98      	subs	r0, r3, r2
 8006610:	6963      	ldr	r3, [r4, #20]
 8006612:	b2f6      	uxtb	r6, r6
 8006614:	4283      	cmp	r3, r0
 8006616:	4637      	mov	r7, r6
 8006618:	dc05      	bgt.n	8006626 <__swbuf_r+0x4e>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f7ff ffb3 	bl	8006588 <_fflush_r>
 8006622:	2800      	cmp	r0, #0
 8006624:	d1ed      	bne.n	8006602 <__swbuf_r+0x2a>
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	3b01      	subs	r3, #1
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	701e      	strb	r6, [r3, #0]
 8006634:	6962      	ldr	r2, [r4, #20]
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	429a      	cmp	r2, r3
 800663a:	d004      	beq.n	8006646 <__swbuf_r+0x6e>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	07db      	lsls	r3, r3, #31
 8006640:	d5e1      	bpl.n	8006606 <__swbuf_r+0x2e>
 8006642:	2e0a      	cmp	r6, #10
 8006644:	d1df      	bne.n	8006606 <__swbuf_r+0x2e>
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff ff9d 	bl	8006588 <_fflush_r>
 800664e:	2800      	cmp	r0, #0
 8006650:	d0d9      	beq.n	8006606 <__swbuf_r+0x2e>
 8006652:	e7d6      	b.n	8006602 <__swbuf_r+0x2a>

08006654 <__swsetup_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4b29      	ldr	r3, [pc, #164]	@ (80066fc <__swsetup_r+0xa8>)
 8006658:	4605      	mov	r5, r0
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	460c      	mov	r4, r1
 800665e:	b118      	cbz	r0, 8006668 <__swsetup_r+0x14>
 8006660:	6a03      	ldr	r3, [r0, #32]
 8006662:	b90b      	cbnz	r3, 8006668 <__swsetup_r+0x14>
 8006664:	f7ff fa30 	bl	8005ac8 <__sinit>
 8006668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666c:	0719      	lsls	r1, r3, #28
 800666e:	d422      	bmi.n	80066b6 <__swsetup_r+0x62>
 8006670:	06da      	lsls	r2, r3, #27
 8006672:	d407      	bmi.n	8006684 <__swsetup_r+0x30>
 8006674:	2209      	movs	r2, #9
 8006676:	602a      	str	r2, [r5, #0]
 8006678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006682:	e033      	b.n	80066ec <__swsetup_r+0x98>
 8006684:	0758      	lsls	r0, r3, #29
 8006686:	d512      	bpl.n	80066ae <__swsetup_r+0x5a>
 8006688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800668a:	b141      	cbz	r1, 800669e <__swsetup_r+0x4a>
 800668c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006690:	4299      	cmp	r1, r3
 8006692:	d002      	beq.n	800669a <__swsetup_r+0x46>
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff fb2d 	bl	8005cf4 <_free_r>
 800669a:	2300      	movs	r3, #0
 800669c:	6363      	str	r3, [r4, #52]	@ 0x34
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	2300      	movs	r3, #0
 80066a8:	6063      	str	r3, [r4, #4]
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	b94b      	cbnz	r3, 80066ce <__swsetup_r+0x7a>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c4:	d003      	beq.n	80066ce <__swsetup_r+0x7a>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f84f 	bl	800676c <__smakebuf_r>
 80066ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d2:	f013 0201 	ands.w	r2, r3, #1
 80066d6:	d00a      	beq.n	80066ee <__swsetup_r+0x9a>
 80066d8:	2200      	movs	r2, #0
 80066da:	60a2      	str	r2, [r4, #8]
 80066dc:	6962      	ldr	r2, [r4, #20]
 80066de:	4252      	negs	r2, r2
 80066e0:	61a2      	str	r2, [r4, #24]
 80066e2:	6922      	ldr	r2, [r4, #16]
 80066e4:	b942      	cbnz	r2, 80066f8 <__swsetup_r+0xa4>
 80066e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066ea:	d1c5      	bne.n	8006678 <__swsetup_r+0x24>
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	0799      	lsls	r1, r3, #30
 80066f0:	bf58      	it	pl
 80066f2:	6962      	ldrpl	r2, [r4, #20]
 80066f4:	60a2      	str	r2, [r4, #8]
 80066f6:	e7f4      	b.n	80066e2 <__swsetup_r+0x8e>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e7f7      	b.n	80066ec <__swsetup_r+0x98>
 80066fc:	2000001c 	.word	0x2000001c

08006700 <_sbrk_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	@ (800671c <_sbrk_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fa fdfa 	bl	8001304 <_sbrk>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_sbrk_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_sbrk_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20004200 	.word	0x20004200

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2900      	cmp	r1, #0
 800672a:	b096      	sub	sp, #88	@ 0x58
 800672c:	4615      	mov	r5, r2
 800672e:	461e      	mov	r6, r3
 8006730:	da0d      	bge.n	800674e <__swhatbuf_r+0x2e>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	bf14      	ite	ne
 800673e:	2340      	movne	r3, #64	@ 0x40
 8006740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006744:	2000      	movs	r0, #0
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	b016      	add	sp, #88	@ 0x58
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	466a      	mov	r2, sp
 8006750:	f000 f848 	bl	80067e4 <_fstat_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	dbec      	blt.n	8006732 <__swhatbuf_r+0x12>
 8006758:	9901      	ldr	r1, [sp, #4]
 800675a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800675e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006762:	4259      	negs	r1, r3
 8006764:	4159      	adcs	r1, r3
 8006766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800676a:	e7eb      	b.n	8006744 <__swhatbuf_r+0x24>

0800676c <__smakebuf_r>:
 800676c:	898b      	ldrh	r3, [r1, #12]
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	079d      	lsls	r5, r3, #30
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	d507      	bpl.n	8006788 <__smakebuf_r+0x1c>
 8006778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2301      	movs	r3, #1
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	ab01      	add	r3, sp, #4
 800678a:	466a      	mov	r2, sp
 800678c:	f7ff ffc8 	bl	8006720 <__swhatbuf_r>
 8006790:	9f00      	ldr	r7, [sp, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff fb18 	bl	8005dcc <_malloc_r>
 800679c:	b948      	cbnz	r0, 80067b2 <__smakebuf_r+0x46>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	059a      	lsls	r2, r3, #22
 80067a4:	d4ee      	bmi.n	8006784 <__smakebuf_r+0x18>
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	e7e2      	b.n	8006778 <__smakebuf_r+0xc>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	6020      	str	r0, [r4, #0]
 80067b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067c2:	b15b      	cbz	r3, 80067dc <__smakebuf_r+0x70>
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f81d 	bl	8006808 <_isatty_r>
 80067ce:	b128      	cbz	r0, 80067dc <__smakebuf_r+0x70>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	431d      	orrs	r5, r3
 80067e0:	81a5      	strh	r5, [r4, #12]
 80067e2:	e7cf      	b.n	8006784 <__smakebuf_r+0x18>

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	@ (8006804 <_fstat_r+0x20>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fa fd5e 	bl	80012b2 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	20004200 	.word	0x20004200

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_isatty_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fd5d 	bl	80012d2 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20004200 	.word	0x20004200

08006828 <_init>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr

08006834 <_fini>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr
