
TP_FreeRTOS_CROCE_MONNIER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b1c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff4  08007ff4  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ff4  08007ff4  00008ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ffc  08007ffc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008000  08008000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008004  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027c58  2000006c  08008070  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20027cc4  08008070  0000acc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c0  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ac  00000000  00000000  0001c95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  00020d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dce  00000000  00000000  00021876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b4a  00000000  00000000  0004a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d7a  00000000  00000000  0005d18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ff08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  0014ff4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00154428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cd4 	.word	0x08007cd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007cd4 	.word	0x08007cd4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80005e8:	887a      	ldrh	r2, [r7, #2]
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <drv_uart1_receive+0x24>)
 80005f2:	f003 f84a 	bl	800368a <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200008a0 	.word	0x200008a0

08000604 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000610:	887a      	ldrh	r2, [r7, #2]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <drv_uart1_transmit+0x24>)
 800061a:	f002 ffad 	bl	8003578 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200008a0 	.word	0x200008a0

0800062c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <vApplicationGetIdleTaskMemory+0x2c>)
 800063c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	4a06      	ldr	r2, [pc, #24]	@ (800065c <vApplicationGetIdleTaskMemory+0x30>)
 8000642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200002e0 	.word	0x200002e0
 800065c:	20000334 	.word	0x20000334

08000660 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_FREERTOS_Init+0x30>)
 8000668:	1d3c      	adds	r4, r7, #4
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f004 f84c 	bl	800471a <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a03      	ldr	r2, [pc, #12]	@ (8000694 <MX_FREERTOS_Init+0x34>)
 8000686:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bdb0      	pop	{r4, r5, r7, pc}
 8000690:	08007cf8 	.word	0x08007cf8
 8000694:	20000088 	.word	0x20000088

08000698 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f004 f886 	bl	80047b2 <osDelay>
 80006a6:	e7fb      	b.n	80006a0 <StartDefaultTask+0x8>

080006a8 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	@ 0x40
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	4bae      	ldr	r3, [pc, #696]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4aad      	ldr	r2, [pc, #692]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006c4:	f043 0310 	orr.w	r3, r3, #16
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4bab      	ldr	r3, [pc, #684]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	4ba8      	ldr	r3, [pc, #672]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4aa7      	ldr	r2, [pc, #668]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4ba5      	ldr	r3, [pc, #660]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4ba2      	ldr	r3, [pc, #648]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4aa1      	ldr	r2, [pc, #644]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b9f      	ldr	r3, [pc, #636]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	623b      	str	r3, [r7, #32]
 8000704:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	4b9c      	ldr	r3, [pc, #624]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a9b      	ldr	r2, [pc, #620]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b99      	ldr	r3, [pc, #612]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	61fb      	str	r3, [r7, #28]
 800071c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b96      	ldr	r3, [pc, #600]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a95      	ldr	r2, [pc, #596]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b93      	ldr	r3, [pc, #588]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b90      	ldr	r3, [pc, #576]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a8f      	ldr	r2, [pc, #572]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b8d      	ldr	r3, [pc, #564]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800074e:	4b8a      	ldr	r3, [pc, #552]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a89      	ldr	r2, [pc, #548]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b87      	ldr	r3, [pc, #540]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000766:	4b84      	ldr	r3, [pc, #528]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a83      	ldr	r2, [pc, #524]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800076c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b81      	ldr	r3, [pc, #516]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800077e:	4b7e      	ldr	r3, [pc, #504]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a7d      	ldr	r2, [pc, #500]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b7b      	ldr	r3, [pc, #492]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	4b78      	ldr	r3, [pc, #480]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a77      	ldr	r2, [pc, #476]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 800079c:	f043 0320 	orr.w	r3, r3, #32
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b75      	ldr	r3, [pc, #468]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	4b72      	ldr	r3, [pc, #456]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a71      	ldr	r2, [pc, #452]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000978 <MX_GPIO_Init+0x2d0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2120      	movs	r1, #32
 80007ca:	486c      	ldr	r0, [pc, #432]	@ (800097c <MX_GPIO_Init+0x2d4>)
 80007cc:	f001 fd88 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f241 010c 	movw	r1, #4108	@ 0x100c
 80007d6:	486a      	ldr	r0, [pc, #424]	@ (8000980 <MX_GPIO_Init+0x2d8>)
 80007d8:	f001 fd82 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2108      	movs	r1, #8
 80007e0:	4868      	ldr	r0, [pc, #416]	@ (8000984 <MX_GPIO_Init+0x2dc>)
 80007e2:	f001 fd7d 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	4865      	ldr	r0, [pc, #404]	@ (8000980 <MX_GPIO_Init+0x2d8>)
 80007ec:	f001 fd78 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f6:	4864      	ldr	r0, [pc, #400]	@ (8000988 <MX_GPIO_Init+0x2e0>)
 80007f8:	f001 fd72 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	21c8      	movs	r1, #200	@ 0xc8
 8000800:	4862      	ldr	r0, [pc, #392]	@ (800098c <MX_GPIO_Init+0x2e4>)
 8000802:	f001 fd6d 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000806:	2310      	movs	r3, #16
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000816:	230e      	movs	r3, #14
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	485b      	ldr	r0, [pc, #364]	@ (8000990 <MX_GPIO_Init+0x2e8>)
 8000822:	f001 fbb1 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	4855      	ldr	r0, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x2e8>)
 800083a:	f001 fba5 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800083e:	2304      	movs	r3, #4
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800084e:	2309      	movs	r3, #9
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000856:	4619      	mov	r1, r3
 8000858:	484d      	ldr	r0, [pc, #308]	@ (8000990 <MX_GPIO_Init+0x2e8>)
 800085a:	f001 fb95 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800085e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000874:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000878:	4619      	mov	r1, r3
 800087a:	4844      	ldr	r0, [pc, #272]	@ (800098c <MX_GPIO_Init+0x2e4>)
 800087c:	f001 fb84 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000880:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000892:	230c      	movs	r3, #12
 8000894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800089a:	4619      	mov	r1, r3
 800089c:	483c      	ldr	r0, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x2e8>)
 800089e:	f001 fb73 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80008a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b4:	2304      	movs	r3, #4
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008bc:	4619      	mov	r1, r3
 80008be:	4835      	ldr	r0, [pc, #212]	@ (8000994 <MX_GPIO_Init+0x2ec>)
 80008c0:	f001 fb62 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80008c4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008d6:	230a      	movs	r3, #10
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008de:	4619      	mov	r1, r3
 80008e0:	482c      	ldr	r0, [pc, #176]	@ (8000994 <MX_GPIO_Init+0x2ec>)
 80008e2:	f001 fb51 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008f6:	2302      	movs	r3, #2
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008fe:	4619      	mov	r1, r3
 8000900:	4824      	ldr	r0, [pc, #144]	@ (8000994 <MX_GPIO_Init+0x2ec>)
 8000902:	f001 fb41 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000916:	2308      	movs	r3, #8
 8000918:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091e:	4619      	mov	r1, r3
 8000920:	4816      	ldr	r0, [pc, #88]	@ (800097c <MX_GPIO_Init+0x2d4>)
 8000922:	f001 fb31 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000926:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000938:	230c      	movs	r3, #12
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000940:	4619      	mov	r1, r3
 8000942:	4815      	ldr	r0, [pc, #84]	@ (8000998 <MX_GPIO_Init+0x2f0>)
 8000944:	f001 fb20 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800095a:	2301      	movs	r3, #1
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_GPIO_Init+0x2f4>)
 8000966:	f001 fb0f 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800096a:	2360      	movs	r3, #96	@ 0x60
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	e014      	b.n	80009a0 <MX_GPIO_Init+0x2f8>
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40022000 	.word	0x40022000
 8000984:	40022800 	.word	0x40022800
 8000988:	40021c00 	.word	0x40021c00
 800098c:	40021800 	.word	0x40021800
 8000990:	40021000 	.word	0x40021000
 8000994:	40020400 	.word	0x40020400
 8000998:	40020800 	.word	0x40020800
 800099c:	40020000 	.word	0x40020000
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009a6:	230d      	movs	r3, #13
 80009a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	48bc      	ldr	r0, [pc, #752]	@ (8000ca4 <MX_GPIO_Init+0x5fc>)
 80009b2:	f001 fae9 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80009b6:	2340      	movs	r3, #64	@ 0x40
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009c6:	230a      	movs	r3, #10
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ce:	4619      	mov	r1, r3
 80009d0:	48b5      	ldr	r0, [pc, #724]	@ (8000ca8 <MX_GPIO_Init+0x600>)
 80009d2:	f001 fad9 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80009d6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e8:	230c      	movs	r3, #12
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	48ae      	ldr	r0, [pc, #696]	@ (8000cac <MX_GPIO_Init+0x604>)
 80009f4:	f001 fac8 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009f8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0a:	230e      	movs	r3, #14
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a12:	4619      	mov	r1, r3
 8000a14:	48a6      	ldr	r0, [pc, #664]	@ (8000cb0 <MX_GPIO_Init+0x608>)
 8000a16:	f001 fab7 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	48a0      	ldr	r0, [pc, #640]	@ (8000cb0 <MX_GPIO_Init+0x608>)
 8000a30:	f001 faaa 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a38:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	489a      	ldr	r0, [pc, #616]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000a4a:	f001 fa9d 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a4e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4892      	ldr	r0, [pc, #584]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000a6c:	f001 fa8c 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a82:	230a      	movs	r3, #10
 8000a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	488a      	ldr	r0, [pc, #552]	@ (8000cb8 <MX_GPIO_Init+0x610>)
 8000a8e:	f001 fa7b 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a92:	23f0      	movs	r3, #240	@ 0xf0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4883      	ldr	r0, [pc, #524]	@ (8000cbc <MX_GPIO_Init+0x614>)
 8000aae:	f001 fa6b 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000ab2:	23f7      	movs	r3, #247	@ 0xf7
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac2:	230e      	movs	r3, #14
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	487c      	ldr	r0, [pc, #496]	@ (8000cc0 <MX_GPIO_Init+0x618>)
 8000ace:	f001 fa5b 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aec:	4619      	mov	r1, r3
 8000aee:	486f      	ldr	r0, [pc, #444]	@ (8000cac <MX_GPIO_Init+0x604>)
 8000af0:	f001 fa4a 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b06:	230a      	movs	r3, #10
 8000b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4866      	ldr	r0, [pc, #408]	@ (8000cac <MX_GPIO_Init+0x604>)
 8000b12:	f001 fa39 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b16:	2320      	movs	r3, #32
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4861      	ldr	r0, [pc, #388]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000b2e:	f001 fa2b 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b42:	230d      	movs	r3, #13
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4859      	ldr	r0, [pc, #356]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000b4e:	f001 fa1b 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD2_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD2_Pin|LCD_DISP_Pin;
 8000b52:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4854      	ldr	r0, [pc, #336]	@ (8000cbc <MX_GPIO_Init+0x614>)
 8000b6c:	f001 fa0c 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b82:	4619      	mov	r1, r3
 8000b84:	484f      	ldr	r0, [pc, #316]	@ (8000cc4 <MX_GPIO_Init+0x61c>)
 8000b86:	f001 f9ff 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b8a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <MX_GPIO_Init+0x620>)
 8000ba8:	f001 f9ee 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000bac:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bbe:	230e      	movs	r3, #14
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483c      	ldr	r0, [pc, #240]	@ (8000cbc <MX_GPIO_Init+0x614>)
 8000bca:	f001 f9dd 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	4836      	ldr	r0, [pc, #216]	@ (8000cc0 <MX_GPIO_Init+0x618>)
 8000be6:	f001 f9cf 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bfc:	230d      	movs	r3, #13
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4829      	ldr	r0, [pc, #164]	@ (8000cac <MX_GPIO_Init+0x604>)
 8000c08:	f001 f9be 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000c20:	f001 f9b2 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000c24:	2304      	movs	r3, #4
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c34:	230c      	movs	r3, #12
 8000c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481d      	ldr	r0, [pc, #116]	@ (8000cb4 <MX_GPIO_Init+0x60c>)
 8000c40:	f001 f9a2 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c44:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <MX_GPIO_Init+0x624>)
 8000c5a:	f001 f995 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	4815      	ldr	r0, [pc, #84]	@ (8000ccc <MX_GPIO_Init+0x624>)
 8000c78:	f001 f986 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c7c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c8e:	230d      	movs	r3, #13
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <MX_GPIO_Init+0x624>)
 8000c9a:	f001 f975 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e016      	b.n	8000cd0 <MX_GPIO_Init+0x628>
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40021800 	.word	0x40021800
 8000cb0:	40022400 	.word	0x40022400
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40022000 	.word	0x40022000
 8000cc0:	40022800 	.word	0x40022800
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40021400 	.word	0x40021400
 8000ccc:	40021c00 	.word	0x40021c00
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	48a4      	ldr	r0, [pc, #656]	@ (8000f7c <MX_GPIO_Init+0x8d4>)
 8000cea:	f001 f94d 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	489e      	ldr	r0, [pc, #632]	@ (8000f7c <MX_GPIO_Init+0x8d4>)
 8000d04:	f001 f940 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4896      	ldr	r0, [pc, #600]	@ (8000f80 <MX_GPIO_Init+0x8d8>)
 8000d26:	f001 f92f 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	488e      	ldr	r0, [pc, #568]	@ (8000f7c <MX_GPIO_Init+0x8d4>)
 8000d42:	f001 f921 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d46:	23c0      	movs	r3, #192	@ 0xc0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d56:	2308      	movs	r3, #8
 8000d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4888      	ldr	r0, [pc, #544]	@ (8000f84 <MX_GPIO_Init+0x8dc>)
 8000d62:	f001 f911 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d66:	2310      	movs	r3, #16
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d76:	230a      	movs	r3, #10
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4881      	ldr	r0, [pc, #516]	@ (8000f88 <MX_GPIO_Init+0x8e0>)
 8000d82:	f001 f901 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d86:	2328      	movs	r3, #40	@ 0x28
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d96:	230c      	movs	r3, #12
 8000d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4879      	ldr	r0, [pc, #484]	@ (8000f88 <MX_GPIO_Init+0x8e0>)
 8000da2:	f001 f8f1 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000da6:	23c8      	movs	r3, #200	@ 0xc8
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4873      	ldr	r0, [pc, #460]	@ (8000f8c <MX_GPIO_Init+0x8e4>)
 8000dbe:	f001 f8e3 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000dc2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	486e      	ldr	r0, [pc, #440]	@ (8000f90 <MX_GPIO_Init+0x8e8>)
 8000dd8:	f001 f8d6 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dec:	230c      	movs	r3, #12
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4863      	ldr	r0, [pc, #396]	@ (8000f84 <MX_GPIO_Init+0x8dc>)
 8000df8:	f001 f8c6 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	485b      	ldr	r0, [pc, #364]	@ (8000f84 <MX_GPIO_Init+0x8dc>)
 8000e18:	f001 f8b6 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e1c:	2332      	movs	r3, #50	@ 0x32
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	4853      	ldr	r0, [pc, #332]	@ (8000f84 <MX_GPIO_Init+0x8dc>)
 8000e38:	f001 f8a6 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e4c:	2309      	movs	r3, #9
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	484f      	ldr	r0, [pc, #316]	@ (8000f94 <MX_GPIO_Init+0x8ec>)
 8000e58:	f001 f896 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e5c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e76:	4619      	mov	r1, r3
 8000e78:	4847      	ldr	r0, [pc, #284]	@ (8000f98 <MX_GPIO_Init+0x8f0>)
 8000e7a:	f001 f885 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	483e      	ldr	r0, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x8e4>)
 8000e92:	f001 f879 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e96:	2386      	movs	r3, #134	@ 0x86
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4833      	ldr	r0, [pc, #204]	@ (8000f80 <MX_GPIO_Init+0x8d8>)
 8000eb2:	f001 f869 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482d      	ldr	r0, [pc, #180]	@ (8000f80 <MX_GPIO_Init+0x8d8>)
 8000eca:	f001 f85d 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ece:	2350      	movs	r3, #80	@ 0x50
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ede:	230d      	movs	r3, #13
 8000ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4825      	ldr	r0, [pc, #148]	@ (8000f80 <MX_GPIO_Init+0x8d8>)
 8000eea:	f001 f84d 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000eee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f00:	2304      	movs	r3, #4
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481f      	ldr	r0, [pc, #124]	@ (8000f88 <MX_GPIO_Init+0x8e0>)
 8000f0c:	f001 f83c 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000f10:	2328      	movs	r3, #40	@ 0x28
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f20:	230a      	movs	r3, #10
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <MX_GPIO_Init+0x8d8>)
 8000f2c:	f001 f82c 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f30:	2340      	movs	r3, #64	@ 0x40
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f40:	2309      	movs	r3, #9
 8000f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <MX_GPIO_Init+0x8e0>)
 8000f4c:	f001 f81c 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f50:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f62:	2305      	movs	r3, #5
 8000f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <MX_GPIO_Init+0x8ec>)
 8000f6e:	f001 f80b 	bl	8001f88 <HAL_GPIO_Init>

}
 8000f72:	bf00      	nop
 8000f74:	3740      	adds	r7, #64	@ 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40021c00 	.word	0x40021c00
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <__io_putchar>:
void TaskOverFlow(void* p);

// minicom -D /dev/ttyACM-1
// ctrl+a puis q

int __io_putchar(int ch) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000faa:	2201      	movs	r2, #1
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <__io_putchar+0x20>)
 8000fae:	f002 fae3 	bl	8003578 <HAL_UART_Transmit>
return ch;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200008a0 	.word	0x200008a0

08000fc0 <fct_led>:

int fct_led(h_shell_t *h, int argc, char ** argv)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	//printf("fonction led\r\n");
	if (uxQueueSpacesAvailable (q_SHELL) <= 0){
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <fct_led+0x44>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f861 	bl	8005098 <uxQueueSpacesAvailable>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d105      	bne.n	8000fe8 <fct_led+0x28>
		printf("pb taille queue\r\n");
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <fct_led+0x48>)
 8000fde:	f005 fe2b 	bl	8006c38 <puts>
		Error_Handler();
 8000fe2:	f000 fa1f 	bl	8001424 <Error_Handler>
 8000fe6:	e008      	b.n	8000ffa <fct_led+0x3a>
	}
	else{
		//printf("send : %s \r\n",argv[1]);
		xQueueSend(q_SHELL,(void *)&argv[1],portMAX_DELAY);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <fct_led+0x44>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1d19      	adds	r1, r3, #4
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff6:	f003 fd73 	bl	8004ae0 <xQueueGenericSend>
	}

	return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000534 	.word	0x20000534
 8001008:	08007d14 	.word	0x08007d14

0800100c <fct_SPAM>:

int fct_SPAM(h_shell_t *h, int argc, char ** argv)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	if (uxQueueSpacesAvailable (q_SPAM) <= 0){
 8001018:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <fct_SPAM+0x44>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f004 f83b 	bl	8005098 <uxQueueSpacesAvailable>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <fct_SPAM+0x28>
		printf("pb taille queue\r\n");
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <fct_SPAM+0x48>)
 800102a:	f005 fe05 	bl	8006c38 <puts>
		Error_Handler();
 800102e:	f000 f9f9 	bl	8001424 <Error_Handler>
 8001032:	e008      	b.n	8001046 <fct_SPAM+0x3a>
	}
	else{
		//printf("send : %s \r\n",argv[1]);
		xQueueSend(q_SPAM,(void *)&argv[1],portMAX_DELAY);
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <fct_SPAM+0x44>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1d19      	adds	r1, r3, #4
 800103c:	2300      	movs	r3, #0
 800103e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001042:	f003 fd4d 	bl	8004ae0 <xQueueGenericSend>
	}

	return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000538 	.word	0x20000538
 8001054:	08007d14 	.word	0x08007d14

08001058 <CodeShell>:

void CodeShell(void* p){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	while(1){
		printf("Task Shell");
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <CodeShell+0x18>)
 8001062:	f005 fd81 	bl	8006b68 <iprintf>
		shell_run(&var_shell);
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <CodeShell+0x1c>)
 8001068:	f000 fb10 	bl	800168c <shell_run>
		printf("Task Shell");
 800106c:	bf00      	nop
 800106e:	e7f7      	b.n	8001060 <CodeShell+0x8>
 8001070:	08007d28 	.word	0x08007d28
 8001074:	2000053c 	.word	0x2000053c

08001078 <CodeLED>:
	}
}

void CodeLED(void* p){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	int val_to_process = 500;
 8001080:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001084:	60fb      	str	r3, [r7, #12]
	int val_blink;
	bool flag = RESET; //evite d'éteindre en boucle
 8001086:	2300      	movs	r3, #0
 8001088:	74fb      	strb	r3, [r7, #19]
	while(1){

		if(xQueuePeek(q_SHELL,(void *)  500, 0)==pdTRUE){
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <CodeLED+0xa0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001094:	4618      	mov	r0, r3
 8001096:	f003 ff15 	bl	8004ec4 <xQueuePeek>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d11f      	bne.n	80010e0 <CodeLED+0x68>
			xQueueReceive(q_SHELL, (void *)&val_to_process,0);
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <CodeLED+0xa0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f107 010c 	add.w	r1, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fe22 	bl	8004cf4 <xQueueReceive>
			if(atoi(val_to_process)<0){
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fc0e 	bl	80068d4 <atoi>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da05      	bge.n	80010ca <CodeLED+0x52>
				printf("wrong argument !\r\n");
 80010be:	4817      	ldr	r0, [pc, #92]	@ (800111c <CodeLED+0xa4>)
 80010c0:	f005 fdba 	bl	8006c38 <puts>
				flag = RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	74fb      	strb	r3, [r7, #19]
 80010c8:	e00a      	b.n	80010e0 <CodeLED+0x68>
			}
			else{
				val_blink = atoi(val_to_process);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 fc01 	bl	80068d4 <atoi>
 80010d2:	6178      	str	r0, [r7, #20]
				printf("LED Blink each : %d ms\r\n",val_blink);
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <CodeLED+0xa8>)
 80010d8:	f005 fd46 	bl	8006b68 <iprintf>
				flag = SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	74fb      	strb	r3, [r7, #19]
			}
		}
		if(val_blink == 0 && flag == SET){
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <CodeLED+0x82>
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <CodeLED+0x82>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <CodeLED+0xac>)
 80010f2:	f001 f8f5 	bl	80022e0 <HAL_GPIO_WritePin>
			flag = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	74fb      	strb	r3, [r7, #19]
		}
		if(val_blink > 0 && flag == SET){
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	ddc4      	ble.n	800108a <CodeLED+0x12>
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0c1      	beq.n	800108a <CodeLED+0x12>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001106:	2102      	movs	r1, #2
 8001108:	4806      	ldr	r0, [pc, #24]	@ (8001124 <CodeLED+0xac>)
 800110a:	f001 f902 	bl	8002312 <HAL_GPIO_TogglePin>
			vTaskDelay(val_blink);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fa97 	bl	8005644 <vTaskDelay>
		if(xQueuePeek(q_SHELL,(void *)  500, 0)==pdTRUE){
 8001116:	e7b8      	b.n	800108a <CodeLED+0x12>
 8001118:	20000534 	.word	0x20000534
 800111c:	08007d34 	.word	0x08007d34
 8001120:	08007d48 	.word	0x08007d48
 8001124:	40022000 	.word	0x40022000

08001128 <CodeSPAM>:
		}
	}
}

void CodeSPAM(void* p){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	int val_to_process = 500;
 8001130:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001134:	60bb      	str	r3, [r7, #8]
	bool flag = RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
	static int cpt = 0;
	while(1){

		if(xQueuePeek(q_SPAM, (void *) 500, 0)==pdTRUE){
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <CodeSPAM+0xb4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001144:	4618      	mov	r0, r3
 8001146:	f003 febd 	bl	8004ec4 <xQueuePeek>
 800114a:	4603      	mov	r3, r0
 800114c:	2b01      	cmp	r3, #1
 800114e:	d123      	bne.n	8001198 <CodeSPAM+0x70>
			xQueueReceive(q_SPAM, (void *)&val_to_process,0);
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <CodeSPAM+0xb4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f107 0108 	add.w	r1, r7, #8
 8001158:	2200      	movs	r2, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fdca 	bl	8004cf4 <xQueueReceive>
			printf("received : %d \r\n",atoi(val_to_process));
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f005 fbb6 	bl	80068d4 <atoi>
 8001168:	4603      	mov	r3, r0
 800116a:	4619      	mov	r1, r3
 800116c:	481c      	ldr	r0, [pc, #112]	@ (80011e0 <CodeSPAM+0xb8>)
 800116e:	f005 fcfb 	bl	8006b68 <iprintf>
			cpt = atoi(val_to_process);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4618      	mov	r0, r3
 8001176:	f005 fbad 	bl	80068d4 <atoi>
 800117a:	4603      	mov	r3, r0
 800117c:	4a19      	ldr	r2, [pc, #100]	@ (80011e4 <CodeSPAM+0xbc>)
 800117e:	6013      	str	r3, [r2, #0]
			if(cpt<=0){
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <CodeSPAM+0xbc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc05      	bgt.n	8001194 <CodeSPAM+0x6c>
				printf("wrong argument !\r\n");
 8001188:	4817      	ldr	r0, [pc, #92]	@ (80011e8 <CodeSPAM+0xc0>)
 800118a:	f005 fd55 	bl	8006c38 <puts>
				flag = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e001      	b.n	8001198 <CodeSPAM+0x70>
			}
			else{
				flag = SET;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(cpt>0 && flag == SET){
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <CodeSPAM+0xbc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd10      	ble.n	80011c2 <CodeSPAM+0x9a>
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00d      	beq.n	80011c2 <CodeSPAM+0x9a>
			printf("SPAM : %d \r\n",cpt);
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <CodeSPAM+0xbc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	480f      	ldr	r0, [pc, #60]	@ (80011ec <CodeSPAM+0xc4>)
 80011ae:	f005 fcdb 	bl	8006b68 <iprintf>
						//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
						cpt--;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <CodeSPAM+0xbc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <CodeSPAM+0xbc>)
 80011ba:	6013      	str	r3, [r2, #0]
						vTaskDelay(200);
 80011bc:	20c8      	movs	r0, #200	@ 0xc8
 80011be:	f004 fa41 	bl	8005644 <vTaskDelay>
		}
		if (cpt==0 && flag == SET){
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <CodeSPAM+0xbc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1b7      	bne.n	800113a <CodeSPAM+0x12>
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0b4      	beq.n	800113a <CodeSPAM+0x12>
			printf("End Function Serial SPAM\r\n");
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <CodeSPAM+0xc8>)
 80011d2:	f005 fd31 	bl	8006c38 <puts>
			flag = RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
		if(xQueuePeek(q_SPAM, (void *) 500, 0)==pdTRUE){
 80011da:	e7ae      	b.n	800113a <CodeSPAM+0x12>
 80011dc:	20000538 	.word	0x20000538
 80011e0:	08007d64 	.word	0x08007d64
 80011e4:	20000898 	.word	0x20000898
 80011e8:	08007d34 	.word	0x08007d34
 80011ec:	08007d78 	.word	0x08007d78
 80011f0:	08007d88 	.word	0x08007d88

080011f4 <CodeOverFlow>:
		}
	}
}

void CodeOverFlow(void* p){
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	//char* message = "hello";
	static int i = 0;
	while(1){
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <CodeOverFlow+0x8>

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	//xTaskCreate(TaskCode1);
	printf("TEST\r\n");
 8001206:	483e      	ldr	r0, [pc, #248]	@ (8001300 <main+0x100>)
 8001208:	f005 fd16 	bl	8006c38 <puts>
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
	TaskHandle_t xHandle2 = NULL;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	TaskHandle_t xHandle3 = NULL;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle4 = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]

	q_SHELL = xQueueCreate(Q_TEST_LENGTH, Q_TEST_SIZE);
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	2008      	movs	r0, #8
 8001222:	f003 fbfb 	bl	8004a1c <xQueueGenericCreate>
 8001226:	4603      	mov	r3, r0
 8001228:	4a36      	ldr	r2, [pc, #216]	@ (8001304 <main+0x104>)
 800122a:	6013      	str	r3, [r2, #0]
	q_SPAM = xQueueCreate(Q_TEST_LENGTH, Q_TEST_SIZE);
 800122c:	2200      	movs	r2, #0
 800122e:	2104      	movs	r1, #4
 8001230:	2008      	movs	r0, #8
 8001232:	f003 fbf3 	bl	8004a1c <xQueueGenericCreate>
 8001236:	4603      	mov	r3, r0
 8001238:	4a33      	ldr	r2, [pc, #204]	@ (8001308 <main+0x108>)
 800123a:	6013      	str	r3, [r2, #0]

	xReturned = xTaskCreate(
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2301      	movs	r3, #1
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800124a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800124e:	492f      	ldr	r1, [pc, #188]	@ (800130c <main+0x10c>)
 8001250:	482f      	ldr	r0, [pc, #188]	@ (8001310 <main+0x110>)
 8001252:	f004 f8bd 	bl	80053d0 <xTaskCreate>
 8001256:	6178      	str	r0, [r7, #20]
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_1, // Parameter passed into the task.
	1,//Priority at which the task is created.
	&xHandle1 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2301      	movs	r3, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001266:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800126a:	492a      	ldr	r1, [pc, #168]	@ (8001314 <main+0x114>)
 800126c:	482a      	ldr	r0, [pc, #168]	@ (8001318 <main+0x118>)
 800126e:	f004 f8af 	bl	80053d0 <xTaskCreate>
 8001272:	6178      	str	r0, [r7, #20]
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_2, // Parameter passed into the task.
	1,// Priority at which the task is created.
	&xHandle2 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2301      	movs	r3, #1
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001286:	4925      	ldr	r1, [pc, #148]	@ (800131c <main+0x11c>)
 8001288:	4825      	ldr	r0, [pc, #148]	@ (8001320 <main+0x120>)
 800128a:	f004 f8a1 	bl	80053d0 <xTaskCreate>
 800128e:	6178      	str	r0, [r7, #20]
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_2, // Parameter passed into the task.
	1,// Priority at which the task is created.
	&xHandle3 ); // Used to pass out the created task's handle.

	xReturned = xTaskCreate(
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2301      	movs	r3, #1
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800129c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a0:	4920      	ldr	r1, [pc, #128]	@ (8001324 <main+0x124>)
 80012a2:	4821      	ldr	r0, [pc, #132]	@ (8001328 <main+0x128>)
 80012a4:	f004 f894 	bl	80053d0 <xTaskCreate>
 80012a8:	6178      	str	r0, [r7, #20]
	STACK_SIZE, // Stack size in words, not bytes.
	(void *) DELAY_2, // Parameter passed into the task.
	1,// Priority at which the task is created.
	&xHandle4 ); // Used to pass out the created task's handle.*/

	if (xReturned != pdPASS){
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d001      	beq.n	80012b4 <main+0xb4>
		Error_Handler();
 80012b0:	f000 f8b8 	bl	8001424 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f000 fc67 	bl	8001b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f846 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f7ff f9f4 	bl	80006a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012c0:	f000 fb7e 	bl	80019c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	var_shell.drv.receive = drv_uart1_receive;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <main+0x12c>)
 80012c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <main+0x130>)
 80012c8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	var_shell.drv.transmit = drv_uart1_transmit;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <main+0x12c>)
 80012ce:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <main+0x134>)
 80012d0:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

  shell_init(&var_shell);
 80012d4:	4815      	ldr	r0, [pc, #84]	@ (800132c <main+0x12c>)
 80012d6:	f000 f8eb 	bl	80014b0 <shell_init>
  shell_add(&var_shell,'l', fct_led, "Fonction de clignotement de la LED");
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <main+0x138>)
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <main+0x13c>)
 80012de:	216c      	movs	r1, #108	@ 0x6c
 80012e0:	4812      	ldr	r0, [pc, #72]	@ (800132c <main+0x12c>)
 80012e2:	f000 f927 	bl	8001534 <shell_add>
  shell_add(&var_shell,'s', fct_SPAM, "Fonction de SPAM");
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <main+0x140>)
 80012e8:	4a16      	ldr	r2, [pc, #88]	@ (8001344 <main+0x144>)
 80012ea:	2173      	movs	r1, #115	@ 0x73
 80012ec:	480f      	ldr	r0, [pc, #60]	@ (800132c <main+0x12c>)
 80012ee:	f000 f921 	bl	8001534 <shell_add>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012f2:	f7ff f9b5 	bl	8000660 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012f6:	f003 fa09 	bl	800470c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80012fa:	bf00      	nop
 80012fc:	e7fd      	b.n	80012fa <main+0xfa>
 80012fe:	bf00      	nop
 8001300:	08007da4 	.word	0x08007da4
 8001304:	20000534 	.word	0x20000534
 8001308:	20000538 	.word	0x20000538
 800130c:	08007dac 	.word	0x08007dac
 8001310:	08001059 	.word	0x08001059
 8001314:	08007db8 	.word	0x08007db8
 8001318:	08001079 	.word	0x08001079
 800131c:	08007dc0 	.word	0x08007dc0
 8001320:	08001129 	.word	0x08001129
 8001324:	08007dcc 	.word	0x08007dcc
 8001328:	080011f5 	.word	0x080011f5
 800132c:	2000053c 	.word	0x2000053c
 8001330:	080005dd 	.word	0x080005dd
 8001334:	08000605 	.word	0x08000605
 8001338:	08007ddc 	.word	0x08007ddc
 800133c:	08000fc1 	.word	0x08000fc1
 8001340:	08007e00 	.word	0x08007e00
 8001344:	0800100d 	.word	0x0800100d

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	@ 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fd84 	bl	8006e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <SystemClock_Config+0xd4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <SystemClock_Config+0xd4>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	@ 0x40
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <SystemClock_Config+0xd4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <SystemClock_Config+0xd8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <SystemClock_Config+0xd8>)
 800138a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <SystemClock_Config+0xd8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013b0:	2319      	movs	r3, #25
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80013b4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80013b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f80e 	bl	80023e8 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013d2:	f000 f827 	bl	8001424 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d6:	f000 ffb7 	bl	8002348 <HAL_PWREx_EnableOverDrive>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013e0:	f000 f820 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2107      	movs	r1, #7
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fa94 	bl	8002930 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800140e:	f000 f809 	bl	8001424 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	@ 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e029      	b.n	8001496 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001448:	68f9      	ldr	r1, [r7, #12]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3304      	adds	r3, #4
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461c      	mov	r4, r3
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	330c      	adds	r3, #12
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4623      	mov	r3, r4
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <sh_help+0x7c>)
 8001474:	2128      	movs	r1, #40	@ 0x28
 8001476:	f005 fbe7 	bl	8006c48 <sniprintf>
 800147a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	b289      	uxth	r1, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbd0      	blt.n	8001442 <sh_help+0x12>
	}

	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08007e14 	.word	0x08007e14

080014b0 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	int size = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <shell_init+0x74>)
 80014ca:	2128      	movs	r1, #40	@ 0x28
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fbbb 	bl	8006c48 <sniprintf>
 80014d2:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	b289      	uxth	r1, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <shell_init+0x78>)
 80014f0:	2128      	movs	r1, #40	@ 0x28
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fba8 	bl	8006c48 <sniprintf>
 80014f8:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	b289      	uxth	r1, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <shell_init+0x7c>)
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <shell_init+0x80>)
 8001512:	2168      	movs	r1, #104	@ 0x68
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f80d 	bl	8001534 <shell_add>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	08007e20 	.word	0x08007e20
 8001528:	08007e48 	.word	0x08007e48
 800152c:	08007e6c 	.word	0x08007e6c
 8001530:	08001431 	.word	0x08001431

08001534 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b3f      	cmp	r3, #63	@ 0x3f
 800154a:	dc27      	bgt.n	800159c <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3304      	adds	r3, #4
 800155e:	7afa      	ldrb	r2, [r7, #11]
 8001560:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3308      	adds	r3, #8
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68f9      	ldr	r1, [r7, #12]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	330c      	adds	r3, #12
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	601a      	str	r2, [r3, #0]
		return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e001      	b.n	80015a0 <shell_add+0x6c>
	}

	return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b090      	sub	sp, #64	@ 0x40
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c2:	e041      	b.n	8001648 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80015da:	429a      	cmp	r2, r3
 80015dc:	d131      	bne.n	8001642 <shell_exec+0x96>
			argc = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ea:	e013      	b.n	8001614 <shell_exec+0x68>
				if(*p == ' ') {
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d10c      	bne.n	800160e <shell_exec+0x62>
					*p = '\0';
 80015f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80015fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001602:	3201      	adds	r2, #1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3340      	adds	r3, #64	@ 0x40
 8001608:	443b      	add	r3, r7
 800160a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800160e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001610:	3301      	adds	r3, #1
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
 8001614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <shell_exec+0x76>
 800161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800161e:	2b07      	cmp	r3, #7
 8001620:	dde4      	ble.n	80015ec <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f107 020c 	add.w	r2, r7, #12
 8001638:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
 800163e:	4603      	mov	r3, r0
 8001640:	e01d      	b.n	800167e <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001644:	3301      	adds	r3, #1
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800164e:	429a      	cmp	r2, r3
 8001650:	dbb8      	blt.n	80015c4 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800165c:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <shell_exec+0xdc>)
 800165e:	2128      	movs	r1, #40	@ 0x28
 8001660:	f005 faf2 	bl	8006c48 <sniprintf>
 8001664:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001674:	b289      	uxth	r1, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4798      	blx	r3
	return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800167e:	4618      	mov	r0, r3
 8001680:	3740      	adds	r7, #64	@ 0x40
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08007e74 	.word	0x08007e74

0800168c <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80016a2:	2102      	movs	r1, #2
 80016a4:	483a      	ldr	r0, [pc, #232]	@ (8001790 <shell_run+0x104>)
 80016a6:	4798      	blx	r3
		reading = 1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]

		while(reading) {
 80016ac:	e064      	b.n	8001778 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80016b4:	f107 020b 	add.w	r2, r7, #11
 80016b8:	2101      	movs	r1, #1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4798      	blx	r3
			int size;

			switch (c) {
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d036      	beq.n	8001732 <shell_run+0xa6>
 80016c4:	2b0d      	cmp	r3, #13
 80016c6:	d141      	bne.n	800174c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <shell_run+0x108>)
 80016d0:	2128      	movs	r1, #40	@ 0x28
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 fab8 	bl	8006c48 <sniprintf>
 80016d8:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	b289      	uxth	r1, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	613a      	str	r2, [r7, #16]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800170a:	4a23      	ldr	r2, [pc, #140]	@ (8001798 <shell_run+0x10c>)
 800170c:	2128      	movs	r1, #40	@ 0x28
 800170e:	f005 fa9b 	bl	8006c48 <sniprintf>
 8001712:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	b289      	uxth	r1, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4798      	blx	r3
				reading = 0;        //exit read loop
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
				break;
 8001730:	e022      	b.n	8001778 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd1e      	ble.n	8001776 <shell_run+0xea>
					pos--;          //remove it in buffer
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3b01      	subs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001744:	2103      	movs	r1, #3
 8001746:	4815      	ldr	r0, [pc, #84]	@ (800179c <shell_run+0x110>)
 8001748:	4798      	blx	r3
				}
				break;
 800174a:	e014      	b.n	8001776 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b27      	cmp	r3, #39	@ 0x27
 8001750:	dc12      	bgt.n	8001778 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001758:	f107 020b 	add.w	r2, r7, #11
 800175c:	2101      	movs	r1, #1
 800175e:	4610      	mov	r0, r2
 8001760:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	613a      	str	r2, [r7, #16]
 8001768:	7af9      	ldrb	r1, [r7, #11]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	460a      	mov	r2, r1
 8001770:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001774:	e000      	b.n	8001778 <shell_run+0xec>
				break;
 8001776:	bf00      	nop
		while(reading) {
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d197      	bne.n	80016ae <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff10 	bl	80015ac <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800178c:	e786      	b.n	800169c <shell_run+0x10>
 800178e:	bf00      	nop
 8001790:	08007ea4 	.word	0x08007ea4
 8001794:	08007e8c 	.word	0x08007e8c
 8001798:	08007e90 	.word	0x08007e90
 800179c:	08007ea0 	.word	0x08007ea0

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_MspInit+0x4c>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	210f      	movs	r1, #15
 80017da:	f06f 0001 	mvn.w	r0, #1
 80017de:	f000 fb0a 	bl	8001df6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182a:	f000 f9e9 	bl	8001c00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800182e:	f004 fb5f 	bl	8005ef0 <xTaskGetSchedulerState>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d001      	beq.n	800183c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001838:	f004 fe0e 	bl	8006458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <USART1_IRQHandler+0x10>)
 8001846:	f001 ffe9 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200008a0 	.word	0x200008a0

08001854 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
  }

  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e009      	b.n	80018b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fb77 	bl	8000f9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf1      	blt.n	80018a0 <_write+0x12>
  }
  return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_close>:

int _close(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ee:	605a      	str	r2, [r3, #4]
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_isatty>:

int _isatty(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f005 face 	bl	8006f00 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20050000 	.word	0x20050000
 8001990:	00000400 	.word	0x00000400
 8001994:	2000089c 	.word	0x2000089c
 8001998:	20027cc8 	.word	0x20027cc8

0800199c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019c6:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <MX_USART1_UART_Init+0x5c>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_USART1_UART_Init+0x58>)
 8001a04:	f001 fd6a 	bl	80034dc <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f7ff fd09 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200008a0 	.word	0x200008a0
 8001a1c:	40011000 	.word	0x40011000

08001a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ac      	sub	sp, #176	@ 0xb0
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	2284      	movs	r2, #132	@ 0x84
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fa0f 	bl	8006e64 <memset>
  if(uartHandle->Instance==USART1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a36      	ldr	r2, [pc, #216]	@ (8001b24 <HAL_UART_MspInit+0x104>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d164      	bne.n	8001b1a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a50:	2340      	movs	r3, #64	@ 0x40
 8001a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a54:	2300      	movs	r3, #0
 8001a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 f94d 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a68:	f7ff fcdc 	bl	8001424 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	4a2d      	ldr	r2, [pc, #180]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a78:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	4a27      	ldr	r2, [pc, #156]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_UART_MspInit+0x108>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001acc:	2307      	movs	r3, #7
 8001ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <HAL_UART_MspInit+0x10c>)
 8001ada:	f000 fa55 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af8:	2307      	movs	r3, #7
 8001afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b02:	4619      	mov	r1, r3
 8001b04:	480a      	ldr	r0, [pc, #40]	@ (8001b30 <HAL_UART_MspInit+0x110>)
 8001b06:	f000 fa3f 	bl	8001f88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	2025      	movs	r0, #37	@ 0x25
 8001b10:	f000 f971 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b14:	2025      	movs	r0, #37	@ 0x25
 8001b16:	f000 f98a 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	37b0      	adds	r7, #176	@ 0xb0
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40011000 	.word	0x40011000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020000 	.word	0x40020000

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b38:	f7ff ff30 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3e:	490d      	ldr	r1, [pc, #52]	@ (8001b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b54:	4c0a      	ldr	r4, [pc, #40]	@ (8001b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f005 f9d3 	bl	8006f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff fb4b 	bl	8001200 <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b78:	08008004 	.word	0x08008004
  ldr r2, =_sbss
 8001b7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b80:	20027cc4 	.word	0x20027cc4

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>

08001b86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f928 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b90:	200f      	movs	r0, #15
 8001b92:	f000 f805 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b96:	f7ff fe03 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f943 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bdc:	f000 f90b 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000928 	.word	0x20000928

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000928 	.word	0x20000928

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	05fa0000 	.word	0x05fa0000

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feda 	bl	8001c28 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d008      	beq.n	8001e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e052      	b.n	8001f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0216 	bic.w	r2, r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <HAL_DMA_Abort+0x62>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0208 	bic.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee4:	e013      	b.n	8001f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee6:	f7ff fe9f 	bl	8001c28 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d90c      	bls.n	8001f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e015      	b.n	8001f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e4      	bne.n	8001ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	223f      	movs	r2, #63	@ 0x3f
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e00c      	b.n	8001f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2205      	movs	r2, #5
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e175      	b.n	8002294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8164 	bne.w	800228e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x56>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80be 	beq.w	800228e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	4b66      	ldr	r3, [pc, #408]	@ (80022ac <HAL_GPIO_Init+0x324>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a65      	ldr	r2, [pc, #404]	@ (80022ac <HAL_GPIO_Init+0x324>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_GPIO_Init+0x324>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212a:	4a61      	ldr	r2, [pc, #388]	@ (80022b0 <HAL_GPIO_Init+0x328>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a58      	ldr	r2, [pc, #352]	@ (80022b4 <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d037      	beq.n	80021c6 <HAL_GPIO_Init+0x23e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a57      	ldr	r2, [pc, #348]	@ (80022b8 <HAL_GPIO_Init+0x330>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d031      	beq.n	80021c2 <HAL_GPIO_Init+0x23a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a56      	ldr	r2, [pc, #344]	@ (80022bc <HAL_GPIO_Init+0x334>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <HAL_GPIO_Init+0x236>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a55      	ldr	r2, [pc, #340]	@ (80022c0 <HAL_GPIO_Init+0x338>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x232>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <HAL_GPIO_Init+0x33c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x22e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a53      	ldr	r2, [pc, #332]	@ (80022c8 <HAL_GPIO_Init+0x340>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x22a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	@ (80022cc <HAL_GPIO_Init+0x344>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x226>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a51      	ldr	r2, [pc, #324]	@ (80022d0 <HAL_GPIO_Init+0x348>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x222>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_GPIO_Init+0x34c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x21e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <HAL_GPIO_Init+0x350>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x21a>
 800219e:	2309      	movs	r3, #9
 80021a0:	e012      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021a2:	230a      	movs	r3, #10
 80021a4:	e010      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x240>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021d8:	4935      	ldr	r1, [pc, #212]	@ (80022b0 <HAL_GPIO_Init+0x328>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e6:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <HAL_GPIO_Init+0x354>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220a:	4a34      	ldr	r2, [pc, #208]	@ (80022dc <HAL_GPIO_Init+0x354>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002210:	4b32      	ldr	r3, [pc, #200]	@ (80022dc <HAL_GPIO_Init+0x354>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <HAL_GPIO_Init+0x354>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223a:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <HAL_GPIO_Init+0x354>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225e:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_GPIO_Init+0x354>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <HAL_GPIO_Init+0x354>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <HAL_GPIO_Init+0x354>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae86 	bls.w	8001fa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40021400 	.word	0x40021400
 80022cc:	40021800 	.word	0x40021800
 80022d0:	40021c00 	.word	0x40021c00
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40022400 	.word	0x40022400
 80022dc:	40013c00 	.word	0x40013c00

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022fc:	e003      	b.n	8002306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	619a      	str	r2, [r3, #24]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002324:	887a      	ldrh	r2, [r7, #2]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43d9      	mvns	r1, r3
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	400b      	ands	r3, r1
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002376:	f7ff fc57 	bl	8001c28 <HAL_GetTick>
 800237a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800237c:	e009      	b.n	8002392 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800237e:	f7ff fc53 	bl	8001c28 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238c:	d901      	bls.n	8002392 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e022      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002392:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239e:	d1ee      	bne.n	800237e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7ff fc3c 	bl	8001c28 <HAL_GetTick>
 80023b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b2:	e009      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b4:	f7ff fc38 	bl	8001c28 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023c2:	d901      	bls.n	80023c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e007      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023d4:	d1ee      	bne.n	80023b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e291      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8087 	beq.w	800251a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240c:	4b96      	ldr	r3, [pc, #600]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b04      	cmp	r3, #4
 8002416:	d00c      	beq.n	8002432 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002418:	4b93      	ldr	r3, [pc, #588]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d112      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
 8002424:	4b90      	ldr	r3, [pc, #576]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b8d      	ldr	r3, [pc, #564]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06c      	beq.n	8002518 <HAL_RCC_OscConfig+0x130>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e26b      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x7a>
 8002454:	4b84      	ldr	r3, [pc, #528]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a83      	ldr	r2, [pc, #524]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e02e      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x9c>
 800246a:	4b7f      	ldr	r3, [pc, #508]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7e      	ldr	r2, [pc, #504]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b7c      	ldr	r3, [pc, #496]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7b      	ldr	r2, [pc, #492]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xc0>
 800248e:	4b76      	ldr	r3, [pc, #472]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b73      	ldr	r3, [pc, #460]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a72      	ldr	r2, [pc, #456]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xd8>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbae 	bl	8001c28 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fbaa 	bl	8001c28 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e21f      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe8>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff fb9a 	bl	8001c28 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fb96 	bl	8001c28 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e20b      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x110>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d069      	beq.n	80025fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002526:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x190>
 800253e:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x17a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1df      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	493d      	ldr	r1, [pc, #244]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e040      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d023      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a38      	ldr	r2, [pc, #224]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fb4c 	bl	8001c28 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff fb48 	bl	8001c28 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1bd      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4929      	ldr	r1, [pc, #164]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
 80025c6:	e018      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a26      	ldr	r2, [pc, #152]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb28 	bl	8001c28 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff fb24 	bl	8001c28 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e199      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d038      	beq.n	8002678 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff fb05 	bl	8001c28 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002622:	f7ff fb01 	bl	8001c28 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e176      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x23a>
 8002640:	e01a      	b.n	8002678 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	4a08      	ldr	r2, [pc, #32]	@ (8002668 <HAL_RCC_OscConfig+0x280>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff faeb 	bl	8001c28 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff fae7 	bl	8001c28 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d903      	bls.n	800266c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e15c      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
 8002668:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a4 	beq.w	80027ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b8b      	ldr	r3, [pc, #556]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b88      	ldr	r3, [pc, #544]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	4a87      	ldr	r2, [pc, #540]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	@ 0x40
 800269e:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ae:	4b82      	ldr	r3, [pc, #520]	@ (80028b8 <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026ba:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7e      	ldr	r2, [pc, #504]	@ (80028b8 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7ff faaf 	bl	8001c28 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff faab 	bl	8001c28 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e120      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_OscConfig+0x4d0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x31a>
 80026f4:	4b6f      	ldr	r3, [pc, #444]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a6e      	ldr	r2, [pc, #440]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x376>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x33c>
 800270a:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	@ 0x70
 8002716:	4b67      	ldr	r3, [pc, #412]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a66      	ldr	r2, [pc, #408]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	@ 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x376>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x35e>
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a60      	ldr	r2, [pc, #384]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a5d      	ldr	r2, [pc, #372]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x376>
 8002746:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a5a      	ldr	r2, [pc, #360]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	4b58      	ldr	r3, [pc, #352]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa5f 	bl	8001c28 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fa5b 	bl	8001c28 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0ce      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b4b      	ldr	r3, [pc, #300]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x386>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fa49 	bl	8001c28 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fa45 	bl	8001c28 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b3c      	ldr	r3, [pc, #240]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	4a3b      	ldr	r2, [pc, #236]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80a4 	beq.w	8002920 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d06b      	beq.n	80028bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d149      	bne.n	8002880 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b31      	ldr	r3, [pc, #196]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a30      	ldr	r2, [pc, #192]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff fa16 	bl	8001c28 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff fa12 	bl	8001c28 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4313      	orrs	r3, r2
 8002844:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002846:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800284a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f9e6 	bl	8001c28 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff f9e2 	bl	8001c28 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e057      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x478>
 800287e:	e04f      	b.n	8002920 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f9cc 	bl	8001c28 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f9c8 	bl	8001c28 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e03d      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x4ac>
 80028b2:	e035      	b.n	8002920 <HAL_RCC_OscConfig+0x538>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_RCC_OscConfig+0x544>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d0      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d910      	bls.n	8002978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b67      	ldr	r3, [pc, #412]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020f 	bic.w	r2, r3, #15
 800295e:	4965      	ldr	r1, [pc, #404]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a58      	ldr	r2, [pc, #352]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800299a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d040      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e073      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06b      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4936      	ldr	r1, [pc, #216]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7ff f900 	bl	8001c28 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7ff f8fc 	bl	8001c28 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e053      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d210      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 020f 	bic.w	r2, r3, #15
 8002a6a:	4922      	ldr	r1, [pc, #136]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	@ (8002afc <HAL_RCC_ClockConfig+0x1cc>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1d0>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1d4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f85c 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023c00 	.word	0x40023c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08007ea8 	.word	0x08007ea8
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b090      	sub	sp, #64	@ 0x40
 8002b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b14:	2300      	movs	r3, #0
 8002b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b18:	2300      	movs	r3, #0
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f200 80a1 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3a:	e09b      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b40:	e09b      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b42:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b46:	e098      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b48:	4b4f      	ldr	r3, [pc, #316]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b52:	4b4d      	ldr	r3, [pc, #308]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	2200      	movs	r2, #0
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b70:	2100      	movs	r1, #0
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b74:	fb03 f201 	mul.w	r2, r3, r1
 8002b78:	2300      	movs	r3, #0
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b82:	fba0 1202 	umull	r1, r2, r0, r2
 8002b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b88:	460a      	mov	r2, r1
 8002b8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8e:	4413      	add	r3, r2
 8002b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b94:	2200      	movs	r2, #0
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	61fa      	str	r2, [r7, #28]
 8002b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ba2:	f7fd fb85 	bl	80002b0 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4613      	mov	r3, r2
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	e053      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	617a      	str	r2, [r7, #20]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bc2:	f04f 0b00 	mov.w	fp, #0
 8002bc6:	4652      	mov	r2, sl
 8002bc8:	465b      	mov	r3, fp
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd8:	0150      	lsls	r0, r2, #5
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	ebb2 080a 	subs.w	r8, r2, sl
 8002be2:	eb63 090b 	sbc.w	r9, r3, fp
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bfa:	ebb2 0408 	subs.w	r4, r2, r8
 8002bfe:	eb63 0509 	sbc.w	r5, r3, r9
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	00eb      	lsls	r3, r5, #3
 8002c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c10:	00e2      	lsls	r2, r4, #3
 8002c12:	4614      	mov	r4, r2
 8002c14:	461d      	mov	r5, r3
 8002c16:	eb14 030a 	adds.w	r3, r4, sl
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	eb45 030b 	adc.w	r3, r5, fp
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	028b      	lsls	r3, r1, #10
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c38:	4621      	mov	r1, r4
 8002c3a:	028a      	lsls	r2, r1, #10
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	2200      	movs	r2, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c4c:	f7fd fb30 	bl	80002b0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3740      	adds	r7, #64	@ 0x40
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	017d7840 	.word	0x017d7840

08002c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	@ (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	@ (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08007eb8 	.word	0x08007eb8

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	@ (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08007eb8 	.word	0x08007eb8

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d24:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	4964      	ldr	r1, [pc, #400]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d017      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	4959      	ldr	r1, [pc, #356]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d74:	d101      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	494a      	ldr	r1, [pc, #296]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 808b 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	4a39      	ldr	r2, [pc, #228]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dec:	4b37      	ldr	r3, [pc, #220]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002df8:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a34      	ldr	r2, [pc, #208]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e04:	f7fe ff10 	bl	8001c28 <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe ff0c 	bl	8001c28 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e357      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d035      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d02e      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e48:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a1d      	ldr	r2, [pc, #116]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e70:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d114      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fed4 	bl	8001c28 <HAL_GetTick>
 8002e80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe fed0 	bl	8001c28 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e319      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0ee      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	4901      	ldr	r1, [pc, #4]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	0ffffcff 	.word	0x0ffffcff
 8002ed8:	4baa      	ldr	r3, [pc, #680]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4aa9      	ldr	r2, [pc, #676]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	4ba7      	ldr	r3, [pc, #668]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	49a4      	ldr	r1, [pc, #656]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d010      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f02:	4ba0      	ldr	r3, [pc, #640]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f08:	4a9e      	ldr	r2, [pc, #632]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f12:	4b9c      	ldr	r3, [pc, #624]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	4999      	ldr	r1, [pc, #612]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f30:	4b94      	ldr	r3, [pc, #592]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3e:	4991      	ldr	r1, [pc, #580]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f52:	4b8c      	ldr	r3, [pc, #560]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f60:	4988      	ldr	r1, [pc, #544]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f74:	4b83      	ldr	r3, [pc, #524]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f82:	4980      	ldr	r1, [pc, #512]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f96:	4b7b      	ldr	r3, [pc, #492]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	4977      	ldr	r1, [pc, #476]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb8:	4b72      	ldr	r3, [pc, #456]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	496f      	ldr	r1, [pc, #444]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fda:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	f023 020c 	bic.w	r2, r3, #12
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe8:	4966      	ldr	r1, [pc, #408]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003002:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	495e      	ldr	r1, [pc, #376]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800301e:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003024:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302c:	4955      	ldr	r1, [pc, #340]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003040:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304e:	494d      	ldr	r1, [pc, #308]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003062:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	4944      	ldr	r1, [pc, #272]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003084:	4b3f      	ldr	r3, [pc, #252]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	493c      	ldr	r1, [pc, #240]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b4:	4933      	ldr	r1, [pc, #204]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030d6:	492b      	ldr	r1, [pc, #172]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d011      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030ea:	4b26      	ldr	r3, [pc, #152]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f8:	4922      	ldr	r1, [pc, #136]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003108:	d101      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312a:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003138:	4912      	ldr	r1, [pc, #72]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800314c:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315c:	4909      	ldr	r1, [pc, #36]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d006      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80d9 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003178:	4b02      	ldr	r3, [pc, #8]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a01      	ldr	r2, [pc, #4]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003182:	e001      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003184:	40023800 	.word	0x40023800
 8003188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318a:	f7fe fd4d 	bl	8001c28 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003192:	f7fe fd49 	bl	8001c28 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b64      	cmp	r3, #100	@ 0x64
 800319e:	d901      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e194      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d021      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031c4:	4b64      	ldr	r3, [pc, #400]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031d2:	4b61      	ldr	r3, [pc, #388]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d8:	0e1b      	lsrs	r3, r3, #24
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	019a      	lsls	r2, r3, #6
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	071b      	lsls	r3, r3, #28
 80031f8:	4957      	ldr	r1, [pc, #348]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02e      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322a:	d129      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800322c:	4b4a      	ldr	r3, [pc, #296]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800323a:	4b47      	ldr	r3, [pc, #284]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003240:	0f1b      	lsrs	r3, r3, #28
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	019a      	lsls	r2, r3, #6
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	431a      	orrs	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	493d      	ldr	r1, [pc, #244]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003268:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800326e:	f023 021f 	bic.w	r2, r3, #31
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	4937      	ldr	r1, [pc, #220]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800328c:	4b32      	ldr	r3, [pc, #200]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003292:	0e1b      	lsrs	r3, r3, #24
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800329a:	4b2f      	ldr	r3, [pc, #188]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a0:	0f1b      	lsrs	r3, r3, #28
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	019a      	lsls	r2, r3, #6
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	071b      	lsls	r3, r3, #28
 80032c0:	4925      	ldr	r1, [pc, #148]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d011      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	019a      	lsls	r2, r3, #6
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	071b      	lsls	r3, r3, #28
 80032f0:	4919      	ldr	r1, [pc, #100]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fe fc90 	bl	8001c28 <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800330c:	f7fe fc8c 	bl	8001c28 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0d7      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 80cd 	bne.w	80034cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a08      	ldr	r2, [pc, #32]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333e:	f7fe fc73 	bl	8001c28 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003346:	f7fe fc6f 	bl	8001c28 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b64      	cmp	r3, #100	@ 0x64
 8003352:	d903      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0ba      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003358:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800335c:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003368:	d0ed      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02e      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d12a      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003392:	4b51      	ldr	r3, [pc, #324]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033a0:	4b4d      	ldr	r3, [pc, #308]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	0f1b      	lsrs	r3, r3, #28
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	019a      	lsls	r2, r3, #6
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	4944      	ldr	r1, [pc, #272]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033ce:	4b42      	ldr	r3, [pc, #264]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	493d      	ldr	r1, [pc, #244]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d022      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033fc:	d11d      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fe:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800340c:	4b32      	ldr	r3, [pc, #200]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003412:	0f1b      	lsrs	r3, r3, #28
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	4929      	ldr	r1, [pc, #164]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	0e1b      	lsrs	r3, r3, #24
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003454:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	019a      	lsls	r2, r3, #6
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	4917      	ldr	r1, [pc, #92]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	4911      	ldr	r1, [pc, #68]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0e      	ldr	r2, [pc, #56]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe fbc0 	bl	8001c28 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034ac:	f7fe fbbc 	bl	8001c28 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e007      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ca:	d1ef      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e040      	b.n	8003570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fa8e 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fed0 	bl	80042c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fc69 	bl	8003e00 <UART_SetConfig>
 800352e:	4603      	mov	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e01b      	b.n	8003570 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 ff4f 	bl	800440c <UART_CheckIdleState>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800358c:	2b20      	cmp	r3, #32
 800358e:	d177      	bne.n	8003680 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Transmit+0x24>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e070      	b.n	8003682 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2221      	movs	r2, #33	@ 0x21
 80035ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ae:	f7fe fb3b 	bl	8001c28 <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035cc:	d108      	bne.n	80035e0 <HAL_UART_Transmit+0x68>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e003      	b.n	80035e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e8:	e02f      	b.n	800364a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	@ 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 ff60 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e03b      	b.n	8003682 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800361e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	3302      	adds	r3, #2
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e007      	b.n	8003638 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1c9      	bne.n	80035ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2140      	movs	r1, #64	@ 0x40
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 ff2a 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e005      	b.n	8003682 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b08a      	sub	sp, #40	@ 0x28
 800368e:	af02      	add	r7, sp, #8
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	f040 80b5 	bne.w	8003810 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_UART_Receive+0x28>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0ad      	b.n	8003812 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2222      	movs	r2, #34	@ 0x22
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036cc:	f7fe faac 	bl	8001c28 <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	d10e      	bne.n	800370a <HAL_UART_Receive+0x80>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <HAL_UART_Receive+0x76>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036fe:	e02d      	b.n	800375c <HAL_UART_Receive+0xd2>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	22ff      	movs	r2, #255	@ 0xff
 8003704:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003708:	e028      	b.n	800375c <HAL_UART_Receive+0xd2>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <HAL_UART_Receive+0xa4>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Receive+0x9a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	@ 0xff
 800371e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003722:	e01b      	b.n	800375c <HAL_UART_Receive+0xd2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	227f      	movs	r2, #127	@ 0x7f
 8003728:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800372c:	e016      	b.n	800375c <HAL_UART_Receive+0xd2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003736:	d10d      	bne.n	8003754 <HAL_UART_Receive+0xca>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_UART_Receive+0xc0>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	227f      	movs	r2, #127	@ 0x7f
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003748:	e008      	b.n	800375c <HAL_UART_Receive+0xd2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	223f      	movs	r2, #63	@ 0x3f
 800374e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003752:	e003      	b.n	800375c <HAL_UART_Receive+0xd2>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003762:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376c:	d108      	bne.n	8003780 <HAL_UART_Receive+0xf6>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e003      	b.n	8003788 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003788:	e036      	b.n	80037f8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2120      	movs	r1, #32
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fe90 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e032      	b.n	8003812 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	8a7b      	ldrh	r3, [r7, #18]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29a      	uxth	r2, r3
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	3302      	adds	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e00c      	b.n	80037e6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8a7b      	ldrh	r3, [r7, #18]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4013      	ands	r3, r2
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1c2      	bne.n	800378a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ba      	sub	sp, #232	@ 0xe8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003842:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003846:	f640 030f 	movw	r3, #2063	@ 0x80f
 800384a:	4013      	ands	r3, r2
 800384c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d115      	bne.n	8003884 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00f      	beq.n	8003884 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8297 	beq.w	8003da8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
      }
      return;
 8003882:	e291      	b.n	8003da8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8117 	beq.w	8003abc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800389a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800389e:	4b85      	ldr	r3, [pc, #532]	@ (8003ab4 <HAL_UART_IRQHandler+0x298>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 810a 	beq.w	8003abc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d011      	beq.n	80038d8 <HAL_UART_IRQHandler+0xbc>
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d011      	beq.n	8003908 <HAL_UART_IRQHandler+0xec>
 80038e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2202      	movs	r2, #2
 80038f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_UART_IRQHandler+0x11c>
 8003914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2204      	movs	r2, #4
 8003926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003954:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2208      	movs	r2, #8
 8003962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	f043 0208 	orr.w	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_UART_IRQHandler+0x18a>
 8003980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 81fd 	beq.w	8003dac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b40      	cmp	r3, #64	@ 0x40
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04f      	beq.n	8003a9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fdc8 	bl	8004594 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d141      	bne.n	8003a96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1d9      	bne.n	8003a12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <HAL_UART_IRQHandler+0x29c>)
 8003a6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fa65 	bl	8001f42 <HAL_DMA_Abort_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00f      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9a0 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00b      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f99c 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e007      	b.n	8003aae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f998 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003aac:	e17e      	b.n	8003dac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	bf00      	nop
    return;
 8003ab0:	e17c      	b.n	8003dac <HAL_UART_IRQHandler+0x590>
 8003ab2:	bf00      	nop
 8003ab4:	04000120 	.word	0x04000120
 8003ab8:	0800465d 	.word	0x0800465d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f040 814c 	bne.w	8003d5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8145 	beq.w	8003d5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 813e 	beq.w	8003d5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	f040 80b6 	bne.w	8003c66 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8150 	beq.w	8003db0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f080 8148 	bcs.w	8003db0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b34:	f000 8086 	beq.w	8003c44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1da      	bne.n	8003b38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ba6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e1      	bne.n	8003b82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003be2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003be8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c14:	f023 0310 	bic.w	r3, r3, #16
 8003c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e4      	bne.n	8003c04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe f90f 	bl	8001e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8c2 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c64:	e0a4      	b.n	8003db0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8096 	beq.w	8003db4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8091 	beq.w	8003db4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e4      	bne.n	8003c92 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cec:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e3      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	69b9      	ldr	r1, [r7, #24]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	617b      	str	r3, [r7, #20]
   return(result);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e4      	bne.n	8003d14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f846 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d5c:	e02a      	b.n	8003db4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
    }
    return;
 8003d86:	e017      	b.n	8003db8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_UART_IRQHandler+0x59e>
 8003d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fc71 	bl	8004688 <UART_EndTransmit_IT>
    return;
 8003da6:	e008      	b.n	8003dba <HAL_UART_IRQHandler+0x59e>
      return;
 8003da8:	bf00      	nop
 8003daa:	e006      	b.n	8003dba <HAL_UART_IRQHandler+0x59e>
    return;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <HAL_UART_IRQHandler+0x59e>
      return;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_UART_IRQHandler+0x59e>
      return;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_UART_IRQHandler+0x59e>
    return;
 8003db8:	bf00      	nop
  }

}
 8003dba:	37e8      	adds	r7, #232	@ 0xe8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4ba6      	ldr	r3, [pc, #664]	@ (80040c4 <UART_SetConfig+0x2c4>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a94      	ldr	r2, [pc, #592]	@ (80040c8 <UART_SetConfig+0x2c8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d120      	bne.n	8003ebe <UART_SetConfig+0xbe>
 8003e7c:	4b93      	ldr	r3, [pc, #588]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d816      	bhi.n	8003eb8 <UART_SetConfig+0xb8>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <UART_SetConfig+0x90>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003ea7 	.word	0x08003ea7
 8003e9c:	08003eb3 	.word	0x08003eb3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e150      	b.n	8004148 <UART_SetConfig+0x348>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e14d      	b.n	8004148 <UART_SetConfig+0x348>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e14a      	b.n	8004148 <UART_SetConfig+0x348>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e147      	b.n	8004148 <UART_SetConfig+0x348>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e144      	b.n	8004148 <UART_SetConfig+0x348>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a83      	ldr	r2, [pc, #524]	@ (80040d0 <UART_SetConfig+0x2d0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d132      	bne.n	8003f2e <UART_SetConfig+0x12e>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d828      	bhi.n	8003f28 <UART_SetConfig+0x128>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <UART_SetConfig+0xdc>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003f17 	.word	0x08003f17
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f23 	.word	0x08003f23
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e118      	b.n	8004148 <UART_SetConfig+0x348>
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e115      	b.n	8004148 <UART_SetConfig+0x348>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e112      	b.n	8004148 <UART_SetConfig+0x348>
 8003f22:	2308      	movs	r3, #8
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e10f      	b.n	8004148 <UART_SetConfig+0x348>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e10c      	b.n	8004148 <UART_SetConfig+0x348>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a68      	ldr	r2, [pc, #416]	@ (80040d4 <UART_SetConfig+0x2d4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d120      	bne.n	8003f7a <UART_SetConfig+0x17a>
 8003f38:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d013      	beq.n	8003f6e <UART_SetConfig+0x16e>
 8003f46:	2b30      	cmp	r3, #48	@ 0x30
 8003f48:	d814      	bhi.n	8003f74 <UART_SetConfig+0x174>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x162>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d810      	bhi.n	8003f74 <UART_SetConfig+0x174>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <UART_SetConfig+0x15c>
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d006      	beq.n	8003f68 <UART_SetConfig+0x168>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x174>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e0f2      	b.n	8004148 <UART_SetConfig+0x348>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0ef      	b.n	8004148 <UART_SetConfig+0x348>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0ec      	b.n	8004148 <UART_SetConfig+0x348>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e0e9      	b.n	8004148 <UART_SetConfig+0x348>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0e6      	b.n	8004148 <UART_SetConfig+0x348>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a56      	ldr	r2, [pc, #344]	@ (80040d8 <UART_SetConfig+0x2d8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d120      	bne.n	8003fc6 <UART_SetConfig+0x1c6>
 8003f84:	4b51      	ldr	r3, [pc, #324]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f90:	d013      	beq.n	8003fba <UART_SetConfig+0x1ba>
 8003f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f94:	d814      	bhi.n	8003fc0 <UART_SetConfig+0x1c0>
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x1ae>
 8003f9a:	2b80      	cmp	r3, #128	@ 0x80
 8003f9c:	d810      	bhi.n	8003fc0 <UART_SetConfig+0x1c0>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <UART_SetConfig+0x1a8>
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x1b4>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x1c0>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e0cc      	b.n	8004148 <UART_SetConfig+0x348>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e0c9      	b.n	8004148 <UART_SetConfig+0x348>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e0c6      	b.n	8004148 <UART_SetConfig+0x348>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e0c3      	b.n	8004148 <UART_SetConfig+0x348>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e0c0      	b.n	8004148 <UART_SetConfig+0x348>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a44      	ldr	r2, [pc, #272]	@ (80040dc <UART_SetConfig+0x2dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d125      	bne.n	800401c <UART_SetConfig+0x21c>
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fde:	d017      	beq.n	8004010 <UART_SetConfig+0x210>
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe4:	d817      	bhi.n	8004016 <UART_SetConfig+0x216>
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fea:	d00b      	beq.n	8004004 <UART_SetConfig+0x204>
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff0:	d811      	bhi.n	8004016 <UART_SetConfig+0x216>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <UART_SetConfig+0x1fe>
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ffa:	d006      	beq.n	800400a <UART_SetConfig+0x20a>
 8003ffc:	e00b      	b.n	8004016 <UART_SetConfig+0x216>
 8003ffe:	2300      	movs	r3, #0
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e0a1      	b.n	8004148 <UART_SetConfig+0x348>
 8004004:	2302      	movs	r3, #2
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e09e      	b.n	8004148 <UART_SetConfig+0x348>
 800400a:	2304      	movs	r3, #4
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e09b      	b.n	8004148 <UART_SetConfig+0x348>
 8004010:	2308      	movs	r3, #8
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e098      	b.n	8004148 <UART_SetConfig+0x348>
 8004016:	2310      	movs	r3, #16
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e095      	b.n	8004148 <UART_SetConfig+0x348>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2f      	ldr	r2, [pc, #188]	@ (80040e0 <UART_SetConfig+0x2e0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d125      	bne.n	8004072 <UART_SetConfig+0x272>
 8004026:	4b29      	ldr	r3, [pc, #164]	@ (80040cc <UART_SetConfig+0x2cc>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004030:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004034:	d017      	beq.n	8004066 <UART_SetConfig+0x266>
 8004036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800403a:	d817      	bhi.n	800406c <UART_SetConfig+0x26c>
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004040:	d00b      	beq.n	800405a <UART_SetConfig+0x25a>
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004046:	d811      	bhi.n	800406c <UART_SetConfig+0x26c>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <UART_SetConfig+0x254>
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004050:	d006      	beq.n	8004060 <UART_SetConfig+0x260>
 8004052:	e00b      	b.n	800406c <UART_SetConfig+0x26c>
 8004054:	2301      	movs	r3, #1
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e076      	b.n	8004148 <UART_SetConfig+0x348>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e073      	b.n	8004148 <UART_SetConfig+0x348>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e070      	b.n	8004148 <UART_SetConfig+0x348>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e06d      	b.n	8004148 <UART_SetConfig+0x348>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e06a      	b.n	8004148 <UART_SetConfig+0x348>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <UART_SetConfig+0x2e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d138      	bne.n	80040ee <UART_SetConfig+0x2ee>
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800408a:	d017      	beq.n	80040bc <UART_SetConfig+0x2bc>
 800408c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004090:	d82a      	bhi.n	80040e8 <UART_SetConfig+0x2e8>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004096:	d00b      	beq.n	80040b0 <UART_SetConfig+0x2b0>
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409c:	d824      	bhi.n	80040e8 <UART_SetConfig+0x2e8>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <UART_SetConfig+0x2aa>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a6:	d006      	beq.n	80040b6 <UART_SetConfig+0x2b6>
 80040a8:	e01e      	b.n	80040e8 <UART_SetConfig+0x2e8>
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e04b      	b.n	8004148 <UART_SetConfig+0x348>
 80040b0:	2302      	movs	r3, #2
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e048      	b.n	8004148 <UART_SetConfig+0x348>
 80040b6:	2304      	movs	r3, #4
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e045      	b.n	8004148 <UART_SetConfig+0x348>
 80040bc:	2308      	movs	r3, #8
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e042      	b.n	8004148 <UART_SetConfig+0x348>
 80040c2:	bf00      	nop
 80040c4:	efff69f3 	.word	0xefff69f3
 80040c8:	40011000 	.word	0x40011000
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40004400 	.word	0x40004400
 80040d4:	40004800 	.word	0x40004800
 80040d8:	40004c00 	.word	0x40004c00
 80040dc:	40005000 	.word	0x40005000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	40007800 	.word	0x40007800
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e02c      	b.n	8004148 <UART_SetConfig+0x348>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a72      	ldr	r2, [pc, #456]	@ (80042bc <UART_SetConfig+0x4bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d125      	bne.n	8004144 <UART_SetConfig+0x344>
 80040f8:	4b71      	ldr	r3, [pc, #452]	@ (80042c0 <UART_SetConfig+0x4c0>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004102:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004106:	d017      	beq.n	8004138 <UART_SetConfig+0x338>
 8004108:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800410c:	d817      	bhi.n	800413e <UART_SetConfig+0x33e>
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d00b      	beq.n	800412c <UART_SetConfig+0x32c>
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004118:	d811      	bhi.n	800413e <UART_SetConfig+0x33e>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <UART_SetConfig+0x326>
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004122:	d006      	beq.n	8004132 <UART_SetConfig+0x332>
 8004124:	e00b      	b.n	800413e <UART_SetConfig+0x33e>
 8004126:	2300      	movs	r3, #0
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e00d      	b.n	8004148 <UART_SetConfig+0x348>
 800412c:	2302      	movs	r3, #2
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e00a      	b.n	8004148 <UART_SetConfig+0x348>
 8004132:	2304      	movs	r3, #4
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e007      	b.n	8004148 <UART_SetConfig+0x348>
 8004138:	2308      	movs	r3, #8
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e004      	b.n	8004148 <UART_SetConfig+0x348>
 800413e:	2310      	movs	r3, #16
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e001      	b.n	8004148 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004150:	d15b      	bne.n	800420a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d828      	bhi.n	80041aa <UART_SetConfig+0x3aa>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <UART_SetConfig+0x360>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041ab 	.word	0x080041ab
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041ab 	.word	0x080041ab
 8004178:	080041ab 	.word	0x080041ab
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7fe fd92 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e013      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe fda2 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8004190:	61b8      	str	r0, [r7, #24]
        break;
 8004192:	e00f      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <UART_SetConfig+0x4c4>)
 8004196:	61bb      	str	r3, [r7, #24]
        break;
 8004198:	e00c      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7fe fcb5 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800419e:	61b8      	str	r0, [r7, #24]
        break;
 80041a0:	e008      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	61bb      	str	r3, [r7, #24]
        break;
 80041a8:	e004      	b.n	80041b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	77bb      	strb	r3, [r7, #30]
        break;
 80041b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d074      	beq.n	80042a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d916      	bls.n	8004204 <UART_SetConfig+0x404>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d212      	bcs.n	8004204 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f023 030f 	bic.w	r3, r3, #15
 80041e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	89fa      	ldrh	r2, [r7, #14]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e04f      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	77bb      	strb	r3, [r7, #30]
 8004208:	e04c      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d828      	bhi.n	8004262 <UART_SetConfig+0x462>
 8004210:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <UART_SetConfig+0x418>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	0800423d 	.word	0x0800423d
 800421c:	08004245 	.word	0x08004245
 8004220:	0800424d 	.word	0x0800424d
 8004224:	08004263 	.word	0x08004263
 8004228:	08004253 	.word	0x08004253
 800422c:	08004263 	.word	0x08004263
 8004230:	08004263 	.word	0x08004263
 8004234:	08004263 	.word	0x08004263
 8004238:	0800425b 	.word	0x0800425b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe fd36 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004240:	61b8      	str	r0, [r7, #24]
        break;
 8004242:	e013      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7fe fd46 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8004248:	61b8      	str	r0, [r7, #24]
        break;
 800424a:	e00f      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <UART_SetConfig+0x4c4>)
 800424e:	61bb      	str	r3, [r7, #24]
        break;
 8004250:	e00c      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004252:	f7fe fc59 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8004256:	61b8      	str	r0, [r7, #24]
        break;
 8004258:	e008      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425e:	61bb      	str	r3, [r7, #24]
        break;
 8004260:	e004      	b.n	800426c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	77bb      	strb	r3, [r7, #30]
        break;
 800426a:	bf00      	nop
    }

    if (pclk != 0U)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085a      	lsrs	r2, r3, #1
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d909      	bls.n	80042a0 <UART_SetConfig+0x4a0>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d205      	bcs.n	80042a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e001      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40007c00 	.word	0x40007c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c6:	d10a      	bne.n	80043de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	@ 0x30
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800441c:	f7fd fc04 	bl	8001c28 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d12e      	bne.n	800448e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f83b 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d021      	beq.n	800448e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60fb      	str	r3, [r7, #12]
   return(result);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e011      	b.n	80044b2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3728      	adds	r7, #40	@ 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	e04f      	b.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044d2:	d04b      	beq.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d4:	f7fd fba8 	bl	8001c28 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <UART_WaitOnFlagUntilTimeout+0x30>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04e      	b.n	800458c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d037      	beq.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d034      	beq.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d031      	beq.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d110      	bne.n	8004538 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2208      	movs	r2, #8
 800451c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f838 	bl	8004594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2208      	movs	r2, #8
 8004528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e029      	b.n	800458c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004546:	d111      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004550:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f81e 	bl	8004594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e00f      	b.n	800458c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	429a      	cmp	r2, r3
 8004588:	d0a0      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b095      	sub	sp, #84	@ 0x54
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80045bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e6      	bne.n	800459c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e5      	bne.n	80045ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	2b01      	cmp	r3, #1
 8004608:	d118      	bne.n	800463c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60bb      	str	r3, [r7, #8]
   return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	613b      	str	r3, [r7, #16]
   return(result);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004650:	bf00      	nop
 8004652:	3754      	adds	r7, #84	@ 0x54
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fbaa 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	60bb      	str	r3, [r7, #8]
   return(result);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	613b      	str	r3, [r7, #16]
   return(result);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fb76 	bl	8003dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d4:	bf00      	nop
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80046ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ee:	2b84      	cmp	r3, #132	@ 0x84
 80046f0:	d005      	beq.n	80046fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80046f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	3303      	adds	r3, #3
 80046fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004710:	f000 ffd0 	bl	80056b4 <vTaskStartScheduler>
  
  return osOK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	bd80      	pop	{r7, pc}

0800471a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800471a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471c:	b089      	sub	sp, #36	@ 0x24
 800471e:	af04      	add	r7, sp, #16
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <osThreadCreate+0x54>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01c      	beq.n	800476e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685c      	ldr	r4, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691e      	ldr	r6, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ffc8 	bl	80046dc <makeFreeRtosPriority>
 800474c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	9100      	str	r1, [sp, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4632      	mov	r2, r6
 8004760:	4629      	mov	r1, r5
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fdce 	bl	8005304 <xTaskCreateStatic>
 8004768:	4603      	mov	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e01c      	b.n	80047a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685c      	ldr	r4, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800477a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ffaa 	bl	80046dc <makeFreeRtosPriority>
 8004788:	4602      	mov	r2, r0
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	9200      	str	r2, [sp, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	4632      	mov	r2, r6
 8004796:	4629      	mov	r1, r5
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fe19 	bl	80053d0 <xTaskCreate>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <osDelay+0x16>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	e000      	b.n	80047ca <osDelay+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ff3a 	bl	8005644 <vTaskDelay>
  
  return osOK;
 80047d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f103 0208 	add.w	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0208 	add.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004892:	d103      	bne.n	800489c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e00c      	b.n	80048b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3308      	adds	r3, #8
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e002      	b.n	80048aa <vListInsert+0x2e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d2f6      	bcs.n	80048a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6892      	ldr	r2, [r2, #8]
 8004904:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d103      	bne.n	8004922 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10d      	bne.n	8004974 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	b672      	cpsid	i
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	b662      	cpsie	i
 800496c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004974:	f001 fcda 	bl	800632c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004980:	68f9      	ldr	r1, [r7, #12]
 8004982:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	3b01      	subs	r3, #1
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	441a      	add	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	22ff      	movs	r2, #255	@ 0xff
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	22ff      	movs	r2, #255	@ 0xff
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d114      	bne.n	80049f4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01a      	beq.n	8004a08 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3310      	adds	r3, #16
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f8c2 	bl	8005b60 <xTaskRemoveFromEventList>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d012      	beq.n	8004a08 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <xQueueGenericReset+0xd4>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e009      	b.n	8004a08 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3310      	adds	r3, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff feee 	bl	80047da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3324      	adds	r3, #36	@ 0x24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fee9 	bl	80047da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 fcc6 	bl	8006398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a0c:	2301      	movs	r3, #1
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	@ 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10d      	bne.n	8004a4c <xQueueGenericCreate+0x30>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	b672      	cpsid	i
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	b662      	cpsie	i
 8004a44:	613b      	str	r3, [r7, #16]
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e004      	b.n	8004a62 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	fb02 f303 	mul.w	r3, r2, r3
 8004a60:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3348      	adds	r3, #72	@ 0x48
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fd48 	bl	80064fc <pvPortMalloc>
 8004a6c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3348      	adds	r3, #72	@ 0x48
 8004a7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a86:	79fa      	ldrb	r2, [r7, #7]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f805 	bl	8004aa2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a98:	69bb      	ldr	r3, [r7, #24]
	}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e002      	b.n	8004ac4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	69b8      	ldr	r0, [r7, #24]
 8004ad4:	f7ff ff36 	bl	8004944 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08e      	sub	sp, #56	@ 0x38
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <xQueueGenericSend+0x38>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	b672      	cpsid	i
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	b662      	cpsie	i
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <xQueueGenericSend+0x46>
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <xQueueGenericSend+0x4a>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <xQueueGenericSend+0x4c>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <xQueueGenericSend+0x6c>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d103      	bne.n	8004b5a <xQueueGenericSend+0x7a>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <xQueueGenericSend+0x7e>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <xQueueGenericSend+0x80>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <xQueueGenericSend+0xa0>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	623b      	str	r3, [r7, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b80:	f001 f9b6 	bl	8005ef0 <xTaskGetSchedulerState>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <xQueueGenericSend+0xb0>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <xQueueGenericSend+0xb4>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <xQueueGenericSend+0xb6>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10d      	bne.n	8004bb6 <xQueueGenericSend+0xd6>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	b672      	cpsid	i
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	b662      	cpsie	i
 8004bae:	61fb      	str	r3, [r7, #28]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bb6:	f001 fbb9 	bl	800632c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <xQueueGenericSend+0xec>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d129      	bne.n	8004c20 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bd2:	f000 fa87 	bl	80050e4 <prvCopyDataToQueue>
 8004bd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	3324      	adds	r3, #36	@ 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 ffbb 	bl	8005b60 <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf0 <xQueueGenericSend+0x210>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	e00a      	b.n	8004c18 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c08:	4b39      	ldr	r3, [pc, #228]	@ (8004cf0 <xQueueGenericSend+0x210>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c18:	f001 fbbe 	bl	8006398 <vPortExitCritical>
				return pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e063      	b.n	8004ce8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c26:	f001 fbb7 	bl	8006398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e05c      	b.n	8004ce8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c34:	f107 0314 	add.w	r3, r7, #20
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fff7 	bl	8005c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c42:	f001 fba9 	bl	8006398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c46:	f000 fd9b 	bl	8005780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c4a:	f001 fb6f 	bl	800632c <vPortEnterCritical>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c5a:	d103      	bne.n	8004c64 <xQueueGenericSend+0x184>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c70:	d103      	bne.n	8004c7a <xQueueGenericSend+0x19a>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c7a:	f001 fb8d 	bl	8006398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c7e:	1d3a      	adds	r2, r7, #4
 8004c80:	f107 0314 	add.w	r3, r7, #20
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ffe6 	bl	8005c58 <xTaskCheckForTimeOut>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d124      	bne.n	8004cdc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c94:	f000 fb1e 	bl	80052d4 <prvIsQueueFull>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 ff32 	bl	8005b10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cae:	f000 faa9 	bl	8005204 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cb2:	f000 fd73 	bl	800579c <xTaskResumeAll>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af7c 	bne.w	8004bb6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf0 <xQueueGenericSend+0x210>)
 8004cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	e772      	b.n	8004bb6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cd2:	f000 fa97 	bl	8005204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd6:	f000 fd61 	bl	800579c <xTaskResumeAll>
 8004cda:	e76c      	b.n	8004bb6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cde:	f000 fa91 	bl	8005204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce2:	f000 fd5b 	bl	800579c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3738      	adds	r7, #56	@ 0x38
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	@ 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <xQueueReceive+0x36>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	b672      	cpsid	i
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	b662      	cpsie	i
 8004d22:	623b      	str	r3, [r7, #32]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <xQueueReceive+0x44>
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <xQueueReceive+0x48>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <xQueueReceive+0x4a>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <xQueueReceive+0x6a>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	b672      	cpsid	i
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	b662      	cpsie	i
 8004d56:	61fb      	str	r3, [r7, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5e:	f001 f8c7 	bl	8005ef0 <xTaskGetSchedulerState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xQueueReceive+0x7a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xQueueReceive+0x7e>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueReceive+0x80>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <xQueueReceive+0xa0>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	b672      	cpsid	i
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	b662      	cpsie	i
 8004d8c:	61bb      	str	r3, [r7, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d94:	f001 faca 	bl	800632c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01f      	beq.n	8004de4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da8:	f000 fa06 	bl	80051b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	1e5a      	subs	r2, r3, #1
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00f      	beq.n	8004ddc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fecd 	bl	8005b60 <xTaskRemoveFromEventList>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec0 <xQueueReceive+0x1cc>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ddc:	f001 fadc 	bl	8006398 <vPortExitCritical>
				return pdPASS;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e069      	b.n	8004eb8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dea:	f001 fad5 	bl	8006398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e062      	b.n	8004eb8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 ff15 	bl	8005c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e06:	f001 fac7 	bl	8006398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e0a:	f000 fcb9 	bl	8005780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0e:	f001 fa8d 	bl	800632c <vPortEnterCritical>
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e1e:	d103      	bne.n	8004e28 <xQueueReceive+0x134>
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e34:	d103      	bne.n	8004e3e <xQueueReceive+0x14a>
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3e:	f001 faab 	bl	8006398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e42:	1d3a      	adds	r2, r7, #4
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff04 	bl	8005c58 <xTaskCheckForTimeOut>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d123      	bne.n	8004e9e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e58:	f000 fa26 	bl	80052a8 <prvIsQueueEmpty>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d017      	beq.n	8004e92 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	3324      	adds	r3, #36	@ 0x24
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fe50 	bl	8005b10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e72:	f000 f9c7 	bl	8005204 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e76:	f000 fc91 	bl	800579c <xTaskResumeAll>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d189      	bne.n	8004d94 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <xQueueReceive+0x1cc>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	e780      	b.n	8004d94 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e94:	f000 f9b6 	bl	8005204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e98:	f000 fc80 	bl	800579c <xTaskResumeAll>
 8004e9c:	e77a      	b.n	8004d94 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea0:	f000 f9b0 	bl	8005204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ea4:	f000 fc7a 	bl	800579c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eaa:	f000 f9fd 	bl	80052a8 <prvIsQueueEmpty>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f43f af6f 	beq.w	8004d94 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3730      	adds	r7, #48	@ 0x30
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	@ 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10d      	bne.n	8004efa <xQueuePeek+0x36>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	b672      	cpsid	i
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	b662      	cpsie	i
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <xQueuePeek+0x44>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueuePeek+0x48>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueuePeek+0x4a>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <xQueuePeek+0x6a>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	b672      	cpsid	i
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	b662      	cpsie	i
 8004f26:	623b      	str	r3, [r7, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f2e:	f000 ffdf 	bl	8005ef0 <xTaskGetSchedulerState>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <xQueuePeek+0x7a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <xQueuePeek+0x7e>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueuePeek+0x80>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10d      	bne.n	8004f64 <xQueuePeek+0xa0>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	b672      	cpsid	i
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	b662      	cpsie	i
 8004f5c:	61fb      	str	r3, [r7, #28]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f64:	f001 f9e2 	bl	800632c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d021      	beq.n	8004fb8 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f7e:	f000 f91b 	bl	80051b8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f86:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00f      	beq.n	8004fb0 <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	3324      	adds	r3, #36	@ 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fde3 	bl	8005b60 <xTaskRemoveFromEventList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <xQueuePeek+0x1d0>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fb0:	f001 f9f2 	bl	8006398 <vPortExitCritical>
				return pdPASS;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e069      	b.n	800508c <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fbe:	f001 f9eb 	bl	8006398 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e062      	b.n	800508c <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fcc:	f107 0314 	add.w	r3, r7, #20
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fe2b 	bl	8005c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fda:	f001 f9dd 	bl	8006398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fde:	f000 fbcf 	bl	8005780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fe2:	f001 f9a3 	bl	800632c <vPortEnterCritical>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff2:	d103      	bne.n	8004ffc <xQueuePeek+0x138>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005002:	b25b      	sxtb	r3, r3
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005008:	d103      	bne.n	8005012 <xQueuePeek+0x14e>
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005012:	f001 f9c1 	bl	8006398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005016:	1d3a      	adds	r2, r7, #4
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fe1a 	bl	8005c58 <xTaskCheckForTimeOut>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d123      	bne.n	8005072 <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800502c:	f000 f93c 	bl	80052a8 <prvIsQueueEmpty>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	3324      	adds	r3, #36	@ 0x24
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fd66 	bl	8005b10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005046:	f000 f8dd 	bl	8005204 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800504a:	f000 fba7 	bl	800579c <xTaskResumeAll>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d187      	bne.n	8004f64 <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8005054:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <xQueuePeek+0x1d0>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	e77e      	b.n	8004f64 <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8005066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005068:	f000 f8cc 	bl	8005204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800506c:	f000 fb96 	bl	800579c <xTaskResumeAll>
 8005070:	e778      	b.n	8004f64 <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8005072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005074:	f000 f8c6 	bl	8005204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005078:	f000 fb90 	bl	800579c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800507c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800507e:	f000 f913 	bl	80052a8 <prvIsQueueEmpty>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f43f af6d 	beq.w	8004f64 <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800508a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800508c:	4618      	mov	r0, r3
 800508e:	3738      	adds	r7, #56	@ 0x38
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <uxQueueSpacesAvailable+0x2e>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	b672      	cpsid	i
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	b662      	cpsie	i
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 80050c6:	f001 f931 	bl	800632c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 f95f 	bl	8006398 <vPortExitCritical>

	return uxReturn;
 80050da:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10d      	bne.n	800511e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d14d      	bne.n	80051a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff0c 	bl	8005f2c <xTaskPriorityDisinherit>
 8005114:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	e043      	b.n	80051a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d119      	bne.n	8005158 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6858      	ldr	r0, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	461a      	mov	r2, r3
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	f001 ff13 	bl	8006f5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d32b      	bcc.n	80051a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	e026      	b.n	80051a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68d8      	ldr	r0, [r3, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	461a      	mov	r2, r3
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	f001 fef9 	bl	8006f5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	425b      	negs	r3, r3
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d207      	bcs.n	8005194 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	425b      	negs	r3, r3
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d105      	bne.n	80051a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d018      	beq.n	80051fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	441a      	add	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d303      	bcc.n	80051ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68d9      	ldr	r1, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	461a      	mov	r2, r3
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f001 feaf 	bl	8006f5a <memcpy>
	}
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800520c:	f001 f88e 	bl	800632c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005216:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005218:	e011      	b.n	800523e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3324      	adds	r3, #36	@ 0x24
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc9a 	bl	8005b60 <xTaskRemoveFromEventList>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005232:	f000 fd79 	bl	8005d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	3b01      	subs	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800523e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	dce9      	bgt.n	800521a <prvUnlockQueue+0x16>
 8005246:	e000      	b.n	800524a <prvUnlockQueue+0x46>
					break;
 8005248:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	22ff      	movs	r2, #255	@ 0xff
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005252:	f001 f8a1 	bl	8006398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005256:	f001 f869 	bl	800632c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005260:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005262:	e011      	b.n	8005288 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d012      	beq.n	8005292 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fc75 	bl	8005b60 <xTaskRemoveFromEventList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800527c:	f000 fd54 	bl	8005d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	3b01      	subs	r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dce9      	bgt.n	8005264 <prvUnlockQueue+0x60>
 8005290:	e000      	b.n	8005294 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005292:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	22ff      	movs	r2, #255	@ 0xff
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800529c:	f001 f87c 	bl	8006398 <vPortExitCritical>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052b0:	f001 f83c 	bl	800632c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e001      	b.n	80052c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052c6:	f001 f867 	bl	8006398 <vPortExitCritical>

	return xReturn;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052dc:	f001 f826 	bl	800632c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d102      	bne.n	80052f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052f6:	f001 f84f 	bl	8006398 <vPortExitCritical>

	return xReturn;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	@ 0x38
 8005308:	af04      	add	r7, sp, #16
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <xTaskCreateStatic+0x30>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	b672      	cpsid	i
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	b662      	cpsie	i
 800532c:	623b      	str	r3, [r7, #32]
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10d      	bne.n	8005356 <xTaskCreateStatic+0x52>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	b672      	cpsid	i
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	b662      	cpsie	i
 800534e:	61fb      	str	r3, [r7, #28]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005356:	2354      	movs	r3, #84	@ 0x54
 8005358:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b54      	cmp	r3, #84	@ 0x54
 800535e:	d00d      	beq.n	800537c <xTaskCreateStatic+0x78>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	61bb      	str	r3, [r7, #24]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800537c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01e      	beq.n	80053c2 <xTaskCreateStatic+0xbe>
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800539c:	2300      	movs	r3, #0
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	f107 0314 	add.w	r3, r7, #20
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f850 	bl	800545a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053bc:	f000 f8d8 	bl	8005570 <prvAddNewTaskToReadyList>
 80053c0:	e001      	b.n	80053c6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053c6:	697b      	ldr	r3, [r7, #20]
	}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	@ 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	@ 0x30
 80053d4:	af04      	add	r7, sp, #16
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 f889 	bl	80064fc <pvPortMalloc>
 80053ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00e      	beq.n	8005410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053f2:	2054      	movs	r0, #84	@ 0x54
 80053f4:	f001 f882 	bl	80064fc <pvPortMalloc>
 80053f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30
 8005406:	e005      	b.n	8005414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f001 f945 	bl	8006698 <vPortFree>
 800540e:	e001      	b.n	8005414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d017      	beq.n	800544a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	2300      	movs	r3, #0
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	9302      	str	r3, [sp, #8]
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f80e 	bl	800545a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800543e:	69f8      	ldr	r0, [r7, #28]
 8005440:	f000 f896 	bl	8005570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e002      	b.n	8005450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800544e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005450:	69bb      	ldr	r3, [r7, #24]
	}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b088      	sub	sp, #32
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005472:	440b      	add	r3, r1
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	b672      	cpsid	i
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	b662      	cpsie	i
 80054a0:	617b      	str	r3, [r7, #20]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01f      	beq.n	80054ee <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e012      	b.n	80054da <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	7819      	ldrb	r1, [r3, #0]
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	3334      	adds	r3, #52	@ 0x34
 80054c4:	460a      	mov	r2, r1
 80054c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b0f      	cmp	r3, #15
 80054de:	d9e9      	bls.n	80054b4 <prvInitialiseNewTask+0x5a>
 80054e0:	e000      	b.n	80054e4 <prvInitialiseNewTask+0x8a>
			{
				break;
 80054e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ec:	e003      	b.n	80054f6 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d901      	bls.n	8005500 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054fc:	2306      	movs	r3, #6
 80054fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005504:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800550a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff f97f 	bl	800481a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	3318      	adds	r3, #24
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff f97a 	bl	800481a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	f1c3 0207 	rsb	r2, r3, #7
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	69b8      	ldr	r0, [r7, #24]
 8005550:	f000 fdde 	bl	8006110 <pxPortInitialiseStack>
 8005554:	4602      	mov	r2, r0
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	bf00      	nop
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005578:	f000 fed8 	bl	800632c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800557c:	4b2a      	ldr	r3, [pc, #168]	@ (8005628 <prvAddNewTaskToReadyList+0xb8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <prvAddNewTaskToReadyList+0xb8>)
 8005584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005586:	4b29      	ldr	r3, [pc, #164]	@ (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800558e:	4a27      	ldr	r2, [pc, #156]	@ (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005594:	4b24      	ldr	r3, [pc, #144]	@ (8005628 <prvAddNewTaskToReadyList+0xb8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d110      	bne.n	80055be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800559c:	f000 fbe8 	bl	8005d70 <prvInitialiseTaskLists>
 80055a0:	e00d      	b.n	80055be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055a2:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <prvAddNewTaskToReadyList+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055aa:	4b20      	ldr	r3, [pc, #128]	@ (800562c <prvAddNewTaskToReadyList+0xbc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d802      	bhi.n	80055be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055b8:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <prvAddNewTaskToReadyList+0xbc>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055be:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <prvAddNewTaskToReadyList+0xc4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <prvAddNewTaskToReadyList+0xc4>)
 80055c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <prvAddNewTaskToReadyList+0xc8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	4a18      	ldr	r2, [pc, #96]	@ (8005638 <prvAddNewTaskToReadyList+0xc8>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a15      	ldr	r2, [pc, #84]	@ (800563c <prvAddNewTaskToReadyList+0xcc>)
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7ff f91f 	bl	8004834 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055f6:	f000 fecf 	bl	8006398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <prvAddNewTaskToReadyList+0xc0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005602:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d207      	bcs.n	8005620 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <prvAddNewTaskToReadyList+0xd0>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000a2c 	.word	0x20000a2c
 800562c:	2000092c 	.word	0x2000092c
 8005630:	20000a38 	.word	0x20000a38
 8005634:	20000a48 	.word	0x20000a48
 8005638:	20000a34 	.word	0x20000a34
 800563c:	20000930 	.word	0x20000930
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01a      	beq.n	800568c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <vTaskDelay+0x68>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <vTaskDelay+0x36>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	b672      	cpsid	i
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	b662      	cpsie	i
 8005672:	60bb      	str	r3, [r7, #8]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800567a:	f000 f881 	bl	8005780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fcdf 	bl	8006044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005686:	f000 f889 	bl	800579c <xTaskResumeAll>
 800568a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005692:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <vTaskDelay+0x6c>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000a54 	.word	0x20000a54
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	@ 0x28
 80056b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056c2:	463a      	mov	r2, r7
 80056c4:	1d39      	adds	r1, r7, #4
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fa ffae 	bl	800062c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	9202      	str	r2, [sp, #8]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	2300      	movs	r3, #0
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	460a      	mov	r2, r1
 80056e2:	4921      	ldr	r1, [pc, #132]	@ (8005768 <vTaskStartScheduler+0xb4>)
 80056e4:	4821      	ldr	r0, [pc, #132]	@ (800576c <vTaskStartScheduler+0xb8>)
 80056e6:	f7ff fe0d 	bl	8005304 <xTaskCreateStatic>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4a20      	ldr	r2, [pc, #128]	@ (8005770 <vTaskStartScheduler+0xbc>)
 80056ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <vTaskStartScheduler+0xbc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e001      	b.n	8005702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d118      	bne.n	800573a <vTaskStartScheduler+0x86>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	b672      	cpsid	i
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	b662      	cpsie	i
 800571c:	613b      	str	r3, [r7, #16]
}
 800571e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005720:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <vTaskStartScheduler+0xc0>)
 8005722:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005726:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005728:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <vTaskStartScheduler+0xc4>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <vTaskStartScheduler+0xc8>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005734:	f000 fd7c 	bl	8006230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005738:	e011      	b.n	800575e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005740:	d10d      	bne.n	800575e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	b672      	cpsid	i
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	b662      	cpsie	i
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <vTaskStartScheduler+0xa6>
}
 800575e:	bf00      	nop
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	08007e98 	.word	0x08007e98
 800576c:	08005d41 	.word	0x08005d41
 8005770:	20000a50 	.word	0x20000a50
 8005774:	20000a4c 	.word	0x20000a4c
 8005778:	20000a38 	.word	0x20000a38
 800577c:	20000a30 	.word	0x20000a30

08005780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <vTaskSuspendAll+0x18>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	4a03      	ldr	r2, [pc, #12]	@ (8005798 <vTaskSuspendAll+0x18>)
 800578c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000a54 	.word	0x20000a54

0800579c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057aa:	4b43      	ldr	r3, [pc, #268]	@ (80058b8 <xTaskResumeAll+0x11c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <xTaskResumeAll+0x32>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	603b      	str	r3, [r7, #0]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057ce:	f000 fdad 	bl	800632c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057d2:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <xTaskResumeAll+0x11c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	4a37      	ldr	r2, [pc, #220]	@ (80058b8 <xTaskResumeAll+0x11c>)
 80057da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057dc:	4b36      	ldr	r3, [pc, #216]	@ (80058b8 <xTaskResumeAll+0x11c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d161      	bne.n	80058a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057e4:	4b35      	ldr	r3, [pc, #212]	@ (80058bc <xTaskResumeAll+0x120>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d05d      	beq.n	80058a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ec:	e02e      	b.n	800584c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ee:	4b34      	ldr	r3, [pc, #208]	@ (80058c0 <xTaskResumeAll+0x124>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f877 	bl	80048ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f872 	bl	80048ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	2201      	movs	r2, #1
 8005810:	409a      	lsls	r2, r3
 8005812:	4b2c      	ldr	r3, [pc, #176]	@ (80058c4 <xTaskResumeAll+0x128>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	4a2a      	ldr	r2, [pc, #168]	@ (80058c4 <xTaskResumeAll+0x128>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <xTaskResumeAll+0x12c>)
 800582a:	441a      	add	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fffe 	bl	8004834 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583c:	4b23      	ldr	r3, [pc, #140]	@ (80058cc <xTaskResumeAll+0x130>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005846:	4b22      	ldr	r3, [pc, #136]	@ (80058d0 <xTaskResumeAll+0x134>)
 8005848:	2201      	movs	r2, #1
 800584a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800584c:	4b1c      	ldr	r3, [pc, #112]	@ (80058c0 <xTaskResumeAll+0x124>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1cc      	bne.n	80057ee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800585a:	f000 fb29 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800585e:	4b1d      	ldr	r3, [pc, #116]	@ (80058d4 <xTaskResumeAll+0x138>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d010      	beq.n	800588c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800586a:	f000 f837 	bl	80058dc <xTaskIncrementTick>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005874:	4b16      	ldr	r3, [pc, #88]	@ (80058d0 <xTaskResumeAll+0x134>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f1      	bne.n	800586a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005886:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <xTaskResumeAll+0x138>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800588c:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <xTaskResumeAll+0x134>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005898:	4b0f      	ldr	r3, [pc, #60]	@ (80058d8 <xTaskResumeAll+0x13c>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058a8:	f000 fd76 	bl	8006398 <vPortExitCritical>

	return xAlreadyYielded;
 80058ac:	68bb      	ldr	r3, [r7, #8]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000a54 	.word	0x20000a54
 80058bc:	20000a2c 	.word	0x20000a2c
 80058c0:	200009ec 	.word	0x200009ec
 80058c4:	20000a34 	.word	0x20000a34
 80058c8:	20000930 	.word	0x20000930
 80058cc:	2000092c 	.word	0x2000092c
 80058d0:	20000a40 	.word	0x20000a40
 80058d4:	20000a3c 	.word	0x20000a3c
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e6:	4b50      	ldr	r3, [pc, #320]	@ (8005a28 <xTaskIncrementTick+0x14c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 808b 	bne.w	8005a06 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f0:	4b4e      	ldr	r3, [pc, #312]	@ (8005a2c <xTaskIncrementTick+0x150>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058f8:	4a4c      	ldr	r2, [pc, #304]	@ (8005a2c <xTaskIncrementTick+0x150>)
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d123      	bne.n	800594c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005904:	4b4a      	ldr	r3, [pc, #296]	@ (8005a30 <xTaskIncrementTick+0x154>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <xTaskIncrementTick+0x4e>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	603b      	str	r3, [r7, #0]
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <xTaskIncrementTick+0x4a>
 800592a:	4b41      	ldr	r3, [pc, #260]	@ (8005a30 <xTaskIncrementTick+0x154>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	4b40      	ldr	r3, [pc, #256]	@ (8005a34 <xTaskIncrementTick+0x158>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3e      	ldr	r2, [pc, #248]	@ (8005a30 <xTaskIncrementTick+0x154>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4a3e      	ldr	r2, [pc, #248]	@ (8005a34 <xTaskIncrementTick+0x158>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a38 <xTaskIncrementTick+0x15c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a3c      	ldr	r2, [pc, #240]	@ (8005a38 <xTaskIncrementTick+0x15c>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	f000 fab2 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a3c <xTaskIncrementTick+0x160>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d348      	bcc.n	80059e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	4b36      	ldr	r3, [pc, #216]	@ (8005a30 <xTaskIncrementTick+0x154>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	4b36      	ldr	r3, [pc, #216]	@ (8005a3c <xTaskIncrementTick+0x160>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005966:	601a      	str	r2, [r3, #0]
					break;
 8005968:	e03e      	b.n	80059e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b31      	ldr	r3, [pc, #196]	@ (8005a30 <xTaskIncrementTick+0x154>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005982:	4a2e      	ldr	r2, [pc, #184]	@ (8005a3c <xTaskIncrementTick+0x160>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005988:	e02e      	b.n	80059e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe ffad 	bl	80048ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3318      	adds	r3, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe ffa4 	bl	80048ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	2201      	movs	r2, #1
 80059ac:	409a      	lsls	r2, r3
 80059ae:	4b24      	ldr	r3, [pc, #144]	@ (8005a40 <xTaskIncrementTick+0x164>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	4a22      	ldr	r2, [pc, #136]	@ (8005a40 <xTaskIncrementTick+0x164>)
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <xTaskIncrementTick+0x168>)
 80059c6:	441a      	add	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f7fe ff30 	bl	8004834 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <xTaskIncrementTick+0x16c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3b9      	bcc.n	8005956 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e6:	e7b6      	b.n	8005956 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059e8:	4b17      	ldr	r3, [pc, #92]	@ (8005a48 <xTaskIncrementTick+0x16c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	4915      	ldr	r1, [pc, #84]	@ (8005a44 <xTaskIncrementTick+0x168>)
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d907      	bls.n	8005a10 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e004      	b.n	8005a10 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a06:	4b11      	ldr	r3, [pc, #68]	@ (8005a4c <xTaskIncrementTick+0x170>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a4c <xTaskIncrementTick+0x170>)
 8005a0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <xTaskIncrementTick+0x174>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a1c:	697b      	ldr	r3, [r7, #20]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000a54 	.word	0x20000a54
 8005a2c:	20000a30 	.word	0x20000a30
 8005a30:	200009e4 	.word	0x200009e4
 8005a34:	200009e8 	.word	0x200009e8
 8005a38:	20000a44 	.word	0x20000a44
 8005a3c:	20000a4c 	.word	0x20000a4c
 8005a40:	20000a34 	.word	0x20000a34
 8005a44:	20000930 	.word	0x20000930
 8005a48:	2000092c 	.word	0x2000092c
 8005a4c:	20000a3c 	.word	0x20000a3c
 8005a50:	20000a40 	.word	0x20000a40

08005a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5a:	4b28      	ldr	r3, [pc, #160]	@ (8005afc <vTaskSwitchContext+0xa8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a62:	4b27      	ldr	r3, [pc, #156]	@ (8005b00 <vTaskSwitchContext+0xac>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a68:	e042      	b.n	8005af0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005a6a:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <vTaskSwitchContext+0xac>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b24      	ldr	r3, [pc, #144]	@ (8005b04 <vTaskSwitchContext+0xb0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	f1c3 031f 	rsb	r3, r3, #31
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	4920      	ldr	r1, [pc, #128]	@ (8005b08 <vTaskSwitchContext+0xb4>)
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <vTaskSwitchContext+0x62>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	b672      	cpsid	i
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	b662      	cpsie	i
 8005aae:	607b      	str	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vTaskSwitchContext+0x5e>
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a11      	ldr	r2, [pc, #68]	@ (8005b08 <vTaskSwitchContext+0xb4>)
 8005ac2:	4413      	add	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d104      	bne.n	8005ae6 <vTaskSwitchContext+0x92>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a07      	ldr	r2, [pc, #28]	@ (8005b0c <vTaskSwitchContext+0xb8>)
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000a54 	.word	0x20000a54
 8005b00:	20000a40 	.word	0x20000a40
 8005b04:	20000a34 	.word	0x20000a34
 8005b08:	20000930 	.word	0x20000930
 8005b0c:	2000092c 	.word	0x2000092c

08005b10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	b672      	cpsid	i
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	b662      	cpsie	i
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b3c:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <vTaskPlaceOnEventList+0x4c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3318      	adds	r3, #24
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fe fe99 	bl	800487c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	6838      	ldr	r0, [r7, #0]
 8005b4e:	f000 fa79 	bl	8006044 <prvAddCurrentTaskToDelayedList>
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000092c 	.word	0x2000092c

08005b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10d      	bne.n	8005b92 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	60fb      	str	r3, [r7, #12]
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	e7fd      	b.n	8005b8e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	3318      	adds	r3, #24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fea9 	bl	80048ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <xTaskRemoveFromEventList+0xb4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11c      	bne.n	8005bde <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fea0 	bl	80048ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	4b18      	ldr	r3, [pc, #96]	@ (8005c18 <xTaskRemoveFromEventList+0xb8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <xTaskRemoveFromEventList+0xb8>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <xTaskRemoveFromEventList+0xbc>)
 8005bce:	441a      	add	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7fe fe2c 	bl	8004834 <vListInsertEnd>
 8005bdc:	e005      	b.n	8005bea <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3318      	adds	r3, #24
 8005be2:	4619      	mov	r1, r3
 8005be4:	480e      	ldr	r0, [pc, #56]	@ (8005c20 <xTaskRemoveFromEventList+0xc0>)
 8005be6:	f7fe fe25 	bl	8004834 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <xTaskRemoveFromEventList+0xc4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d905      	bls.n	8005c04 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <xTaskRemoveFromEventList+0xc8>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e001      	b.n	8005c08 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c08:	697b      	ldr	r3, [r7, #20]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000a54 	.word	0x20000a54
 8005c18:	20000a34 	.word	0x20000a34
 8005c1c:	20000930 	.word	0x20000930
 8005c20:	200009ec 	.word	0x200009ec
 8005c24:	2000092c 	.word	0x2000092c
 8005c28:	20000a40 	.word	0x20000a40

08005c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c34:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <vTaskInternalSetTimeOutState+0x24>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <vTaskInternalSetTimeOutState+0x28>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	605a      	str	r2, [r3, #4]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000a44 	.word	0x20000a44
 8005c54:	20000a30 	.word	0x20000a30

08005c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	613b      	str	r3, [r7, #16]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	60fb      	str	r3, [r7, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005ca6:	f000 fb41 	bl	800632c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <xTaskCheckForTimeOut+0xc8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cc2:	d102      	bne.n	8005cca <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	e023      	b.n	8005d12 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <xTaskCheckForTimeOut+0xcc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d007      	beq.n	8005ce6 <xTaskCheckForTimeOut+0x8e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e015      	b.n	8005d12 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d20b      	bcs.n	8005d08 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff95 	bl	8005c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e004      	b.n	8005d12 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d12:	f000 fb41 	bl	8006398 <vPortExitCritical>

	return xReturn;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000a30 	.word	0x20000a30
 8005d24:	20000a44 	.word	0x20000a44

08005d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <vTaskMissedYield+0x14>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000a40 	.word	0x20000a40

08005d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d48:	f000 f852 	bl	8005df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <prvIdleTask+0x28>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d9f9      	bls.n	8005d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d54:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <prvIdleTask+0x2c>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d64:	e7f0      	b.n	8005d48 <prvIdleTask+0x8>
 8005d66:	bf00      	nop
 8005d68:	20000930 	.word	0x20000930
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	e00c      	b.n	8005d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <prvInitialiseTaskLists+0x60>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fd25 	bl	80047da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d9ef      	bls.n	8005d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d9c:	480d      	ldr	r0, [pc, #52]	@ (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005d9e:	f7fe fd1c 	bl	80047da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005da2:	480d      	ldr	r0, [pc, #52]	@ (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005da4:	f7fe fd19 	bl	80047da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da8:	480c      	ldr	r0, [pc, #48]	@ (8005ddc <prvInitialiseTaskLists+0x6c>)
 8005daa:	f7fe fd16 	bl	80047da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dae:	480c      	ldr	r0, [pc, #48]	@ (8005de0 <prvInitialiseTaskLists+0x70>)
 8005db0:	f7fe fd13 	bl	80047da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db4:	480b      	ldr	r0, [pc, #44]	@ (8005de4 <prvInitialiseTaskLists+0x74>)
 8005db6:	f7fe fd10 	bl	80047da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <prvInitialiseTaskLists+0x78>)
 8005dbc:	4a05      	ldr	r2, [pc, #20]	@ (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <prvInitialiseTaskLists+0x7c>)
 8005dc2:	4a05      	ldr	r2, [pc, #20]	@ (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000930 	.word	0x20000930
 8005dd4:	200009bc 	.word	0x200009bc
 8005dd8:	200009d0 	.word	0x200009d0
 8005ddc:	200009ec 	.word	0x200009ec
 8005de0:	20000a00 	.word	0x20000a00
 8005de4:	20000a18 	.word	0x20000a18
 8005de8:	200009e4 	.word	0x200009e4
 8005dec:	200009e8 	.word	0x200009e8

08005df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df6:	e019      	b.n	8005e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df8:	f000 fa98 	bl	800632c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <prvCheckTasksWaitingTermination+0x50>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fd70 	bl	80048ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	4a0b      	ldr	r2, [pc, #44]	@ (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e18:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e22:	f000 fab9 	bl	8006398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f810 	bl	8005e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e1      	bne.n	8005df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000a00 	.word	0x20000a00
 8005e44:	20000a2c 	.word	0x20000a2c
 8005e48:	20000a14 	.word	0x20000a14

08005e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fc18 	bl	8006698 <vPortFree>
				vPortFree( pxTCB );
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fc15 	bl	8006698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e6e:	e01b      	b.n	8005ea8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d103      	bne.n	8005e82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fc0c 	bl	8006698 <vPortFree>
	}
 8005e80:	e012      	b.n	8005ea8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d00d      	beq.n	8005ea8 <prvDeleteTCB+0x5c>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	b672      	cpsid	i
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	b662      	cpsie	i
 8005ea0:	60fb      	str	r3, [r7, #12]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <prvDeleteTCB+0x58>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ec8:	e008      	b.n	8005edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	@ (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	200009e4 	.word	0x200009e4
 8005eec:	20000a4c 	.word	0x20000a4c

08005ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <xTaskGetSchedulerState+0x34>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005efe:	2301      	movs	r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e008      	b.n	8005f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f04:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <xTaskGetSchedulerState+0x38>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	e001      	b.n	8005f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f16:	687b      	ldr	r3, [r7, #4]
	}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	20000a38 	.word	0x20000a38
 8005f28:	20000a54 	.word	0x20000a54

08005f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d074      	beq.n	800602c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f42:	4b3d      	ldr	r3, [pc, #244]	@ (8006038 <xTaskPriorityDisinherit+0x10c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d00d      	beq.n	8005f68 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	b672      	cpsid	i
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	b662      	cpsie	i
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10d      	bne.n	8005f8c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	b672      	cpsid	i
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	b662      	cpsie	i
 8005f84:	60bb      	str	r3, [r7, #8]
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	e7fd      	b.n	8005f88 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d044      	beq.n	800602c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d140      	bne.n	800602c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fc9d 	bl	80048ee <uxListRemove>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbe:	491f      	ldr	r1, [pc, #124]	@ (800603c <xTaskPriorityDisinherit+0x110>)
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xTaskPriorityDisinherit+0xba>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	4b18      	ldr	r3, [pc, #96]	@ (8006040 <xTaskPriorityDisinherit+0x114>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	4a17      	ldr	r2, [pc, #92]	@ (8006040 <xTaskPriorityDisinherit+0x114>)
 8005fe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff2:	f1c3 0207 	rsb	r2, r3, #7
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <xTaskPriorityDisinherit+0x114>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4313      	orrs	r3, r2
 8006008:	4a0d      	ldr	r2, [pc, #52]	@ (8006040 <xTaskPriorityDisinherit+0x114>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <xTaskPriorityDisinherit+0x110>)
 800601a:	441a      	add	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fe fc06 	bl	8004834 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800602c:	697b      	ldr	r3, [r7, #20]
	}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	2000092c 	.word	0x2000092c
 800603c:	20000930 	.word	0x20000930
 8006040:	20000a34 	.word	0x20000a34

08006044 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800604e:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006054:	4b28      	ldr	r3, [pc, #160]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc47 	bl	80048ee <uxListRemove>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006066:	4b24      	ldr	r3, [pc, #144]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	4b21      	ldr	r3, [pc, #132]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	4a20      	ldr	r2, [pc, #128]	@ (80060fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800607c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006084:	d10a      	bne.n	800609c <prvAddCurrentTaskToDelayedList+0x58>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608c:	4b1a      	ldr	r3, [pc, #104]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	4619      	mov	r1, r3
 8006094:	481a      	ldr	r0, [pc, #104]	@ (8006100 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006096:	f7fe fbcd 	bl	8004834 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800609a:	e026      	b.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a4:	4b14      	ldr	r3, [pc, #80]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d209      	bcs.n	80060c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b4:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b0f      	ldr	r3, [pc, #60]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f7fe fbdb 	bl	800487c <vListInsert>
}
 80060c6:	e010      	b.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe fbd1 	bl	800487c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060da:	4b0c      	ldr	r3, [pc, #48]	@ (800610c <prvAddCurrentTaskToDelayedList+0xc8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d202      	bcs.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060e4:	4a09      	ldr	r2, [pc, #36]	@ (800610c <prvAddCurrentTaskToDelayedList+0xc8>)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6013      	str	r3, [r2, #0]
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000a30 	.word	0x20000a30
 80060f8:	2000092c 	.word	0x2000092c
 80060fc:	20000a34 	.word	0x20000a34
 8006100:	20000a18 	.word	0x20000a18
 8006104:	200009e8 	.word	0x200009e8
 8006108:	200009e4 	.word	0x200009e4
 800610c:	20000a4c 	.word	0x20000a4c

08006110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3b04      	subs	r3, #4
 8006120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3b04      	subs	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b04      	subs	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006140:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <pxPortInitialiseStack+0x64>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b14      	subs	r3, #20
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b04      	subs	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f06f 0202 	mvn.w	r2, #2
 800615e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3b20      	subs	r3, #32
 8006164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	08006179 	.word	0x08006179

08006178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006182:	4b15      	ldr	r3, [pc, #84]	@ (80061d8 <prvTaskExitError+0x60>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800618a:	d00d      	beq.n	80061a8 <prvTaskExitError+0x30>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	b672      	cpsid	i
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	b662      	cpsie	i
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <prvTaskExitError+0x2c>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	b672      	cpsid	i
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	b662      	cpsie	i
 80061bc:	60bb      	str	r3, [r7, #8]
}
 80061be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c0:	bf00      	nop
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0fc      	beq.n	80061c2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	2000000c 	.word	0x2000000c
 80061dc:	00000000 	.word	0x00000000

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	4770      	bx	lr
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst2>:
 8006200:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006208:	4808      	ldr	r0, [pc, #32]	@ (800622c <prvPortStartFirstTask+0x24>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8814 	msr	CONTROL, r0
 800621a:	b662      	cpsie	i
 800621c:	b661      	cpsie	f
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	df00      	svc	0
 8006228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800622a:	bf00      	nop
 800622c:	e000ed08 	.word	0xe000ed08

08006230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006236:	4b37      	ldr	r3, [pc, #220]	@ (8006314 <xPortStartScheduler+0xe4>)
 8006238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	22ff      	movs	r2, #255	@ 0xff
 8006246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b2f      	ldr	r3, [pc, #188]	@ (8006318 <xPortStartScheduler+0xe8>)
 800625c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800625e:	4b2f      	ldr	r3, [pc, #188]	@ (800631c <xPortStartScheduler+0xec>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006264:	e009      	b.n	800627a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006266:	4b2d      	ldr	r3, [pc, #180]	@ (800631c <xPortStartScheduler+0xec>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3b01      	subs	r3, #1
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <xPortStartScheduler+0xec>)
 800626e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006282:	2b80      	cmp	r3, #128	@ 0x80
 8006284:	d0ef      	beq.n	8006266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006286:	4b25      	ldr	r3, [pc, #148]	@ (800631c <xPortStartScheduler+0xec>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00d      	beq.n	80062ae <xPortStartScheduler+0x7e>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	b672      	cpsid	i
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	b662      	cpsie	i
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062ae:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <xPortStartScheduler+0xec>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	4a19      	ldr	r2, [pc, #100]	@ (800631c <xPortStartScheduler+0xec>)
 80062b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062b8:	4b18      	ldr	r3, [pc, #96]	@ (800631c <xPortStartScheduler+0xec>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062c0:	4a16      	ldr	r2, [pc, #88]	@ (800631c <xPortStartScheduler+0xec>)
 80062c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062cc:	4b14      	ldr	r3, [pc, #80]	@ (8006320 <xPortStartScheduler+0xf0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a13      	ldr	r2, [pc, #76]	@ (8006320 <xPortStartScheduler+0xf0>)
 80062d2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80062d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062d8:	4b11      	ldr	r3, [pc, #68]	@ (8006320 <xPortStartScheduler+0xf0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a10      	ldr	r2, [pc, #64]	@ (8006320 <xPortStartScheduler+0xf0>)
 80062de:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80062e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062e4:	f000 f8dc 	bl	80064a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <xPortStartScheduler+0xf4>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062ee:	f000 f8fb 	bl	80064e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <xPortStartScheduler+0xf8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006328 <xPortStartScheduler+0xf8>)
 80062f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062fe:	f7ff ff83 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006302:	f7ff fba7 	bl	8005a54 <vTaskSwitchContext>
	prvTaskExitError();
 8006306:	f7ff ff37 	bl	8006178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	e000e400 	.word	0xe000e400
 8006318:	20000a58 	.word	0x20000a58
 800631c:	20000a5c 	.word	0x20000a5c
 8006320:	e000ed20 	.word	0xe000ed20
 8006324:	2000000c 	.word	0x2000000c
 8006328:	e000ef34 	.word	0xe000ef34

0800632c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	b672      	cpsid	i
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	b662      	cpsie	i
 8006346:	607b      	str	r3, [r7, #4]
}
 8006348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800634a:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <vPortEnterCritical+0x64>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a0f      	ldr	r2, [pc, #60]	@ (8006390 <vPortEnterCritical+0x64>)
 8006352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006354:	4b0e      	ldr	r3, [pc, #56]	@ (8006390 <vPortEnterCritical+0x64>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d112      	bne.n	8006382 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <vPortEnterCritical+0x68>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <vPortEnterCritical+0x56>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <vPortEnterCritical+0x52>
	}
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000000c 	.word	0x2000000c
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800639e:	4b13      	ldr	r3, [pc, #76]	@ (80063ec <vPortExitCritical+0x54>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10d      	bne.n	80063c2 <vPortExitCritical+0x2a>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	b672      	cpsid	i
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	b662      	cpsie	i
 80063ba:	607b      	str	r3, [r7, #4]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <vPortExitCritical+0x54>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <vPortExitCritical+0x54>)
 80063ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vPortExitCritical+0x54>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <vPortExitCritical+0x48>
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063f0:	f3ef 8009 	mrs	r0, PSP
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <pxCurrentTCBConst>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f01e 0f10 	tst.w	lr, #16
 8006400:	bf08      	it	eq
 8006402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	6010      	str	r0, [r2, #0]
 800640c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006414:	b672      	cpsid	i
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	b662      	cpsie	i
 8006424:	f7ff fb16 	bl	8005a54 <vTaskSwitchContext>
 8006428:	f04f 0000 	mov.w	r0, #0
 800642c:	f380 8811 	msr	BASEPRI, r0
 8006430:	bc09      	pop	{r0, r3}
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f01e 0f10 	tst.w	lr, #16
 800643e:	bf08      	it	eq
 8006440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006444:	f380 8809 	msr	PSP, r0
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <pxCurrentTCBConst>:
 8006450:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	b672      	cpsid	i
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	b662      	cpsie	i
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006476:	f7ff fa31 	bl	80058dc <xTaskIncrementTick>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <xPortSysTickHandler+0x44>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f383 8811 	msr	BASEPRI, r3
}
 8006492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a4:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <vPortSetupTimerInterrupt+0x34>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064aa:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <vPortSetupTimerInterrupt+0x38>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <vPortSetupTimerInterrupt+0x3c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	@ (80064e0 <vPortSetupTimerInterrupt+0x40>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <vPortSetupTimerInterrupt+0x44>)
 80064be:	3b01      	subs	r3, #1
 80064c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064c2:	4b04      	ldr	r3, [pc, #16]	@ (80064d4 <vPortSetupTimerInterrupt+0x34>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	601a      	str	r2, [r3, #0]
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	e000e010 	.word	0xe000e010
 80064d8:	e000e018 	.word	0xe000e018
 80064dc:	20000000 	.word	0x20000000
 80064e0:	10624dd3 	.word	0x10624dd3
 80064e4:	e000e014 	.word	0xe000e014

080064e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064f8 <vPortEnableVFP+0x10>
 80064ec:	6801      	ldr	r1, [r0, #0]
 80064ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064f2:	6001      	str	r1, [r0, #0]
 80064f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064f6:	bf00      	nop
 80064f8:	e000ed88 	.word	0xe000ed88

080064fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006508:	f7ff f93a 	bl	8005780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800650c:	4b5d      	ldr	r3, [pc, #372]	@ (8006684 <pvPortMalloc+0x188>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006514:	f000 f920 	bl	8006758 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006518:	4b5b      	ldr	r3, [pc, #364]	@ (8006688 <pvPortMalloc+0x18c>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8094 	bne.w	800664e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800652c:	2208      	movs	r2, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d017      	beq.n	800656e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	3308      	adds	r3, #8
 8006546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <pvPortMalloc+0x72>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	617b      	str	r3, [r7, #20]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d06c      	beq.n	800664e <pvPortMalloc+0x152>
 8006574:	4b45      	ldr	r3, [pc, #276]	@ (800668c <pvPortMalloc+0x190>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d867      	bhi.n	800664e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800657e:	4b44      	ldr	r3, [pc, #272]	@ (8006690 <pvPortMalloc+0x194>)
 8006580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006582:	4b43      	ldr	r3, [pc, #268]	@ (8006690 <pvPortMalloc+0x194>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006588:	e004      	b.n	8006594 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d903      	bls.n	80065a6 <pvPortMalloc+0xaa>
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f1      	bne.n	800658a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065a6:	4b37      	ldr	r3, [pc, #220]	@ (8006684 <pvPortMalloc+0x188>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d04e      	beq.n	800664e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2208      	movs	r2, #8
 80065b6:	4413      	add	r3, r2
 80065b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	2308      	movs	r3, #8
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d922      	bls.n	8006618 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4413      	add	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <pvPortMalloc+0x104>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
 80065f8:	613b      	str	r3, [r7, #16]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006612:	69b8      	ldr	r0, [r7, #24]
 8006614:	f000 f904 	bl	8006820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006618:	4b1c      	ldr	r3, [pc, #112]	@ (800668c <pvPortMalloc+0x190>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1a      	ldr	r2, [pc, #104]	@ (800668c <pvPortMalloc+0x190>)
 8006624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006626:	4b19      	ldr	r3, [pc, #100]	@ (800668c <pvPortMalloc+0x190>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b1a      	ldr	r3, [pc, #104]	@ (8006694 <pvPortMalloc+0x198>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d203      	bcs.n	800663a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006632:	4b16      	ldr	r3, [pc, #88]	@ (800668c <pvPortMalloc+0x190>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a17      	ldr	r2, [pc, #92]	@ (8006694 <pvPortMalloc+0x198>)
 8006638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <pvPortMalloc+0x18c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	431a      	orrs	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800664e:	f7ff f8a5 	bl	800579c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <pvPortMalloc+0x17c>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	b672      	cpsid	i
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	b662      	cpsie	i
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <pvPortMalloc+0x178>
	return pvReturn;
 8006678:	69fb      	ldr	r3, [r7, #28]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3728      	adds	r7, #40	@ 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20027b68 	.word	0x20027b68
 8006688:	20027b74 	.word	0x20027b74
 800668c:	20027b6c 	.word	0x20027b6c
 8006690:	20027b60 	.word	0x20027b60
 8006694:	20027b70 	.word	0x20027b70

08006698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04e      	beq.n	8006748 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066aa:	2308      	movs	r3, #8
 80066ac:	425b      	negs	r3, r3
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <vPortFree+0xb8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <vPortFree+0x4a>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <vPortFree+0x6e>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	b672      	cpsid	i
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	b662      	cpsie	i
 80066fe:	60bb      	str	r3, [r7, #8]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <vPortFree+0xb8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d019      	beq.n	8006748 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d115      	bne.n	8006748 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <vPortFree+0xb8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	43db      	mvns	r3, r3
 8006726:	401a      	ands	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800672c:	f7ff f828 	bl	8005780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	4b07      	ldr	r3, [pc, #28]	@ (8006754 <vPortFree+0xbc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4413      	add	r3, r2
 800673a:	4a06      	ldr	r2, [pc, #24]	@ (8006754 <vPortFree+0xbc>)
 800673c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800673e:	6938      	ldr	r0, [r7, #16]
 8006740:	f000 f86e 	bl	8006820 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006744:	f7ff f82a 	bl	800579c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006748:	bf00      	nop
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20027b74 	.word	0x20027b74
 8006754:	20027b6c 	.word	0x20027b6c

08006758 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800675e:	4b29      	ldr	r3, [pc, #164]	@ (8006804 <prvHeapInit+0xac>)
 8006760:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006762:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <prvHeapInit+0xb0>)
 8006764:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3307      	adds	r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	4a20      	ldr	r2, [pc, #128]	@ (8006808 <prvHeapInit+0xb0>)
 8006786:	4413      	add	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800678e:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <prvHeapInit+0xb4>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006794:	4b1d      	ldr	r3, [pc, #116]	@ (800680c <prvHeapInit+0xb4>)
 8006796:	2200      	movs	r2, #0
 8006798:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4413      	add	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067a2:	2208      	movs	r2, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f023 0307 	bic.w	r3, r3, #7
 80067b0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <prvHeapInit+0xb8>)
 80067b6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <prvHeapInit+0xb8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2200      	movs	r2, #0
 80067be:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067c0:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <prvHeapInit+0xb8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <prvHeapInit+0xb8>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006814 <prvHeapInit+0xbc>)
 80067e4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006818 <prvHeapInit+0xc0>)
 80067ec:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067ee:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <prvHeapInit+0xc4>)
 80067f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	00027100 	.word	0x00027100
 8006808:	20000a60 	.word	0x20000a60
 800680c:	20027b60 	.word	0x20027b60
 8006810:	20027b68 	.word	0x20027b68
 8006814:	20027b70 	.word	0x20027b70
 8006818:	20027b6c 	.word	0x20027b6c
 800681c:	20027b74 	.word	0x20027b74

08006820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006828:	4b28      	ldr	r3, [pc, #160]	@ (80068cc <prvInsertBlockIntoFreeList+0xac>)
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e002      	b.n	8006834 <prvInsertBlockIntoFreeList+0x14>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d8f7      	bhi.n	800682e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4413      	add	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d108      	bne.n	8006862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d118      	bne.n	80068a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <prvInsertBlockIntoFreeList+0xb0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d00d      	beq.n	800689e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e008      	b.n	80068b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <prvInsertBlockIntoFreeList+0xb0>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e003      	b.n	80068b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d002      	beq.n	80068be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20027b60 	.word	0x20027b60
 80068d0:	20027b68 	.word	0x20027b68

080068d4 <atoi>:
 80068d4:	220a      	movs	r2, #10
 80068d6:	2100      	movs	r1, #0
 80068d8:	f000 b87a 	b.w	80069d0 <strtol>

080068dc <_strtol_l.isra.0>:
 80068dc:	2b24      	cmp	r3, #36	@ 0x24
 80068de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e2:	4686      	mov	lr, r0
 80068e4:	4690      	mov	r8, r2
 80068e6:	d801      	bhi.n	80068ec <_strtol_l.isra.0+0x10>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <_strtol_l.isra.0+0x1e>
 80068ec:	f000 fb08 	bl	8006f00 <__errno>
 80068f0:	2316      	movs	r3, #22
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	2000      	movs	r0, #0
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	4834      	ldr	r0, [pc, #208]	@ (80069cc <_strtol_l.isra.0+0xf0>)
 80068fc:	460d      	mov	r5, r1
 80068fe:	462a      	mov	r2, r5
 8006900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006904:	5d06      	ldrb	r6, [r0, r4]
 8006906:	f016 0608 	ands.w	r6, r6, #8
 800690a:	d1f8      	bne.n	80068fe <_strtol_l.isra.0+0x22>
 800690c:	2c2d      	cmp	r4, #45	@ 0x2d
 800690e:	d110      	bne.n	8006932 <_strtol_l.isra.0+0x56>
 8006910:	782c      	ldrb	r4, [r5, #0]
 8006912:	2601      	movs	r6, #1
 8006914:	1c95      	adds	r5, r2, #2
 8006916:	f033 0210 	bics.w	r2, r3, #16
 800691a:	d115      	bne.n	8006948 <_strtol_l.isra.0+0x6c>
 800691c:	2c30      	cmp	r4, #48	@ 0x30
 800691e:	d10d      	bne.n	800693c <_strtol_l.isra.0+0x60>
 8006920:	782a      	ldrb	r2, [r5, #0]
 8006922:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006926:	2a58      	cmp	r2, #88	@ 0x58
 8006928:	d108      	bne.n	800693c <_strtol_l.isra.0+0x60>
 800692a:	786c      	ldrb	r4, [r5, #1]
 800692c:	3502      	adds	r5, #2
 800692e:	2310      	movs	r3, #16
 8006930:	e00a      	b.n	8006948 <_strtol_l.isra.0+0x6c>
 8006932:	2c2b      	cmp	r4, #43	@ 0x2b
 8006934:	bf04      	itt	eq
 8006936:	782c      	ldrbeq	r4, [r5, #0]
 8006938:	1c95      	addeq	r5, r2, #2
 800693a:	e7ec      	b.n	8006916 <_strtol_l.isra.0+0x3a>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f6      	bne.n	800692e <_strtol_l.isra.0+0x52>
 8006940:	2c30      	cmp	r4, #48	@ 0x30
 8006942:	bf14      	ite	ne
 8006944:	230a      	movne	r3, #10
 8006946:	2308      	moveq	r3, #8
 8006948:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800694c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006950:	2200      	movs	r2, #0
 8006952:	fbbc f9f3 	udiv	r9, ip, r3
 8006956:	4610      	mov	r0, r2
 8006958:	fb03 ca19 	mls	sl, r3, r9, ip
 800695c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006960:	2f09      	cmp	r7, #9
 8006962:	d80f      	bhi.n	8006984 <_strtol_l.isra.0+0xa8>
 8006964:	463c      	mov	r4, r7
 8006966:	42a3      	cmp	r3, r4
 8006968:	dd1b      	ble.n	80069a2 <_strtol_l.isra.0+0xc6>
 800696a:	1c57      	adds	r7, r2, #1
 800696c:	d007      	beq.n	800697e <_strtol_l.isra.0+0xa2>
 800696e:	4581      	cmp	r9, r0
 8006970:	d314      	bcc.n	800699c <_strtol_l.isra.0+0xc0>
 8006972:	d101      	bne.n	8006978 <_strtol_l.isra.0+0x9c>
 8006974:	45a2      	cmp	sl, r4
 8006976:	db11      	blt.n	800699c <_strtol_l.isra.0+0xc0>
 8006978:	fb00 4003 	mla	r0, r0, r3, r4
 800697c:	2201      	movs	r2, #1
 800697e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006982:	e7eb      	b.n	800695c <_strtol_l.isra.0+0x80>
 8006984:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006988:	2f19      	cmp	r7, #25
 800698a:	d801      	bhi.n	8006990 <_strtol_l.isra.0+0xb4>
 800698c:	3c37      	subs	r4, #55	@ 0x37
 800698e:	e7ea      	b.n	8006966 <_strtol_l.isra.0+0x8a>
 8006990:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006994:	2f19      	cmp	r7, #25
 8006996:	d804      	bhi.n	80069a2 <_strtol_l.isra.0+0xc6>
 8006998:	3c57      	subs	r4, #87	@ 0x57
 800699a:	e7e4      	b.n	8006966 <_strtol_l.isra.0+0x8a>
 800699c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069a0:	e7ed      	b.n	800697e <_strtol_l.isra.0+0xa2>
 80069a2:	1c53      	adds	r3, r2, #1
 80069a4:	d108      	bne.n	80069b8 <_strtol_l.isra.0+0xdc>
 80069a6:	2322      	movs	r3, #34	@ 0x22
 80069a8:	f8ce 3000 	str.w	r3, [lr]
 80069ac:	4660      	mov	r0, ip
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d0a0      	beq.n	80068f6 <_strtol_l.isra.0+0x1a>
 80069b4:	1e69      	subs	r1, r5, #1
 80069b6:	e006      	b.n	80069c6 <_strtol_l.isra.0+0xea>
 80069b8:	b106      	cbz	r6, 80069bc <_strtol_l.isra.0+0xe0>
 80069ba:	4240      	negs	r0, r0
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	d099      	beq.n	80068f6 <_strtol_l.isra.0+0x1a>
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d1f6      	bne.n	80069b4 <_strtol_l.isra.0+0xd8>
 80069c6:	f8c8 1000 	str.w	r1, [r8]
 80069ca:	e794      	b.n	80068f6 <_strtol_l.isra.0+0x1a>
 80069cc:	08007ec1 	.word	0x08007ec1

080069d0 <strtol>:
 80069d0:	4613      	mov	r3, r2
 80069d2:	460a      	mov	r2, r1
 80069d4:	4601      	mov	r1, r0
 80069d6:	4802      	ldr	r0, [pc, #8]	@ (80069e0 <strtol+0x10>)
 80069d8:	6800      	ldr	r0, [r0, #0]
 80069da:	f7ff bf7f 	b.w	80068dc <_strtol_l.isra.0>
 80069de:	bf00      	nop
 80069e0:	2000001c 	.word	0x2000001c

080069e4 <std>:
 80069e4:	2300      	movs	r3, #0
 80069e6:	b510      	push	{r4, lr}
 80069e8:	4604      	mov	r4, r0
 80069ea:	e9c0 3300 	strd	r3, r3, [r0]
 80069ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069f2:	6083      	str	r3, [r0, #8]
 80069f4:	8181      	strh	r1, [r0, #12]
 80069f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069f8:	81c2      	strh	r2, [r0, #14]
 80069fa:	6183      	str	r3, [r0, #24]
 80069fc:	4619      	mov	r1, r3
 80069fe:	2208      	movs	r2, #8
 8006a00:	305c      	adds	r0, #92	@ 0x5c
 8006a02:	f000 fa2f 	bl	8006e64 <memset>
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <std+0x58>)
 8006a08:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <std+0x5c>)
 8006a0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x60>)
 8006a10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <std+0x64>)
 8006a14:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <std+0x68>)
 8006a18:	6224      	str	r4, [r4, #32]
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d006      	beq.n	8006a2c <std+0x48>
 8006a1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a22:	4294      	cmp	r4, r2
 8006a24:	d002      	beq.n	8006a2c <std+0x48>
 8006a26:	33d0      	adds	r3, #208	@ 0xd0
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d105      	bne.n	8006a38 <std+0x54>
 8006a2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a34:	f000 ba8e 	b.w	8006f54 <__retarget_lock_init_recursive>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08006cb5 	.word	0x08006cb5
 8006a40:	08006cd7 	.word	0x08006cd7
 8006a44:	08006d0f 	.word	0x08006d0f
 8006a48:	08006d33 	.word	0x08006d33
 8006a4c:	20027b78 	.word	0x20027b78

08006a50 <stdio_exit_handler>:
 8006a50:	4a02      	ldr	r2, [pc, #8]	@ (8006a5c <stdio_exit_handler+0xc>)
 8006a52:	4903      	ldr	r1, [pc, #12]	@ (8006a60 <stdio_exit_handler+0x10>)
 8006a54:	4803      	ldr	r0, [pc, #12]	@ (8006a64 <stdio_exit_handler+0x14>)
 8006a56:	f000 b869 	b.w	8006b2c <_fwalk_sglue>
 8006a5a:	bf00      	nop
 8006a5c:	20000010 	.word	0x20000010
 8006a60:	08007abd 	.word	0x08007abd
 8006a64:	20000020 	.word	0x20000020

08006a68 <cleanup_stdio>:
 8006a68:	6841      	ldr	r1, [r0, #4]
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a9c <cleanup_stdio+0x34>)
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	4604      	mov	r4, r0
 8006a72:	d001      	beq.n	8006a78 <cleanup_stdio+0x10>
 8006a74:	f001 f822 	bl	8007abc <_fflush_r>
 8006a78:	68a1      	ldr	r1, [r4, #8]
 8006a7a:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <cleanup_stdio+0x38>)
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	d002      	beq.n	8006a86 <cleanup_stdio+0x1e>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f001 f81b 	bl	8007abc <_fflush_r>
 8006a86:	68e1      	ldr	r1, [r4, #12]
 8006a88:	4b06      	ldr	r3, [pc, #24]	@ (8006aa4 <cleanup_stdio+0x3c>)
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	d004      	beq.n	8006a98 <cleanup_stdio+0x30>
 8006a8e:	4620      	mov	r0, r4
 8006a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a94:	f001 b812 	b.w	8007abc <_fflush_r>
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20027b78 	.word	0x20027b78
 8006aa0:	20027be0 	.word	0x20027be0
 8006aa4:	20027c48 	.word	0x20027c48

08006aa8 <global_stdio_init.part.0>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad8 <global_stdio_init.part.0+0x30>)
 8006aac:	4c0b      	ldr	r4, [pc, #44]	@ (8006adc <global_stdio_init.part.0+0x34>)
 8006aae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae0 <global_stdio_init.part.0+0x38>)
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	f7ff ff94 	bl	80069e4 <std>
 8006abc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	2109      	movs	r1, #9
 8006ac4:	f7ff ff8e 	bl	80069e4 <std>
 8006ac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006acc:	2202      	movs	r2, #2
 8006ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad2:	2112      	movs	r1, #18
 8006ad4:	f7ff bf86 	b.w	80069e4 <std>
 8006ad8:	20027cb0 	.word	0x20027cb0
 8006adc:	20027b78 	.word	0x20027b78
 8006ae0:	08006a51 	.word	0x08006a51

08006ae4 <__sfp_lock_acquire>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	@ (8006aec <__sfp_lock_acquire+0x8>)
 8006ae6:	f000 ba36 	b.w	8006f56 <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	20027cb9 	.word	0x20027cb9

08006af0 <__sfp_lock_release>:
 8006af0:	4801      	ldr	r0, [pc, #4]	@ (8006af8 <__sfp_lock_release+0x8>)
 8006af2:	f000 ba31 	b.w	8006f58 <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	20027cb9 	.word	0x20027cb9

08006afc <__sinit>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	f7ff fff0 	bl	8006ae4 <__sfp_lock_acquire>
 8006b04:	6a23      	ldr	r3, [r4, #32]
 8006b06:	b11b      	cbz	r3, 8006b10 <__sinit+0x14>
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f7ff bff0 	b.w	8006af0 <__sfp_lock_release>
 8006b10:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <__sinit+0x28>)
 8006b12:	6223      	str	r3, [r4, #32]
 8006b14:	4b04      	ldr	r3, [pc, #16]	@ (8006b28 <__sinit+0x2c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f5      	bne.n	8006b08 <__sinit+0xc>
 8006b1c:	f7ff ffc4 	bl	8006aa8 <global_stdio_init.part.0>
 8006b20:	e7f2      	b.n	8006b08 <__sinit+0xc>
 8006b22:	bf00      	nop
 8006b24:	08006a69 	.word	0x08006a69
 8006b28:	20027cb0 	.word	0x20027cb0

08006b2c <_fwalk_sglue>:
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	4607      	mov	r7, r0
 8006b32:	4688      	mov	r8, r1
 8006b34:	4614      	mov	r4, r2
 8006b36:	2600      	movs	r6, #0
 8006b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b40:	d505      	bpl.n	8006b4e <_fwalk_sglue+0x22>
 8006b42:	6824      	ldr	r4, [r4, #0]
 8006b44:	2c00      	cmp	r4, #0
 8006b46:	d1f7      	bne.n	8006b38 <_fwalk_sglue+0xc>
 8006b48:	4630      	mov	r0, r6
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d907      	bls.n	8006b64 <_fwalk_sglue+0x38>
 8006b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	d003      	beq.n	8006b64 <_fwalk_sglue+0x38>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4638      	mov	r0, r7
 8006b60:	47c0      	blx	r8
 8006b62:	4306      	orrs	r6, r0
 8006b64:	3568      	adds	r5, #104	@ 0x68
 8006b66:	e7e9      	b.n	8006b3c <_fwalk_sglue+0x10>

08006b68 <iprintf>:
 8006b68:	b40f      	push	{r0, r1, r2, r3}
 8006b6a:	b507      	push	{r0, r1, r2, lr}
 8006b6c:	4906      	ldr	r1, [pc, #24]	@ (8006b88 <iprintf+0x20>)
 8006b6e:	ab04      	add	r3, sp, #16
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b76:	6881      	ldr	r1, [r0, #8]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f000 fc77 	bl	800746c <_vfiprintf_r>
 8006b7e:	b003      	add	sp, #12
 8006b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b84:	b004      	add	sp, #16
 8006b86:	4770      	bx	lr
 8006b88:	2000001c 	.word	0x2000001c

08006b8c <_puts_r>:
 8006b8c:	6a03      	ldr	r3, [r0, #32]
 8006b8e:	b570      	push	{r4, r5, r6, lr}
 8006b90:	6884      	ldr	r4, [r0, #8]
 8006b92:	4605      	mov	r5, r0
 8006b94:	460e      	mov	r6, r1
 8006b96:	b90b      	cbnz	r3, 8006b9c <_puts_r+0x10>
 8006b98:	f7ff ffb0 	bl	8006afc <__sinit>
 8006b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b9e:	07db      	lsls	r3, r3, #31
 8006ba0:	d405      	bmi.n	8006bae <_puts_r+0x22>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	0598      	lsls	r0, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_puts_r+0x22>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006baa:	f000 f9d4 	bl	8006f56 <__retarget_lock_acquire_recursive>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	0719      	lsls	r1, r3, #28
 8006bb2:	d502      	bpl.n	8006bba <_puts_r+0x2e>
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d135      	bne.n	8006c26 <_puts_r+0x9a>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f000 f8fb 	bl	8006db8 <__swsetup_r>
 8006bc2:	b380      	cbz	r0, 8006c26 <_puts_r+0x9a>
 8006bc4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bca:	07da      	lsls	r2, r3, #31
 8006bcc:	d405      	bmi.n	8006bda <_puts_r+0x4e>
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	059b      	lsls	r3, r3, #22
 8006bd2:	d402      	bmi.n	8006bda <_puts_r+0x4e>
 8006bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bd6:	f000 f9bf 	bl	8006f58 <__retarget_lock_release_recursive>
 8006bda:	4628      	mov	r0, r5
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da04      	bge.n	8006bec <_puts_r+0x60>
 8006be2:	69a2      	ldr	r2, [r4, #24]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	dc17      	bgt.n	8006c18 <_puts_r+0x8c>
 8006be8:	290a      	cmp	r1, #10
 8006bea:	d015      	beq.n	8006c18 <_puts_r+0x8c>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	7019      	strb	r1, [r3, #0]
 8006bf4:	68a3      	ldr	r3, [r4, #8]
 8006bf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	60a3      	str	r3, [r4, #8]
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	d1ed      	bne.n	8006bde <_puts_r+0x52>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da11      	bge.n	8006c2a <_puts_r+0x9e>
 8006c06:	4622      	mov	r2, r4
 8006c08:	210a      	movs	r1, #10
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 f895 	bl	8006d3a <__swbuf_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d0d7      	beq.n	8006bc4 <_puts_r+0x38>
 8006c14:	250a      	movs	r5, #10
 8006c16:	e7d7      	b.n	8006bc8 <_puts_r+0x3c>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f88d 	bl	8006d3a <__swbuf_r>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d1e7      	bne.n	8006bf4 <_puts_r+0x68>
 8006c24:	e7ce      	b.n	8006bc4 <_puts_r+0x38>
 8006c26:	3e01      	subs	r6, #1
 8006c28:	e7e4      	b.n	8006bf4 <_puts_r+0x68>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	220a      	movs	r2, #10
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e7ee      	b.n	8006c14 <_puts_r+0x88>
	...

08006c38 <puts>:
 8006c38:	4b02      	ldr	r3, [pc, #8]	@ (8006c44 <puts+0xc>)
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	f7ff bfa5 	b.w	8006b8c <_puts_r>
 8006c42:	bf00      	nop
 8006c44:	2000001c 	.word	0x2000001c

08006c48 <sniprintf>:
 8006c48:	b40c      	push	{r2, r3}
 8006c4a:	b530      	push	{r4, r5, lr}
 8006c4c:	4b18      	ldr	r3, [pc, #96]	@ (8006cb0 <sniprintf+0x68>)
 8006c4e:	1e0c      	subs	r4, r1, #0
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	b09d      	sub	sp, #116	@ 0x74
 8006c54:	da08      	bge.n	8006c68 <sniprintf+0x20>
 8006c56:	238b      	movs	r3, #139	@ 0x8b
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c5e:	b01d      	add	sp, #116	@ 0x74
 8006c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c64:	b002      	add	sp, #8
 8006c66:	4770      	bx	lr
 8006c68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006c76:	bf14      	ite	ne
 8006c78:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006c7c:	4623      	moveq	r3, r4
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9307      	str	r3, [sp, #28]
 8006c82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c86:	9002      	str	r0, [sp, #8]
 8006c88:	9006      	str	r0, [sp, #24]
 8006c8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c90:	ab21      	add	r3, sp, #132	@ 0x84
 8006c92:	a902      	add	r1, sp, #8
 8006c94:	4628      	mov	r0, r5
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	f000 fac2 	bl	8007220 <_svfiprintf_r>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	bfbc      	itt	lt
 8006ca0:	238b      	movlt	r3, #139	@ 0x8b
 8006ca2:	602b      	strlt	r3, [r5, #0]
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d0da      	beq.n	8006c5e <sniprintf+0x16>
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	e7d6      	b.n	8006c5e <sniprintf+0x16>
 8006cb0:	2000001c 	.word	0x2000001c

08006cb4 <__sread>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f8fc 	bl	8006eb8 <_read_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	bfab      	itete	ge
 8006cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc8:	181b      	addge	r3, r3, r0
 8006cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cce:	bfac      	ite	ge
 8006cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cd2:	81a3      	strhlt	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__swrite>:
 8006cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	461f      	mov	r7, r3
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	05db      	lsls	r3, r3, #23
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	d505      	bpl.n	8006cf4 <__swrite+0x1e>
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2302      	movs	r3, #2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f000 f8d0 	bl	8006e94 <_lseek_r>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	4632      	mov	r2, r6
 8006d02:	463b      	mov	r3, r7
 8006d04:	4628      	mov	r0, r5
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	f000 b8e7 	b.w	8006edc <_write_r>

08006d0e <__sseek>:
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	460c      	mov	r4, r1
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 f8bd 	bl	8006e94 <_lseek_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	bf15      	itete	ne
 8006d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d2a:	81a3      	strheq	r3, [r4, #12]
 8006d2c:	bf18      	it	ne
 8006d2e:	81a3      	strhne	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__sclose>:
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 b89d 	b.w	8006e74 <_close_r>

08006d3a <__swbuf_r>:
 8006d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	4614      	mov	r4, r2
 8006d40:	4605      	mov	r5, r0
 8006d42:	b118      	cbz	r0, 8006d4c <__swbuf_r+0x12>
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	b90b      	cbnz	r3, 8006d4c <__swbuf_r+0x12>
 8006d48:	f7ff fed8 	bl	8006afc <__sinit>
 8006d4c:	69a3      	ldr	r3, [r4, #24]
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	071a      	lsls	r2, r3, #28
 8006d54:	d501      	bpl.n	8006d5a <__swbuf_r+0x20>
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	b943      	cbnz	r3, 8006d6c <__swbuf_r+0x32>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f82b 	bl	8006db8 <__swsetup_r>
 8006d62:	b118      	cbz	r0, 8006d6c <__swbuf_r+0x32>
 8006d64:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d68:	4638      	mov	r0, r7
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	6922      	ldr	r2, [r4, #16]
 8006d70:	1a98      	subs	r0, r3, r2
 8006d72:	6963      	ldr	r3, [r4, #20]
 8006d74:	b2f6      	uxtb	r6, r6
 8006d76:	4283      	cmp	r3, r0
 8006d78:	4637      	mov	r7, r6
 8006d7a:	dc05      	bgt.n	8006d88 <__swbuf_r+0x4e>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 fe9c 	bl	8007abc <_fflush_r>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d1ed      	bne.n	8006d64 <__swbuf_r+0x2a>
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	701e      	strb	r6, [r3, #0]
 8006d96:	6962      	ldr	r2, [r4, #20]
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d004      	beq.n	8006da8 <__swbuf_r+0x6e>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	07db      	lsls	r3, r3, #31
 8006da2:	d5e1      	bpl.n	8006d68 <__swbuf_r+0x2e>
 8006da4:	2e0a      	cmp	r6, #10
 8006da6:	d1df      	bne.n	8006d68 <__swbuf_r+0x2e>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 fe86 	bl	8007abc <_fflush_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0d9      	beq.n	8006d68 <__swbuf_r+0x2e>
 8006db4:	e7d6      	b.n	8006d64 <__swbuf_r+0x2a>
	...

08006db8 <__swsetup_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4b29      	ldr	r3, [pc, #164]	@ (8006e60 <__swsetup_r+0xa8>)
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	b118      	cbz	r0, 8006dcc <__swsetup_r+0x14>
 8006dc4:	6a03      	ldr	r3, [r0, #32]
 8006dc6:	b90b      	cbnz	r3, 8006dcc <__swsetup_r+0x14>
 8006dc8:	f7ff fe98 	bl	8006afc <__sinit>
 8006dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd0:	0719      	lsls	r1, r3, #28
 8006dd2:	d422      	bmi.n	8006e1a <__swsetup_r+0x62>
 8006dd4:	06da      	lsls	r2, r3, #27
 8006dd6:	d407      	bmi.n	8006de8 <__swsetup_r+0x30>
 8006dd8:	2209      	movs	r2, #9
 8006dda:	602a      	str	r2, [r5, #0]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de6:	e033      	b.n	8006e50 <__swsetup_r+0x98>
 8006de8:	0758      	lsls	r0, r3, #29
 8006dea:	d512      	bpl.n	8006e12 <__swsetup_r+0x5a>
 8006dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dee:	b141      	cbz	r1, 8006e02 <__swsetup_r+0x4a>
 8006df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006df4:	4299      	cmp	r1, r3
 8006df6:	d002      	beq.n	8006dfe <__swsetup_r+0x46>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 f8bd 	bl	8006f78 <_free_r>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f043 0308 	orr.w	r3, r3, #8
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	b94b      	cbnz	r3, 8006e32 <__swsetup_r+0x7a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e28:	d003      	beq.n	8006e32 <__swsetup_r+0x7a>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fe93 	bl	8007b58 <__smakebuf_r>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	f013 0201 	ands.w	r2, r3, #1
 8006e3a:	d00a      	beq.n	8006e52 <__swsetup_r+0x9a>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	60a2      	str	r2, [r4, #8]
 8006e40:	6962      	ldr	r2, [r4, #20]
 8006e42:	4252      	negs	r2, r2
 8006e44:	61a2      	str	r2, [r4, #24]
 8006e46:	6922      	ldr	r2, [r4, #16]
 8006e48:	b942      	cbnz	r2, 8006e5c <__swsetup_r+0xa4>
 8006e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e4e:	d1c5      	bne.n	8006ddc <__swsetup_r+0x24>
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	0799      	lsls	r1, r3, #30
 8006e54:	bf58      	it	pl
 8006e56:	6962      	ldrpl	r2, [r4, #20]
 8006e58:	60a2      	str	r2, [r4, #8]
 8006e5a:	e7f4      	b.n	8006e46 <__swsetup_r+0x8e>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7f7      	b.n	8006e50 <__swsetup_r+0x98>
 8006e60:	2000001c 	.word	0x2000001c

08006e64 <memset>:
 8006e64:	4402      	add	r2, r0
 8006e66:	4603      	mov	r3, r0
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d100      	bne.n	8006e6e <memset+0xa>
 8006e6c:	4770      	bx	lr
 8006e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e72:	e7f9      	b.n	8006e68 <memset+0x4>

08006e74 <_close_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d06      	ldr	r5, [pc, #24]	@ (8006e90 <_close_r+0x1c>)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7fa fd21 	bl	80018c6 <_close>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_close_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_close_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	20027cb4 	.word	0x20027cb4

08006e94 <_lseek_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d07      	ldr	r5, [pc, #28]	@ (8006eb4 <_lseek_r+0x20>)
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fa fd36 	bl	8001914 <_lseek>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_lseek_r+0x1e>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_lseek_r+0x1e>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20027cb4 	.word	0x20027cb4

08006eb8 <_read_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d07      	ldr	r5, [pc, #28]	@ (8006ed8 <_read_r+0x20>)
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7fa fcc4 	bl	8001854 <_read>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_read_r+0x1e>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_read_r+0x1e>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	20027cb4 	.word	0x20027cb4

08006edc <_write_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d07      	ldr	r5, [pc, #28]	@ (8006efc <_write_r+0x20>)
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7fa fccf 	bl	800188e <_write>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_write_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_write_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	20027cb4 	.word	0x20027cb4

08006f00 <__errno>:
 8006f00:	4b01      	ldr	r3, [pc, #4]	@ (8006f08 <__errno+0x8>)
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2000001c 	.word	0x2000001c

08006f0c <__libc_init_array>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f44 <__libc_init_array+0x38>)
 8006f10:	4c0d      	ldr	r4, [pc, #52]	@ (8006f48 <__libc_init_array+0x3c>)
 8006f12:	1b64      	subs	r4, r4, r5
 8006f14:	10a4      	asrs	r4, r4, #2
 8006f16:	2600      	movs	r6, #0
 8006f18:	42a6      	cmp	r6, r4
 8006f1a:	d109      	bne.n	8006f30 <__libc_init_array+0x24>
 8006f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f4c <__libc_init_array+0x40>)
 8006f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f50 <__libc_init_array+0x44>)
 8006f20:	f000 fed8 	bl	8007cd4 <_init>
 8006f24:	1b64      	subs	r4, r4, r5
 8006f26:	10a4      	asrs	r4, r4, #2
 8006f28:	2600      	movs	r6, #0
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	d105      	bne.n	8006f3a <__libc_init_array+0x2e>
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f34:	4798      	blx	r3
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7ee      	b.n	8006f18 <__libc_init_array+0xc>
 8006f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3e:	4798      	blx	r3
 8006f40:	3601      	adds	r6, #1
 8006f42:	e7f2      	b.n	8006f2a <__libc_init_array+0x1e>
 8006f44:	08007ffc 	.word	0x08007ffc
 8006f48:	08007ffc 	.word	0x08007ffc
 8006f4c:	08007ffc 	.word	0x08007ffc
 8006f50:	08008000 	.word	0x08008000

08006f54 <__retarget_lock_init_recursive>:
 8006f54:	4770      	bx	lr

08006f56 <__retarget_lock_acquire_recursive>:
 8006f56:	4770      	bx	lr

08006f58 <__retarget_lock_release_recursive>:
 8006f58:	4770      	bx	lr

08006f5a <memcpy>:
 8006f5a:	440a      	add	r2, r1
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f62:	d100      	bne.n	8006f66 <memcpy+0xc>
 8006f64:	4770      	bx	lr
 8006f66:	b510      	push	{r4, lr}
 8006f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f70:	4291      	cmp	r1, r2
 8006f72:	d1f9      	bne.n	8006f68 <memcpy+0xe>
 8006f74:	bd10      	pop	{r4, pc}
	...

08006f78 <_free_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d041      	beq.n	8007004 <_free_r+0x8c>
 8006f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f84:	1f0c      	subs	r4, r1, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfb8      	it	lt
 8006f8a:	18e4      	addlt	r4, r4, r3
 8006f8c:	f000 f8e0 	bl	8007150 <__malloc_lock>
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <_free_r+0x90>)
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	b933      	cbnz	r3, 8006fa4 <_free_r+0x2c>
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa0:	f000 b8dc 	b.w	800715c <__malloc_unlock>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d908      	bls.n	8006fba <_free_r+0x42>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	1821      	adds	r1, r4, r0
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf01      	itttt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	e7ed      	b.n	8006f96 <_free_r+0x1e>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x4c>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x42>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1850      	adds	r0, r2, r1
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x6c>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	4401      	add	r1, r0
 8006fd0:	1850      	adds	r0, r2, r1
 8006fd2:	4283      	cmp	r3, r0
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1e0      	bne.n	8006f9a <_free_r+0x22>
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4408      	add	r0, r1
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	e7da      	b.n	8006f9a <_free_r+0x22>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x74>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	e7d6      	b.n	8006f9a <_free_r+0x22>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	1821      	adds	r1, r4, r0
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7ca      	b.n	8006f9a <_free_r+0x22>
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20027cc0 	.word	0x20027cc0

0800700c <sbrk_aligned>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0f      	ldr	r6, [pc, #60]	@ (800704c <sbrk_aligned+0x40>)
 8007010:	460c      	mov	r4, r1
 8007012:	6831      	ldr	r1, [r6, #0]
 8007014:	4605      	mov	r5, r0
 8007016:	b911      	cbnz	r1, 800701e <sbrk_aligned+0x12>
 8007018:	f000 fe16 	bl	8007c48 <_sbrk_r>
 800701c:	6030      	str	r0, [r6, #0]
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	f000 fe11 	bl	8007c48 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d103      	bne.n	8007032 <sbrk_aligned+0x26>
 800702a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800702e:	4620      	mov	r0, r4
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	1cc4      	adds	r4, r0, #3
 8007034:	f024 0403 	bic.w	r4, r4, #3
 8007038:	42a0      	cmp	r0, r4
 800703a:	d0f8      	beq.n	800702e <sbrk_aligned+0x22>
 800703c:	1a21      	subs	r1, r4, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f000 fe02 	bl	8007c48 <_sbrk_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d1f2      	bne.n	800702e <sbrk_aligned+0x22>
 8007048:	e7ef      	b.n	800702a <sbrk_aligned+0x1e>
 800704a:	bf00      	nop
 800704c:	20027cbc 	.word	0x20027cbc

08007050 <_malloc_r>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	1ccd      	adds	r5, r1, #3
 8007056:	f025 0503 	bic.w	r5, r5, #3
 800705a:	3508      	adds	r5, #8
 800705c:	2d0c      	cmp	r5, #12
 800705e:	bf38      	it	cc
 8007060:	250c      	movcc	r5, #12
 8007062:	2d00      	cmp	r5, #0
 8007064:	4606      	mov	r6, r0
 8007066:	db01      	blt.n	800706c <_malloc_r+0x1c>
 8007068:	42a9      	cmp	r1, r5
 800706a:	d904      	bls.n	8007076 <_malloc_r+0x26>
 800706c:	230c      	movs	r3, #12
 800706e:	6033      	str	r3, [r6, #0]
 8007070:	2000      	movs	r0, #0
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800714c <_malloc_r+0xfc>
 800707a:	f000 f869 	bl	8007150 <__malloc_lock>
 800707e:	f8d8 3000 	ldr.w	r3, [r8]
 8007082:	461c      	mov	r4, r3
 8007084:	bb44      	cbnz	r4, 80070d8 <_malloc_r+0x88>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffbf 	bl	800700c <sbrk_aligned>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	4604      	mov	r4, r0
 8007092:	d158      	bne.n	8007146 <_malloc_r+0xf6>
 8007094:	f8d8 4000 	ldr.w	r4, [r8]
 8007098:	4627      	mov	r7, r4
 800709a:	2f00      	cmp	r7, #0
 800709c:	d143      	bne.n	8007126 <_malloc_r+0xd6>
 800709e:	2c00      	cmp	r4, #0
 80070a0:	d04b      	beq.n	800713a <_malloc_r+0xea>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	4639      	mov	r1, r7
 80070a6:	4630      	mov	r0, r6
 80070a8:	eb04 0903 	add.w	r9, r4, r3
 80070ac:	f000 fdcc 	bl	8007c48 <_sbrk_r>
 80070b0:	4581      	cmp	r9, r0
 80070b2:	d142      	bne.n	800713a <_malloc_r+0xea>
 80070b4:	6821      	ldr	r1, [r4, #0]
 80070b6:	1a6d      	subs	r5, r5, r1
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ffa6 	bl	800700c <sbrk_aligned>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d03a      	beq.n	800713a <_malloc_r+0xea>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	442b      	add	r3, r5
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	f8d8 3000 	ldr.w	r3, [r8]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	bb62      	cbnz	r2, 800712c <_malloc_r+0xdc>
 80070d2:	f8c8 7000 	str.w	r7, [r8]
 80070d6:	e00f      	b.n	80070f8 <_malloc_r+0xa8>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	1b52      	subs	r2, r2, r5
 80070dc:	d420      	bmi.n	8007120 <_malloc_r+0xd0>
 80070de:	2a0b      	cmp	r2, #11
 80070e0:	d917      	bls.n	8007112 <_malloc_r+0xc2>
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	6025      	str	r5, [r4, #0]
 80070e8:	bf18      	it	ne
 80070ea:	6059      	strne	r1, [r3, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	bf08      	it	eq
 80070f0:	f8c8 1000 	streq.w	r1, [r8]
 80070f4:	5162      	str	r2, [r4, r5]
 80070f6:	604b      	str	r3, [r1, #4]
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f82f 	bl	800715c <__malloc_unlock>
 80070fe:	f104 000b 	add.w	r0, r4, #11
 8007102:	1d23      	adds	r3, r4, #4
 8007104:	f020 0007 	bic.w	r0, r0, #7
 8007108:	1ac2      	subs	r2, r0, r3
 800710a:	bf1c      	itt	ne
 800710c:	1a1b      	subne	r3, r3, r0
 800710e:	50a3      	strne	r3, [r4, r2]
 8007110:	e7af      	b.n	8007072 <_malloc_r+0x22>
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	42a3      	cmp	r3, r4
 8007116:	bf0c      	ite	eq
 8007118:	f8c8 2000 	streq.w	r2, [r8]
 800711c:	605a      	strne	r2, [r3, #4]
 800711e:	e7eb      	b.n	80070f8 <_malloc_r+0xa8>
 8007120:	4623      	mov	r3, r4
 8007122:	6864      	ldr	r4, [r4, #4]
 8007124:	e7ae      	b.n	8007084 <_malloc_r+0x34>
 8007126:	463c      	mov	r4, r7
 8007128:	687f      	ldr	r7, [r7, #4]
 800712a:	e7b6      	b.n	800709a <_malloc_r+0x4a>
 800712c:	461a      	mov	r2, r3
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	d1fb      	bne.n	800712c <_malloc_r+0xdc>
 8007134:	2300      	movs	r3, #0
 8007136:	6053      	str	r3, [r2, #4]
 8007138:	e7de      	b.n	80070f8 <_malloc_r+0xa8>
 800713a:	230c      	movs	r3, #12
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	4630      	mov	r0, r6
 8007140:	f000 f80c 	bl	800715c <__malloc_unlock>
 8007144:	e794      	b.n	8007070 <_malloc_r+0x20>
 8007146:	6005      	str	r5, [r0, #0]
 8007148:	e7d6      	b.n	80070f8 <_malloc_r+0xa8>
 800714a:	bf00      	nop
 800714c:	20027cc0 	.word	0x20027cc0

08007150 <__malloc_lock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_lock+0x8>)
 8007152:	f7ff bf00 	b.w	8006f56 <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	20027cb8 	.word	0x20027cb8

0800715c <__malloc_unlock>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__malloc_unlock+0x8>)
 800715e:	f7ff befb 	b.w	8006f58 <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	20027cb8 	.word	0x20027cb8

08007168 <__ssputs_r>:
 8007168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	688e      	ldr	r6, [r1, #8]
 800716e:	461f      	mov	r7, r3
 8007170:	42be      	cmp	r6, r7
 8007172:	680b      	ldr	r3, [r1, #0]
 8007174:	4682      	mov	sl, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4690      	mov	r8, r2
 800717a:	d82d      	bhi.n	80071d8 <__ssputs_r+0x70>
 800717c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007180:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007184:	d026      	beq.n	80071d4 <__ssputs_r+0x6c>
 8007186:	6965      	ldr	r5, [r4, #20]
 8007188:	6909      	ldr	r1, [r1, #16]
 800718a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800718e:	eba3 0901 	sub.w	r9, r3, r1
 8007192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007196:	1c7b      	adds	r3, r7, #1
 8007198:	444b      	add	r3, r9
 800719a:	106d      	asrs	r5, r5, #1
 800719c:	429d      	cmp	r5, r3
 800719e:	bf38      	it	cc
 80071a0:	461d      	movcc	r5, r3
 80071a2:	0553      	lsls	r3, r2, #21
 80071a4:	d527      	bpl.n	80071f6 <__ssputs_r+0x8e>
 80071a6:	4629      	mov	r1, r5
 80071a8:	f7ff ff52 	bl	8007050 <_malloc_r>
 80071ac:	4606      	mov	r6, r0
 80071ae:	b360      	cbz	r0, 800720a <__ssputs_r+0xa2>
 80071b0:	6921      	ldr	r1, [r4, #16]
 80071b2:	464a      	mov	r2, r9
 80071b4:	f7ff fed1 	bl	8006f5a <memcpy>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	6126      	str	r6, [r4, #16]
 80071c6:	6165      	str	r5, [r4, #20]
 80071c8:	444e      	add	r6, r9
 80071ca:	eba5 0509 	sub.w	r5, r5, r9
 80071ce:	6026      	str	r6, [r4, #0]
 80071d0:	60a5      	str	r5, [r4, #8]
 80071d2:	463e      	mov	r6, r7
 80071d4:	42be      	cmp	r6, r7
 80071d6:	d900      	bls.n	80071da <__ssputs_r+0x72>
 80071d8:	463e      	mov	r6, r7
 80071da:	6820      	ldr	r0, [r4, #0]
 80071dc:	4632      	mov	r2, r6
 80071de:	4641      	mov	r1, r8
 80071e0:	f000 fcf6 	bl	8007bd0 <memmove>
 80071e4:	68a3      	ldr	r3, [r4, #8]
 80071e6:	1b9b      	subs	r3, r3, r6
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	4433      	add	r3, r6
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	2000      	movs	r0, #0
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	462a      	mov	r2, r5
 80071f8:	f000 fd36 	bl	8007c68 <_realloc_r>
 80071fc:	4606      	mov	r6, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1e0      	bne.n	80071c4 <__ssputs_r+0x5c>
 8007202:	6921      	ldr	r1, [r4, #16]
 8007204:	4650      	mov	r0, sl
 8007206:	f7ff feb7 	bl	8006f78 <_free_r>
 800720a:	230c      	movs	r3, #12
 800720c:	f8ca 3000 	str.w	r3, [sl]
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800721c:	e7e9      	b.n	80071f2 <__ssputs_r+0x8a>
	...

08007220 <_svfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4698      	mov	r8, r3
 8007226:	898b      	ldrh	r3, [r1, #12]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	b09d      	sub	sp, #116	@ 0x74
 800722c:	4607      	mov	r7, r0
 800722e:	460d      	mov	r5, r1
 8007230:	4614      	mov	r4, r2
 8007232:	d510      	bpl.n	8007256 <_svfiprintf_r+0x36>
 8007234:	690b      	ldr	r3, [r1, #16]
 8007236:	b973      	cbnz	r3, 8007256 <_svfiprintf_r+0x36>
 8007238:	2140      	movs	r1, #64	@ 0x40
 800723a:	f7ff ff09 	bl	8007050 <_malloc_r>
 800723e:	6028      	str	r0, [r5, #0]
 8007240:	6128      	str	r0, [r5, #16]
 8007242:	b930      	cbnz	r0, 8007252 <_svfiprintf_r+0x32>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800724c:	b01d      	add	sp, #116	@ 0x74
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	2340      	movs	r3, #64	@ 0x40
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9309      	str	r3, [sp, #36]	@ 0x24
 800725a:	2320      	movs	r3, #32
 800725c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	2330      	movs	r3, #48	@ 0x30
 8007266:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007404 <_svfiprintf_r+0x1e4>
 800726a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800726e:	f04f 0901 	mov.w	r9, #1
 8007272:	4623      	mov	r3, r4
 8007274:	469a      	mov	sl, r3
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	b10a      	cbz	r2, 8007280 <_svfiprintf_r+0x60>
 800727c:	2a25      	cmp	r2, #37	@ 0x25
 800727e:	d1f9      	bne.n	8007274 <_svfiprintf_r+0x54>
 8007280:	ebba 0b04 	subs.w	fp, sl, r4
 8007284:	d00b      	beq.n	800729e <_svfiprintf_r+0x7e>
 8007286:	465b      	mov	r3, fp
 8007288:	4622      	mov	r2, r4
 800728a:	4629      	mov	r1, r5
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff6b 	bl	8007168 <__ssputs_r>
 8007292:	3001      	adds	r0, #1
 8007294:	f000 80a7 	beq.w	80073e6 <_svfiprintf_r+0x1c6>
 8007298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800729a:	445a      	add	r2, fp
 800729c:	9209      	str	r2, [sp, #36]	@ 0x24
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 809f 	beq.w	80073e6 <_svfiprintf_r+0x1c6>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	f10a 0a01 	add.w	sl, sl, #1
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072be:	931a      	str	r3, [sp, #104]	@ 0x68
 80072c0:	4654      	mov	r4, sl
 80072c2:	2205      	movs	r2, #5
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	484e      	ldr	r0, [pc, #312]	@ (8007404 <_svfiprintf_r+0x1e4>)
 80072ca:	f7f8 ffa1 	bl	8000210 <memchr>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	b9d8      	cbnz	r0, 800730a <_svfiprintf_r+0xea>
 80072d2:	06d0      	lsls	r0, r2, #27
 80072d4:	bf44      	itt	mi
 80072d6:	2320      	movmi	r3, #32
 80072d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072dc:	0711      	lsls	r1, r2, #28
 80072de:	bf44      	itt	mi
 80072e0:	232b      	movmi	r3, #43	@ 0x2b
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ec:	d015      	beq.n	800731a <_svfiprintf_r+0xfa>
 80072ee:	9a07      	ldr	r2, [sp, #28]
 80072f0:	4654      	mov	r4, sl
 80072f2:	2000      	movs	r0, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4621      	mov	r1, r4
 80072fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fe:	3b30      	subs	r3, #48	@ 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d94b      	bls.n	800739c <_svfiprintf_r+0x17c>
 8007304:	b1b0      	cbz	r0, 8007334 <_svfiprintf_r+0x114>
 8007306:	9207      	str	r2, [sp, #28]
 8007308:	e014      	b.n	8007334 <_svfiprintf_r+0x114>
 800730a:	eba0 0308 	sub.w	r3, r0, r8
 800730e:	fa09 f303 	lsl.w	r3, r9, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	46a2      	mov	sl, r4
 8007318:	e7d2      	b.n	80072c0 <_svfiprintf_r+0xa0>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9103      	str	r1, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbb      	ittet	lt
 8007326:	425b      	neglt	r3, r3
 8007328:	f042 0202 	orrlt.w	r2, r2, #2
 800732c:	9307      	strge	r3, [sp, #28]
 800732e:	9307      	strlt	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	9204      	strlt	r2, [sp, #16]
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	2b2e      	cmp	r3, #46	@ 0x2e
 8007338:	d10a      	bne.n	8007350 <_svfiprintf_r+0x130>
 800733a:	7863      	ldrb	r3, [r4, #1]
 800733c:	2b2a      	cmp	r3, #42	@ 0x2a
 800733e:	d132      	bne.n	80073a6 <_svfiprintf_r+0x186>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800734c:	3402      	adds	r4, #2
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007414 <_svfiprintf_r+0x1f4>
 8007354:	7821      	ldrb	r1, [r4, #0]
 8007356:	2203      	movs	r2, #3
 8007358:	4650      	mov	r0, sl
 800735a:	f7f8 ff59 	bl	8000210 <memchr>
 800735e:	b138      	cbz	r0, 8007370 <_svfiprintf_r+0x150>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	eba0 000a 	sub.w	r0, r0, sl
 8007366:	2240      	movs	r2, #64	@ 0x40
 8007368:	4082      	lsls	r2, r0
 800736a:	4313      	orrs	r3, r2
 800736c:	3401      	adds	r4, #1
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007374:	4824      	ldr	r0, [pc, #144]	@ (8007408 <_svfiprintf_r+0x1e8>)
 8007376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800737a:	2206      	movs	r2, #6
 800737c:	f7f8 ff48 	bl	8000210 <memchr>
 8007380:	2800      	cmp	r0, #0
 8007382:	d036      	beq.n	80073f2 <_svfiprintf_r+0x1d2>
 8007384:	4b21      	ldr	r3, [pc, #132]	@ (800740c <_svfiprintf_r+0x1ec>)
 8007386:	bb1b      	cbnz	r3, 80073d0 <_svfiprintf_r+0x1b0>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	3307      	adds	r3, #7
 800738c:	f023 0307 	bic.w	r3, r3, #7
 8007390:	3308      	adds	r3, #8
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007396:	4433      	add	r3, r6
 8007398:	9309      	str	r3, [sp, #36]	@ 0x24
 800739a:	e76a      	b.n	8007272 <_svfiprintf_r+0x52>
 800739c:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a0:	460c      	mov	r4, r1
 80073a2:	2001      	movs	r0, #1
 80073a4:	e7a8      	b.n	80072f8 <_svfiprintf_r+0xd8>
 80073a6:	2300      	movs	r3, #0
 80073a8:	3401      	adds	r4, #1
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	4619      	mov	r1, r3
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	4620      	mov	r0, r4
 80073b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b8:	3a30      	subs	r2, #48	@ 0x30
 80073ba:	2a09      	cmp	r2, #9
 80073bc:	d903      	bls.n	80073c6 <_svfiprintf_r+0x1a6>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0c6      	beq.n	8007350 <_svfiprintf_r+0x130>
 80073c2:	9105      	str	r1, [sp, #20]
 80073c4:	e7c4      	b.n	8007350 <_svfiprintf_r+0x130>
 80073c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ca:	4604      	mov	r4, r0
 80073cc:	2301      	movs	r3, #1
 80073ce:	e7f0      	b.n	80073b2 <_svfiprintf_r+0x192>
 80073d0:	ab03      	add	r3, sp, #12
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	462a      	mov	r2, r5
 80073d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007410 <_svfiprintf_r+0x1f0>)
 80073d8:	a904      	add	r1, sp, #16
 80073da:	4638      	mov	r0, r7
 80073dc:	f3af 8000 	nop.w
 80073e0:	1c42      	adds	r2, r0, #1
 80073e2:	4606      	mov	r6, r0
 80073e4:	d1d6      	bne.n	8007394 <_svfiprintf_r+0x174>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	065b      	lsls	r3, r3, #25
 80073ea:	f53f af2d 	bmi.w	8007248 <_svfiprintf_r+0x28>
 80073ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f0:	e72c      	b.n	800724c <_svfiprintf_r+0x2c>
 80073f2:	ab03      	add	r3, sp, #12
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	462a      	mov	r2, r5
 80073f8:	4b05      	ldr	r3, [pc, #20]	@ (8007410 <_svfiprintf_r+0x1f0>)
 80073fa:	a904      	add	r1, sp, #16
 80073fc:	4638      	mov	r0, r7
 80073fe:	f000 f9bb 	bl	8007778 <_printf_i>
 8007402:	e7ed      	b.n	80073e0 <_svfiprintf_r+0x1c0>
 8007404:	08007fc1 	.word	0x08007fc1
 8007408:	08007fcb 	.word	0x08007fcb
 800740c:	00000000 	.word	0x00000000
 8007410:	08007169 	.word	0x08007169
 8007414:	08007fc7 	.word	0x08007fc7

08007418 <__sfputc_r>:
 8007418:	6893      	ldr	r3, [r2, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	b410      	push	{r4}
 8007420:	6093      	str	r3, [r2, #8]
 8007422:	da08      	bge.n	8007436 <__sfputc_r+0x1e>
 8007424:	6994      	ldr	r4, [r2, #24]
 8007426:	42a3      	cmp	r3, r4
 8007428:	db01      	blt.n	800742e <__sfputc_r+0x16>
 800742a:	290a      	cmp	r1, #10
 800742c:	d103      	bne.n	8007436 <__sfputc_r+0x1e>
 800742e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007432:	f7ff bc82 	b.w	8006d3a <__swbuf_r>
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	1c58      	adds	r0, r3, #1
 800743a:	6010      	str	r0, [r2, #0]
 800743c:	7019      	strb	r1, [r3, #0]
 800743e:	4608      	mov	r0, r1
 8007440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007444:	4770      	bx	lr

08007446 <__sfputs_r>:
 8007446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007448:	4606      	mov	r6, r0
 800744a:	460f      	mov	r7, r1
 800744c:	4614      	mov	r4, r2
 800744e:	18d5      	adds	r5, r2, r3
 8007450:	42ac      	cmp	r4, r5
 8007452:	d101      	bne.n	8007458 <__sfputs_r+0x12>
 8007454:	2000      	movs	r0, #0
 8007456:	e007      	b.n	8007468 <__sfputs_r+0x22>
 8007458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745c:	463a      	mov	r2, r7
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ffda 	bl	8007418 <__sfputc_r>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d1f3      	bne.n	8007450 <__sfputs_r+0xa>
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800746c <_vfiprintf_r>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	460d      	mov	r5, r1
 8007472:	b09d      	sub	sp, #116	@ 0x74
 8007474:	4614      	mov	r4, r2
 8007476:	4698      	mov	r8, r3
 8007478:	4606      	mov	r6, r0
 800747a:	b118      	cbz	r0, 8007484 <_vfiprintf_r+0x18>
 800747c:	6a03      	ldr	r3, [r0, #32]
 800747e:	b90b      	cbnz	r3, 8007484 <_vfiprintf_r+0x18>
 8007480:	f7ff fb3c 	bl	8006afc <__sinit>
 8007484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d405      	bmi.n	8007496 <_vfiprintf_r+0x2a>
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	059a      	lsls	r2, r3, #22
 800748e:	d402      	bmi.n	8007496 <_vfiprintf_r+0x2a>
 8007490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007492:	f7ff fd60 	bl	8006f56 <__retarget_lock_acquire_recursive>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	071b      	lsls	r3, r3, #28
 800749a:	d501      	bpl.n	80074a0 <_vfiprintf_r+0x34>
 800749c:	692b      	ldr	r3, [r5, #16]
 800749e:	b99b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x5c>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff fc88 	bl	8006db8 <__swsetup_r>
 80074a8:	b170      	cbz	r0, 80074c8 <_vfiprintf_r+0x5c>
 80074aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ac:	07dc      	lsls	r4, r3, #31
 80074ae:	d504      	bpl.n	80074ba <_vfiprintf_r+0x4e>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074b4:	b01d      	add	sp, #116	@ 0x74
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	0598      	lsls	r0, r3, #22
 80074be:	d4f7      	bmi.n	80074b0 <_vfiprintf_r+0x44>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7ff fd49 	bl	8006f58 <__retarget_lock_release_recursive>
 80074c6:	e7f3      	b.n	80074b0 <_vfiprintf_r+0x44>
 80074c8:	2300      	movs	r3, #0
 80074ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80074cc:	2320      	movs	r3, #32
 80074ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d6:	2330      	movs	r3, #48	@ 0x30
 80074d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007688 <_vfiprintf_r+0x21c>
 80074dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074e0:	f04f 0901 	mov.w	r9, #1
 80074e4:	4623      	mov	r3, r4
 80074e6:	469a      	mov	sl, r3
 80074e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ec:	b10a      	cbz	r2, 80074f2 <_vfiprintf_r+0x86>
 80074ee:	2a25      	cmp	r2, #37	@ 0x25
 80074f0:	d1f9      	bne.n	80074e6 <_vfiprintf_r+0x7a>
 80074f2:	ebba 0b04 	subs.w	fp, sl, r4
 80074f6:	d00b      	beq.n	8007510 <_vfiprintf_r+0xa4>
 80074f8:	465b      	mov	r3, fp
 80074fa:	4622      	mov	r2, r4
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ffa1 	bl	8007446 <__sfputs_r>
 8007504:	3001      	adds	r0, #1
 8007506:	f000 80a7 	beq.w	8007658 <_vfiprintf_r+0x1ec>
 800750a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800750c:	445a      	add	r2, fp
 800750e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007510:	f89a 3000 	ldrb.w	r3, [sl]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 809f 	beq.w	8007658 <_vfiprintf_r+0x1ec>
 800751a:	2300      	movs	r3, #0
 800751c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007524:	f10a 0a01 	add.w	sl, sl, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007530:	931a      	str	r3, [sp, #104]	@ 0x68
 8007532:	4654      	mov	r4, sl
 8007534:	2205      	movs	r2, #5
 8007536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753a:	4853      	ldr	r0, [pc, #332]	@ (8007688 <_vfiprintf_r+0x21c>)
 800753c:	f7f8 fe68 	bl	8000210 <memchr>
 8007540:	9a04      	ldr	r2, [sp, #16]
 8007542:	b9d8      	cbnz	r0, 800757c <_vfiprintf_r+0x110>
 8007544:	06d1      	lsls	r1, r2, #27
 8007546:	bf44      	itt	mi
 8007548:	2320      	movmi	r3, #32
 800754a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800754e:	0713      	lsls	r3, r2, #28
 8007550:	bf44      	itt	mi
 8007552:	232b      	movmi	r3, #43	@ 0x2b
 8007554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007558:	f89a 3000 	ldrb.w	r3, [sl]
 800755c:	2b2a      	cmp	r3, #42	@ 0x2a
 800755e:	d015      	beq.n	800758c <_vfiprintf_r+0x120>
 8007560:	9a07      	ldr	r2, [sp, #28]
 8007562:	4654      	mov	r4, sl
 8007564:	2000      	movs	r0, #0
 8007566:	f04f 0c0a 	mov.w	ip, #10
 800756a:	4621      	mov	r1, r4
 800756c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007570:	3b30      	subs	r3, #48	@ 0x30
 8007572:	2b09      	cmp	r3, #9
 8007574:	d94b      	bls.n	800760e <_vfiprintf_r+0x1a2>
 8007576:	b1b0      	cbz	r0, 80075a6 <_vfiprintf_r+0x13a>
 8007578:	9207      	str	r2, [sp, #28]
 800757a:	e014      	b.n	80075a6 <_vfiprintf_r+0x13a>
 800757c:	eba0 0308 	sub.w	r3, r0, r8
 8007580:	fa09 f303 	lsl.w	r3, r9, r3
 8007584:	4313      	orrs	r3, r2
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	46a2      	mov	sl, r4
 800758a:	e7d2      	b.n	8007532 <_vfiprintf_r+0xc6>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	1d19      	adds	r1, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfbb      	ittet	lt
 8007598:	425b      	neglt	r3, r3
 800759a:	f042 0202 	orrlt.w	r2, r2, #2
 800759e:	9307      	strge	r3, [sp, #28]
 80075a0:	9307      	strlt	r3, [sp, #28]
 80075a2:	bfb8      	it	lt
 80075a4:	9204      	strlt	r2, [sp, #16]
 80075a6:	7823      	ldrb	r3, [r4, #0]
 80075a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075aa:	d10a      	bne.n	80075c2 <_vfiprintf_r+0x156>
 80075ac:	7863      	ldrb	r3, [r4, #1]
 80075ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80075b0:	d132      	bne.n	8007618 <_vfiprintf_r+0x1ac>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	9203      	str	r2, [sp, #12]
 80075ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075be:	3402      	adds	r4, #2
 80075c0:	9305      	str	r3, [sp, #20]
 80075c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007698 <_vfiprintf_r+0x22c>
 80075c6:	7821      	ldrb	r1, [r4, #0]
 80075c8:	2203      	movs	r2, #3
 80075ca:	4650      	mov	r0, sl
 80075cc:	f7f8 fe20 	bl	8000210 <memchr>
 80075d0:	b138      	cbz	r0, 80075e2 <_vfiprintf_r+0x176>
 80075d2:	9b04      	ldr	r3, [sp, #16]
 80075d4:	eba0 000a 	sub.w	r0, r0, sl
 80075d8:	2240      	movs	r2, #64	@ 0x40
 80075da:	4082      	lsls	r2, r0
 80075dc:	4313      	orrs	r3, r2
 80075de:	3401      	adds	r4, #1
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e6:	4829      	ldr	r0, [pc, #164]	@ (800768c <_vfiprintf_r+0x220>)
 80075e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075ec:	2206      	movs	r2, #6
 80075ee:	f7f8 fe0f 	bl	8000210 <memchr>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d03f      	beq.n	8007676 <_vfiprintf_r+0x20a>
 80075f6:	4b26      	ldr	r3, [pc, #152]	@ (8007690 <_vfiprintf_r+0x224>)
 80075f8:	bb1b      	cbnz	r3, 8007642 <_vfiprintf_r+0x1d6>
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	3307      	adds	r3, #7
 80075fe:	f023 0307 	bic.w	r3, r3, #7
 8007602:	3308      	adds	r3, #8
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007608:	443b      	add	r3, r7
 800760a:	9309      	str	r3, [sp, #36]	@ 0x24
 800760c:	e76a      	b.n	80074e4 <_vfiprintf_r+0x78>
 800760e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007612:	460c      	mov	r4, r1
 8007614:	2001      	movs	r0, #1
 8007616:	e7a8      	b.n	800756a <_vfiprintf_r+0xfe>
 8007618:	2300      	movs	r3, #0
 800761a:	3401      	adds	r4, #1
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	4619      	mov	r1, r3
 8007620:	f04f 0c0a 	mov.w	ip, #10
 8007624:	4620      	mov	r0, r4
 8007626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800762a:	3a30      	subs	r2, #48	@ 0x30
 800762c:	2a09      	cmp	r2, #9
 800762e:	d903      	bls.n	8007638 <_vfiprintf_r+0x1cc>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0c6      	beq.n	80075c2 <_vfiprintf_r+0x156>
 8007634:	9105      	str	r1, [sp, #20]
 8007636:	e7c4      	b.n	80075c2 <_vfiprintf_r+0x156>
 8007638:	fb0c 2101 	mla	r1, ip, r1, r2
 800763c:	4604      	mov	r4, r0
 800763e:	2301      	movs	r3, #1
 8007640:	e7f0      	b.n	8007624 <_vfiprintf_r+0x1b8>
 8007642:	ab03      	add	r3, sp, #12
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	462a      	mov	r2, r5
 8007648:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <_vfiprintf_r+0x228>)
 800764a:	a904      	add	r1, sp, #16
 800764c:	4630      	mov	r0, r6
 800764e:	f3af 8000 	nop.w
 8007652:	4607      	mov	r7, r0
 8007654:	1c78      	adds	r0, r7, #1
 8007656:	d1d6      	bne.n	8007606 <_vfiprintf_r+0x19a>
 8007658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	d405      	bmi.n	800766a <_vfiprintf_r+0x1fe>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	059a      	lsls	r2, r3, #22
 8007662:	d402      	bmi.n	800766a <_vfiprintf_r+0x1fe>
 8007664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007666:	f7ff fc77 	bl	8006f58 <__retarget_lock_release_recursive>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	065b      	lsls	r3, r3, #25
 800766e:	f53f af1f 	bmi.w	80074b0 <_vfiprintf_r+0x44>
 8007672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007674:	e71e      	b.n	80074b4 <_vfiprintf_r+0x48>
 8007676:	ab03      	add	r3, sp, #12
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	462a      	mov	r2, r5
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <_vfiprintf_r+0x228>)
 800767e:	a904      	add	r1, sp, #16
 8007680:	4630      	mov	r0, r6
 8007682:	f000 f879 	bl	8007778 <_printf_i>
 8007686:	e7e4      	b.n	8007652 <_vfiprintf_r+0x1e6>
 8007688:	08007fc1 	.word	0x08007fc1
 800768c:	08007fcb 	.word	0x08007fcb
 8007690:	00000000 	.word	0x00000000
 8007694:	08007447 	.word	0x08007447
 8007698:	08007fc7 	.word	0x08007fc7

0800769c <_printf_common>:
 800769c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	4616      	mov	r6, r2
 80076a2:	4698      	mov	r8, r3
 80076a4:	688a      	ldr	r2, [r1, #8]
 80076a6:	690b      	ldr	r3, [r1, #16]
 80076a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	bfb8      	it	lt
 80076b0:	4613      	movlt	r3, r2
 80076b2:	6033      	str	r3, [r6, #0]
 80076b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076b8:	4607      	mov	r7, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	b10a      	cbz	r2, 80076c2 <_printf_common+0x26>
 80076be:	3301      	adds	r3, #1
 80076c0:	6033      	str	r3, [r6, #0]
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	0699      	lsls	r1, r3, #26
 80076c6:	bf42      	ittt	mi
 80076c8:	6833      	ldrmi	r3, [r6, #0]
 80076ca:	3302      	addmi	r3, #2
 80076cc:	6033      	strmi	r3, [r6, #0]
 80076ce:	6825      	ldr	r5, [r4, #0]
 80076d0:	f015 0506 	ands.w	r5, r5, #6
 80076d4:	d106      	bne.n	80076e4 <_printf_common+0x48>
 80076d6:	f104 0a19 	add.w	sl, r4, #25
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	6832      	ldr	r2, [r6, #0]
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	dc26      	bgt.n	8007732 <_printf_common+0x96>
 80076e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	3b00      	subs	r3, #0
 80076ec:	bf18      	it	ne
 80076ee:	2301      	movne	r3, #1
 80076f0:	0692      	lsls	r2, r2, #26
 80076f2:	d42b      	bmi.n	800774c <_printf_common+0xb0>
 80076f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076f8:	4641      	mov	r1, r8
 80076fa:	4638      	mov	r0, r7
 80076fc:	47c8      	blx	r9
 80076fe:	3001      	adds	r0, #1
 8007700:	d01e      	beq.n	8007740 <_printf_common+0xa4>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	6922      	ldr	r2, [r4, #16]
 8007706:	f003 0306 	and.w	r3, r3, #6
 800770a:	2b04      	cmp	r3, #4
 800770c:	bf02      	ittt	eq
 800770e:	68e5      	ldreq	r5, [r4, #12]
 8007710:	6833      	ldreq	r3, [r6, #0]
 8007712:	1aed      	subeq	r5, r5, r3
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	bf0c      	ite	eq
 8007718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800771c:	2500      	movne	r5, #0
 800771e:	4293      	cmp	r3, r2
 8007720:	bfc4      	itt	gt
 8007722:	1a9b      	subgt	r3, r3, r2
 8007724:	18ed      	addgt	r5, r5, r3
 8007726:	2600      	movs	r6, #0
 8007728:	341a      	adds	r4, #26
 800772a:	42b5      	cmp	r5, r6
 800772c:	d11a      	bne.n	8007764 <_printf_common+0xc8>
 800772e:	2000      	movs	r0, #0
 8007730:	e008      	b.n	8007744 <_printf_common+0xa8>
 8007732:	2301      	movs	r3, #1
 8007734:	4652      	mov	r2, sl
 8007736:	4641      	mov	r1, r8
 8007738:	4638      	mov	r0, r7
 800773a:	47c8      	blx	r9
 800773c:	3001      	adds	r0, #1
 800773e:	d103      	bne.n	8007748 <_printf_common+0xac>
 8007740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007748:	3501      	adds	r5, #1
 800774a:	e7c6      	b.n	80076da <_printf_common+0x3e>
 800774c:	18e1      	adds	r1, r4, r3
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	2030      	movs	r0, #48	@ 0x30
 8007752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007756:	4422      	add	r2, r4
 8007758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800775c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007760:	3302      	adds	r3, #2
 8007762:	e7c7      	b.n	80076f4 <_printf_common+0x58>
 8007764:	2301      	movs	r3, #1
 8007766:	4622      	mov	r2, r4
 8007768:	4641      	mov	r1, r8
 800776a:	4638      	mov	r0, r7
 800776c:	47c8      	blx	r9
 800776e:	3001      	adds	r0, #1
 8007770:	d0e6      	beq.n	8007740 <_printf_common+0xa4>
 8007772:	3601      	adds	r6, #1
 8007774:	e7d9      	b.n	800772a <_printf_common+0x8e>
	...

08007778 <_printf_i>:
 8007778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	7e0f      	ldrb	r7, [r1, #24]
 800777e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007780:	2f78      	cmp	r7, #120	@ 0x78
 8007782:	4691      	mov	r9, r2
 8007784:	4680      	mov	r8, r0
 8007786:	460c      	mov	r4, r1
 8007788:	469a      	mov	sl, r3
 800778a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800778e:	d807      	bhi.n	80077a0 <_printf_i+0x28>
 8007790:	2f62      	cmp	r7, #98	@ 0x62
 8007792:	d80a      	bhi.n	80077aa <_printf_i+0x32>
 8007794:	2f00      	cmp	r7, #0
 8007796:	f000 80d1 	beq.w	800793c <_printf_i+0x1c4>
 800779a:	2f58      	cmp	r7, #88	@ 0x58
 800779c:	f000 80b8 	beq.w	8007910 <_printf_i+0x198>
 80077a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077a8:	e03a      	b.n	8007820 <_printf_i+0xa8>
 80077aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ae:	2b15      	cmp	r3, #21
 80077b0:	d8f6      	bhi.n	80077a0 <_printf_i+0x28>
 80077b2:	a101      	add	r1, pc, #4	@ (adr r1, 80077b8 <_printf_i+0x40>)
 80077b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007825 	.word	0x08007825
 80077c0:	080077a1 	.word	0x080077a1
 80077c4:	080077a1 	.word	0x080077a1
 80077c8:	080077a1 	.word	0x080077a1
 80077cc:	080077a1 	.word	0x080077a1
 80077d0:	08007825 	.word	0x08007825
 80077d4:	080077a1 	.word	0x080077a1
 80077d8:	080077a1 	.word	0x080077a1
 80077dc:	080077a1 	.word	0x080077a1
 80077e0:	080077a1 	.word	0x080077a1
 80077e4:	08007923 	.word	0x08007923
 80077e8:	0800784f 	.word	0x0800784f
 80077ec:	080078dd 	.word	0x080078dd
 80077f0:	080077a1 	.word	0x080077a1
 80077f4:	080077a1 	.word	0x080077a1
 80077f8:	08007945 	.word	0x08007945
 80077fc:	080077a1 	.word	0x080077a1
 8007800:	0800784f 	.word	0x0800784f
 8007804:	080077a1 	.word	0x080077a1
 8007808:	080077a1 	.word	0x080077a1
 800780c:	080078e5 	.word	0x080078e5
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	1d1a      	adds	r2, r3, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6032      	str	r2, [r6, #0]
 8007818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800781c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007820:	2301      	movs	r3, #1
 8007822:	e09c      	b.n	800795e <_printf_i+0x1e6>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	6820      	ldr	r0, [r4, #0]
 8007828:	1d19      	adds	r1, r3, #4
 800782a:	6031      	str	r1, [r6, #0]
 800782c:	0606      	lsls	r6, r0, #24
 800782e:	d501      	bpl.n	8007834 <_printf_i+0xbc>
 8007830:	681d      	ldr	r5, [r3, #0]
 8007832:	e003      	b.n	800783c <_printf_i+0xc4>
 8007834:	0645      	lsls	r5, r0, #25
 8007836:	d5fb      	bpl.n	8007830 <_printf_i+0xb8>
 8007838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800783c:	2d00      	cmp	r5, #0
 800783e:	da03      	bge.n	8007848 <_printf_i+0xd0>
 8007840:	232d      	movs	r3, #45	@ 0x2d
 8007842:	426d      	negs	r5, r5
 8007844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007848:	4858      	ldr	r0, [pc, #352]	@ (80079ac <_printf_i+0x234>)
 800784a:	230a      	movs	r3, #10
 800784c:	e011      	b.n	8007872 <_printf_i+0xfa>
 800784e:	6821      	ldr	r1, [r4, #0]
 8007850:	6833      	ldr	r3, [r6, #0]
 8007852:	0608      	lsls	r0, r1, #24
 8007854:	f853 5b04 	ldr.w	r5, [r3], #4
 8007858:	d402      	bmi.n	8007860 <_printf_i+0xe8>
 800785a:	0649      	lsls	r1, r1, #25
 800785c:	bf48      	it	mi
 800785e:	b2ad      	uxthmi	r5, r5
 8007860:	2f6f      	cmp	r7, #111	@ 0x6f
 8007862:	4852      	ldr	r0, [pc, #328]	@ (80079ac <_printf_i+0x234>)
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	bf14      	ite	ne
 8007868:	230a      	movne	r3, #10
 800786a:	2308      	moveq	r3, #8
 800786c:	2100      	movs	r1, #0
 800786e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007872:	6866      	ldr	r6, [r4, #4]
 8007874:	60a6      	str	r6, [r4, #8]
 8007876:	2e00      	cmp	r6, #0
 8007878:	db05      	blt.n	8007886 <_printf_i+0x10e>
 800787a:	6821      	ldr	r1, [r4, #0]
 800787c:	432e      	orrs	r6, r5
 800787e:	f021 0104 	bic.w	r1, r1, #4
 8007882:	6021      	str	r1, [r4, #0]
 8007884:	d04b      	beq.n	800791e <_printf_i+0x1a6>
 8007886:	4616      	mov	r6, r2
 8007888:	fbb5 f1f3 	udiv	r1, r5, r3
 800788c:	fb03 5711 	mls	r7, r3, r1, r5
 8007890:	5dc7      	ldrb	r7, [r0, r7]
 8007892:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007896:	462f      	mov	r7, r5
 8007898:	42bb      	cmp	r3, r7
 800789a:	460d      	mov	r5, r1
 800789c:	d9f4      	bls.n	8007888 <_printf_i+0x110>
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d10b      	bne.n	80078ba <_printf_i+0x142>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	07df      	lsls	r7, r3, #31
 80078a6:	d508      	bpl.n	80078ba <_printf_i+0x142>
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	6861      	ldr	r1, [r4, #4]
 80078ac:	4299      	cmp	r1, r3
 80078ae:	bfde      	ittt	le
 80078b0:	2330      	movle	r3, #48	@ 0x30
 80078b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80078ba:	1b92      	subs	r2, r2, r6
 80078bc:	6122      	str	r2, [r4, #16]
 80078be:	f8cd a000 	str.w	sl, [sp]
 80078c2:	464b      	mov	r3, r9
 80078c4:	aa03      	add	r2, sp, #12
 80078c6:	4621      	mov	r1, r4
 80078c8:	4640      	mov	r0, r8
 80078ca:	f7ff fee7 	bl	800769c <_printf_common>
 80078ce:	3001      	adds	r0, #1
 80078d0:	d14a      	bne.n	8007968 <_printf_i+0x1f0>
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078d6:	b004      	add	sp, #16
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	f043 0320 	orr.w	r3, r3, #32
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	4832      	ldr	r0, [pc, #200]	@ (80079b0 <_printf_i+0x238>)
 80078e6:	2778      	movs	r7, #120	@ 0x78
 80078e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	6831      	ldr	r1, [r6, #0]
 80078f0:	061f      	lsls	r7, r3, #24
 80078f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80078f6:	d402      	bmi.n	80078fe <_printf_i+0x186>
 80078f8:	065f      	lsls	r7, r3, #25
 80078fa:	bf48      	it	mi
 80078fc:	b2ad      	uxthmi	r5, r5
 80078fe:	6031      	str	r1, [r6, #0]
 8007900:	07d9      	lsls	r1, r3, #31
 8007902:	bf44      	itt	mi
 8007904:	f043 0320 	orrmi.w	r3, r3, #32
 8007908:	6023      	strmi	r3, [r4, #0]
 800790a:	b11d      	cbz	r5, 8007914 <_printf_i+0x19c>
 800790c:	2310      	movs	r3, #16
 800790e:	e7ad      	b.n	800786c <_printf_i+0xf4>
 8007910:	4826      	ldr	r0, [pc, #152]	@ (80079ac <_printf_i+0x234>)
 8007912:	e7e9      	b.n	80078e8 <_printf_i+0x170>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	f023 0320 	bic.w	r3, r3, #32
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	e7f6      	b.n	800790c <_printf_i+0x194>
 800791e:	4616      	mov	r6, r2
 8007920:	e7bd      	b.n	800789e <_printf_i+0x126>
 8007922:	6833      	ldr	r3, [r6, #0]
 8007924:	6825      	ldr	r5, [r4, #0]
 8007926:	6961      	ldr	r1, [r4, #20]
 8007928:	1d18      	adds	r0, r3, #4
 800792a:	6030      	str	r0, [r6, #0]
 800792c:	062e      	lsls	r6, r5, #24
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	d501      	bpl.n	8007936 <_printf_i+0x1be>
 8007932:	6019      	str	r1, [r3, #0]
 8007934:	e002      	b.n	800793c <_printf_i+0x1c4>
 8007936:	0668      	lsls	r0, r5, #25
 8007938:	d5fb      	bpl.n	8007932 <_printf_i+0x1ba>
 800793a:	8019      	strh	r1, [r3, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	4616      	mov	r6, r2
 8007942:	e7bc      	b.n	80078be <_printf_i+0x146>
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	6032      	str	r2, [r6, #0]
 800794a:	681e      	ldr	r6, [r3, #0]
 800794c:	6862      	ldr	r2, [r4, #4]
 800794e:	2100      	movs	r1, #0
 8007950:	4630      	mov	r0, r6
 8007952:	f7f8 fc5d 	bl	8000210 <memchr>
 8007956:	b108      	cbz	r0, 800795c <_printf_i+0x1e4>
 8007958:	1b80      	subs	r0, r0, r6
 800795a:	6060      	str	r0, [r4, #4]
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	6123      	str	r3, [r4, #16]
 8007960:	2300      	movs	r3, #0
 8007962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007966:	e7aa      	b.n	80078be <_printf_i+0x146>
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	4632      	mov	r2, r6
 800796c:	4649      	mov	r1, r9
 800796e:	4640      	mov	r0, r8
 8007970:	47d0      	blx	sl
 8007972:	3001      	adds	r0, #1
 8007974:	d0ad      	beq.n	80078d2 <_printf_i+0x15a>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	079b      	lsls	r3, r3, #30
 800797a:	d413      	bmi.n	80079a4 <_printf_i+0x22c>
 800797c:	68e0      	ldr	r0, [r4, #12]
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	4298      	cmp	r0, r3
 8007982:	bfb8      	it	lt
 8007984:	4618      	movlt	r0, r3
 8007986:	e7a6      	b.n	80078d6 <_printf_i+0x15e>
 8007988:	2301      	movs	r3, #1
 800798a:	4632      	mov	r2, r6
 800798c:	4649      	mov	r1, r9
 800798e:	4640      	mov	r0, r8
 8007990:	47d0      	blx	sl
 8007992:	3001      	adds	r0, #1
 8007994:	d09d      	beq.n	80078d2 <_printf_i+0x15a>
 8007996:	3501      	adds	r5, #1
 8007998:	68e3      	ldr	r3, [r4, #12]
 800799a:	9903      	ldr	r1, [sp, #12]
 800799c:	1a5b      	subs	r3, r3, r1
 800799e:	42ab      	cmp	r3, r5
 80079a0:	dcf2      	bgt.n	8007988 <_printf_i+0x210>
 80079a2:	e7eb      	b.n	800797c <_printf_i+0x204>
 80079a4:	2500      	movs	r5, #0
 80079a6:	f104 0619 	add.w	r6, r4, #25
 80079aa:	e7f5      	b.n	8007998 <_printf_i+0x220>
 80079ac:	08007fd2 	.word	0x08007fd2
 80079b0:	08007fe3 	.word	0x08007fe3

080079b4 <__sflush_r>:
 80079b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	0716      	lsls	r6, r2, #28
 80079be:	4605      	mov	r5, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	d454      	bmi.n	8007a6e <__sflush_r+0xba>
 80079c4:	684b      	ldr	r3, [r1, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dc02      	bgt.n	80079d0 <__sflush_r+0x1c>
 80079ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd48      	ble.n	8007a62 <__sflush_r+0xae>
 80079d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079d2:	2e00      	cmp	r6, #0
 80079d4:	d045      	beq.n	8007a62 <__sflush_r+0xae>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079dc:	682f      	ldr	r7, [r5, #0]
 80079de:	6a21      	ldr	r1, [r4, #32]
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	d030      	beq.n	8007a46 <__sflush_r+0x92>
 80079e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	0759      	lsls	r1, r3, #29
 80079ea:	d505      	bpl.n	80079f8 <__sflush_r+0x44>
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079f2:	b10b      	cbz	r3, 80079f8 <__sflush_r+0x44>
 80079f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	2300      	movs	r3, #0
 80079fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079fc:	6a21      	ldr	r1, [r4, #32]
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b0      	blx	r6
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	d106      	bne.n	8007a16 <__sflush_r+0x62>
 8007a08:	6829      	ldr	r1, [r5, #0]
 8007a0a:	291d      	cmp	r1, #29
 8007a0c:	d82b      	bhi.n	8007a66 <__sflush_r+0xb2>
 8007a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab8 <__sflush_r+0x104>)
 8007a10:	40ca      	lsrs	r2, r1
 8007a12:	07d6      	lsls	r6, r2, #31
 8007a14:	d527      	bpl.n	8007a66 <__sflush_r+0xb2>
 8007a16:	2200      	movs	r2, #0
 8007a18:	6062      	str	r2, [r4, #4]
 8007a1a:	04d9      	lsls	r1, r3, #19
 8007a1c:	6922      	ldr	r2, [r4, #16]
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	d504      	bpl.n	8007a2c <__sflush_r+0x78>
 8007a22:	1c42      	adds	r2, r0, #1
 8007a24:	d101      	bne.n	8007a2a <__sflush_r+0x76>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	b903      	cbnz	r3, 8007a2c <__sflush_r+0x78>
 8007a2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a2e:	602f      	str	r7, [r5, #0]
 8007a30:	b1b9      	cbz	r1, 8007a62 <__sflush_r+0xae>
 8007a32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d002      	beq.n	8007a40 <__sflush_r+0x8c>
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f7ff fa9c 	bl	8006f78 <_free_r>
 8007a40:	2300      	movs	r3, #0
 8007a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a44:	e00d      	b.n	8007a62 <__sflush_r+0xae>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b0      	blx	r6
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	1c50      	adds	r0, r2, #1
 8007a50:	d1c9      	bne.n	80079e6 <__sflush_r+0x32>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0c6      	beq.n	80079e6 <__sflush_r+0x32>
 8007a58:	2b1d      	cmp	r3, #29
 8007a5a:	d001      	beq.n	8007a60 <__sflush_r+0xac>
 8007a5c:	2b16      	cmp	r3, #22
 8007a5e:	d11e      	bne.n	8007a9e <__sflush_r+0xea>
 8007a60:	602f      	str	r7, [r5, #0]
 8007a62:	2000      	movs	r0, #0
 8007a64:	e022      	b.n	8007aac <__sflush_r+0xf8>
 8007a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a6a:	b21b      	sxth	r3, r3
 8007a6c:	e01b      	b.n	8007aa6 <__sflush_r+0xf2>
 8007a6e:	690f      	ldr	r7, [r1, #16]
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	d0f6      	beq.n	8007a62 <__sflush_r+0xae>
 8007a74:	0793      	lsls	r3, r2, #30
 8007a76:	680e      	ldr	r6, [r1, #0]
 8007a78:	bf08      	it	eq
 8007a7a:	694b      	ldreq	r3, [r1, #20]
 8007a7c:	600f      	str	r7, [r1, #0]
 8007a7e:	bf18      	it	ne
 8007a80:	2300      	movne	r3, #0
 8007a82:	eba6 0807 	sub.w	r8, r6, r7
 8007a86:	608b      	str	r3, [r1, #8]
 8007a88:	f1b8 0f00 	cmp.w	r8, #0
 8007a8c:	dde9      	ble.n	8007a62 <__sflush_r+0xae>
 8007a8e:	6a21      	ldr	r1, [r4, #32]
 8007a90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a92:	4643      	mov	r3, r8
 8007a94:	463a      	mov	r2, r7
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b0      	blx	r6
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	dc08      	bgt.n	8007ab0 <__sflush_r+0xfc>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab0:	4407      	add	r7, r0
 8007ab2:	eba8 0800 	sub.w	r8, r8, r0
 8007ab6:	e7e7      	b.n	8007a88 <__sflush_r+0xd4>
 8007ab8:	20400001 	.word	0x20400001

08007abc <_fflush_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	690b      	ldr	r3, [r1, #16]
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b913      	cbnz	r3, 8007acc <_fflush_r+0x10>
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	b118      	cbz	r0, 8007ad6 <_fflush_r+0x1a>
 8007ace:	6a03      	ldr	r3, [r0, #32]
 8007ad0:	b90b      	cbnz	r3, 8007ad6 <_fflush_r+0x1a>
 8007ad2:	f7ff f813 	bl	8006afc <__sinit>
 8007ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f3      	beq.n	8007ac6 <_fflush_r+0xa>
 8007ade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ae0:	07d0      	lsls	r0, r2, #31
 8007ae2:	d404      	bmi.n	8007aee <_fflush_r+0x32>
 8007ae4:	0599      	lsls	r1, r3, #22
 8007ae6:	d402      	bmi.n	8007aee <_fflush_r+0x32>
 8007ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aea:	f7ff fa34 	bl	8006f56 <__retarget_lock_acquire_recursive>
 8007aee:	4628      	mov	r0, r5
 8007af0:	4621      	mov	r1, r4
 8007af2:	f7ff ff5f 	bl	80079b4 <__sflush_r>
 8007af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007af8:	07da      	lsls	r2, r3, #31
 8007afa:	4605      	mov	r5, r0
 8007afc:	d4e4      	bmi.n	8007ac8 <_fflush_r+0xc>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	059b      	lsls	r3, r3, #22
 8007b02:	d4e1      	bmi.n	8007ac8 <_fflush_r+0xc>
 8007b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b06:	f7ff fa27 	bl	8006f58 <__retarget_lock_release_recursive>
 8007b0a:	e7dd      	b.n	8007ac8 <_fflush_r+0xc>

08007b0c <__swhatbuf_r>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	460c      	mov	r4, r1
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	2900      	cmp	r1, #0
 8007b16:	b096      	sub	sp, #88	@ 0x58
 8007b18:	4615      	mov	r5, r2
 8007b1a:	461e      	mov	r6, r3
 8007b1c:	da0d      	bge.n	8007b3a <__swhatbuf_r+0x2e>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	bf14      	ite	ne
 8007b2a:	2340      	movne	r3, #64	@ 0x40
 8007b2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b30:	2000      	movs	r0, #0
 8007b32:	6031      	str	r1, [r6, #0]
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	b016      	add	sp, #88	@ 0x58
 8007b38:	bd70      	pop	{r4, r5, r6, pc}
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	f000 f862 	bl	8007c04 <_fstat_r>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	dbec      	blt.n	8007b1e <__swhatbuf_r+0x12>
 8007b44:	9901      	ldr	r1, [sp, #4]
 8007b46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b4e:	4259      	negs	r1, r3
 8007b50:	4159      	adcs	r1, r3
 8007b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b56:	e7eb      	b.n	8007b30 <__swhatbuf_r+0x24>

08007b58 <__smakebuf_r>:
 8007b58:	898b      	ldrh	r3, [r1, #12]
 8007b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b5c:	079d      	lsls	r5, r3, #30
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	d507      	bpl.n	8007b74 <__smakebuf_r+0x1c>
 8007b64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	6163      	str	r3, [r4, #20]
 8007b70:	b003      	add	sp, #12
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b74:	ab01      	add	r3, sp, #4
 8007b76:	466a      	mov	r2, sp
 8007b78:	f7ff ffc8 	bl	8007b0c <__swhatbuf_r>
 8007b7c:	9f00      	ldr	r7, [sp, #0]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	4639      	mov	r1, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff fa64 	bl	8007050 <_malloc_r>
 8007b88:	b948      	cbnz	r0, 8007b9e <__smakebuf_r+0x46>
 8007b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8e:	059a      	lsls	r2, r3, #22
 8007b90:	d4ee      	bmi.n	8007b70 <__smakebuf_r+0x18>
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0302 	orr.w	r3, r3, #2
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	e7e2      	b.n	8007b64 <__smakebuf_r+0xc>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	6020      	str	r0, [r4, #0]
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bae:	b15b      	cbz	r3, 8007bc8 <__smakebuf_r+0x70>
 8007bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f000 f837 	bl	8007c28 <_isatty_r>
 8007bba:	b128      	cbz	r0, 8007bc8 <__smakebuf_r+0x70>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	431d      	orrs	r5, r3
 8007bcc:	81a5      	strh	r5, [r4, #12]
 8007bce:	e7cf      	b.n	8007b70 <__smakebuf_r+0x18>

08007bd0 <memmove>:
 8007bd0:	4288      	cmp	r0, r1
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	eb01 0402 	add.w	r4, r1, r2
 8007bd8:	d902      	bls.n	8007be0 <memmove+0x10>
 8007bda:	4284      	cmp	r4, r0
 8007bdc:	4623      	mov	r3, r4
 8007bde:	d807      	bhi.n	8007bf0 <memmove+0x20>
 8007be0:	1e43      	subs	r3, r0, #1
 8007be2:	42a1      	cmp	r1, r4
 8007be4:	d008      	beq.n	8007bf8 <memmove+0x28>
 8007be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bee:	e7f8      	b.n	8007be2 <memmove+0x12>
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d100      	bne.n	8007bfa <memmove+0x2a>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c02:	e7f7      	b.n	8007bf4 <memmove+0x24>

08007c04 <_fstat_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d07      	ldr	r5, [pc, #28]	@ (8007c24 <_fstat_r+0x20>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	f7f9 fe64 	bl	80018de <_fstat>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	d102      	bne.n	8007c20 <_fstat_r+0x1c>
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	b103      	cbz	r3, 8007c20 <_fstat_r+0x1c>
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	20027cb4 	.word	0x20027cb4

08007c28 <_isatty_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	@ (8007c44 <_isatty_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f9 fe63 	bl	80018fe <_isatty>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_isatty_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_isatty_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20027cb4 	.word	0x20027cb4

08007c48 <_sbrk_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_sbrk_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7f9 fe6c 	bl	8001930 <_sbrk>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_sbrk_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_sbrk_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20027cb4 	.word	0x20027cb4

08007c68 <_realloc_r>:
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	4614      	mov	r4, r2
 8007c70:	460d      	mov	r5, r1
 8007c72:	b921      	cbnz	r1, 8007c7e <_realloc_r+0x16>
 8007c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	4611      	mov	r1, r2
 8007c7a:	f7ff b9e9 	b.w	8007050 <_malloc_r>
 8007c7e:	b92a      	cbnz	r2, 8007c8c <_realloc_r+0x24>
 8007c80:	f7ff f97a 	bl	8006f78 <_free_r>
 8007c84:	4625      	mov	r5, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	f000 f81a 	bl	8007cc4 <_malloc_usable_size_r>
 8007c90:	4284      	cmp	r4, r0
 8007c92:	4606      	mov	r6, r0
 8007c94:	d802      	bhi.n	8007c9c <_realloc_r+0x34>
 8007c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c9a:	d8f4      	bhi.n	8007c86 <_realloc_r+0x1e>
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f7ff f9d6 	bl	8007050 <_malloc_r>
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	b908      	cbnz	r0, 8007cac <_realloc_r+0x44>
 8007ca8:	4645      	mov	r5, r8
 8007caa:	e7ec      	b.n	8007c86 <_realloc_r+0x1e>
 8007cac:	42b4      	cmp	r4, r6
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	bf28      	it	cs
 8007cb4:	4632      	movcs	r2, r6
 8007cb6:	f7ff f950 	bl	8006f5a <memcpy>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff f95b 	bl	8006f78 <_free_r>
 8007cc2:	e7f1      	b.n	8007ca8 <_realloc_r+0x40>

08007cc4 <_malloc_usable_size_r>:
 8007cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc8:	1f18      	subs	r0, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbc      	itt	lt
 8007cce:	580b      	ldrlt	r3, [r1, r0]
 8007cd0:	18c0      	addlt	r0, r0, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
